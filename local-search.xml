<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/24/java/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/03/24/java/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="Java三大版本"><a href="#Java三大版本" class="headerlink" title="Java三大版本"></a>Java三大版本</h2><ul><li>JavaSE: 标准版 (桌面程序，控制台开发…)</li><li>JavaME: 嵌入式开发 (手机，小家电…)，已经凉了</li><li>JavaEE: E企业级开发 (Web端，服务端开发…)，JavaSE为基础</li></ul><br><h2 id="JDK-JRE-JVM"><a href="#JDK-JRE-JVM" class="headerlink" title="JDK  JRE  JVM"></a>JDK  JRE  JVM</h2><ul><li>JDK：Java Development Kit (Java开发者工具，包括 JRE，JVM)</li><li>JRE：Java Runtime Environment (Java运行时环境)</li><li>JVM：Java Virtual Machine (Java虚拟机，跨平台核心)<ul><li>JVM 是 java虚拟机，是用来执行java字节码(二进制的形式)的虚拟计算机。</li><li>jvm是运行在操作系统之上的，与硬件没有任何关系</li><li>引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码，就可以在多种平台上不加修改地运行。</li></ul></li></ul><img src="/.io//image-20220315233120969.png" alt="image-20220315233120969" style="zoom:67%;"><br><h2 id="JavaDoc生成文档"><a href="#JavaDoc生成文档" class="headerlink" title="JavaDoc生成文档"></a>JavaDoc生成文档</h2><ul><li>javadoc命令是用来生成自己API文档的</li><li>参数信息<ul><li>@author 作者名</li><li>@version 版本号</li><li>@since 指明最早用的jdk版本</li><li>@param 参数名</li><li>@return 返回值情况</li><li>@throws 异常抛出情况</li></ul></li></ul><br><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>Annontation是Java5开始引入的新特征，中文名称叫注解。它提供了一种安全的类似注释的机制，用来将任何的信息或元数据（metadata）与程序元素（类、方法、成员变量等）进行关联。为程序的元素（类、方法、成员变量）加上更直观更明了的说明，这些说明信息是与程序的业务逻辑无关，并且供指定的工具或框架使用。</p><p>Annontation像一种修饰符一样，应用于包、类型、构造方法、方法、成员变量、参数及本地变量的声明语句中。</p><h5 id="注解的用处："><a href="#注解的用处：" class="headerlink" title="注解的用处："></a>注解的用处：</h5><ul><li>生成文档。这是最常见的，也是java 最早提供的注解。常用的有@param @return 等</li><li>跟踪代码依赖性，实现替代配置文件功能。比如Dagger 2 依赖注入，未来java 开发，将大量注解配置，具有很大用处;</li><li>在编译时进行格式检查。如@override 放在方法前，如果你这个方法并不是覆盖了超类方法，则编译时就能检查出。</li></ul><p>具体见：<a href="https://www.cnblogs.com/acm-bingzi/p/javaAnnotation.html">https://www.cnblogs.com/acm-bingzi/p/javaAnnotation.html</a></p><br><h2 id="Java流程控制（用户输入）"><a href="#Java流程控制（用户输入）" class="headerlink" title="Java流程控制（用户输入）"></a>Java流程控制（用户输入）</h2><h4 id="用户交互Scanner"><a href="#用户交互Scanner" class="headerlink" title="用户交互Scanner"></a>用户交互Scanner</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建一个扫描器对象</span><br>Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>String str = scanner.next(); <br><span class="hljs-comment">//凡是属于IO流的类如果不关闭会一直占用资源</span><br>scanner.close();<br></code></pre></td></tr></table></figure><h5 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h5><ul><li>一定要读取到有效字符才可以结束输入</li><li>对输入有效字符之前遇到的空白，next()方法会将其去掉</li><li>只有输入有效字符后才将其后面输入的空白作为结束符</li><li>next()不能得到带有空格的字符串</li></ul><h5 id="nextLine"><a href="#nextLine" class="headerlink" title="nextLine()"></a>nextLine()</h5><ul><li>以Enter作为结束符，即返回输入回车之前所有的字符</li><li>nextLine()可以获取空白</li></ul><br><h2 id="重写Override-amp-重载Overload"><a href="#重写Override-amp-重载Overload" class="headerlink" title="重写Override &amp; 重载Overload"></a>重写Override &amp; 重载Overload</h2><table><thead><tr><th align="left">区别点</th><th align="left">重载方法</th><th align="left">重写方法</th></tr></thead><tbody><tr><td align="left">参数列表</td><td align="left">必须修改</td><td align="left">一定不能修改</td></tr><tr><td align="left">返回类型</td><td align="left">可以修改</td><td align="left">一定不能修改</td></tr><tr><td align="left">异常</td><td align="left">可以修改</td><td align="left">可以减少或删除，一定不能抛出新的或者更广的异常</td></tr><tr><td align="left">访问</td><td align="left">可以修改</td><td align="left">一定不能做更严格的限制（可以降低限制）</td></tr></tbody></table><p>方法的重写(Overriding)和重载(Overloading)是java多态性的不同表现，重写是父类与子类之间多态性的一种表现，重载可以理解成多态的具体表现形式。</p><ul><li>(1)方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。</li><li>(2)方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。</li><li>(3)方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。</li></ul><img src="/.io//image-20220311151149162.png" alt="image-20220311151149162" style="zoom: 33%;"><br><h2 id="Java-修饰符"><a href="#Java-修饰符" class="headerlink" title="Java 修饰符"></a>Java 修饰符</h2><h4 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h4><ul><li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li><li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li><li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li></ul><table><thead><tr><th align="left">修饰符</th><th align="left">当前类</th><th align="left">同一包内</th><th align="left">子孙类(同一包)</th><th align="left">子孙类(不同包)</th><th align="left">其他包</th></tr></thead><tbody><tr><td align="left"><code>public</code></td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td></tr><tr><td align="left"><code>protected</code></td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y/N（<a href="https://www.runoob.com/java/java-modifier-types.html#protected-desc">说明</a>）</td><td align="left">N</td></tr><tr><td align="left"><code>default</code></td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">N</td><td align="left">N</td></tr><tr><td align="left"><code>private</code></td><td align="left">Y</td><td align="left">N</td><td align="left">N</td><td align="left">N</td><td align="left">N</td></tr></tbody></table><p>使用默认访问修饰符声明的变量和方法（不使用任何关键字），对同一个包内的类是可见的</p><h4 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h4><p><strong>static 修饰符</strong></p><ul><li><p><strong>静态变量：</strong></p><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</p></li><li><p><strong>静态方法：</strong></p><p>static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p></li></ul><p><strong>final 变量：</strong></p><p>final 表示”最后的、最终的”含义，变量一旦赋值后，不能被重新赋值，可用来表示常量。</p><br><h2 id="面向对象部分"><a href="#面向对象部分" class="headerlink" title="面向对象部分"></a>面向对象部分</h2><h4 id="super-amp-this"><a href="#super-amp-this" class="headerlink" title="super &amp; this"></a>super &amp; this</h4><ul><li>super()调用父类的构造方法，必须在构造方法的第一个</li><li>super必须只能出现在子类的方法或构造方法中</li><li>**super()和this()**不能同时调用构造方法，因为this也必须写在第一行</li><li>super与this的区别：super代表父类对象的引用，只能在继承条件下使用；this调用自身对象，没有继承也可以使用。</li></ul><h4 id="instanceof的用法"><a href="#instanceof的用法" class="headerlink" title="instanceof的用法"></a>instanceof的用法</h4><p><code>result = object instanceof class </code></p><p>如果object 是 class 的一个实例，则 instanceof 运算符返回 true。如果 object 不是指定类的一个实例，或者 object 是 null，则返回 false。</p><br><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><p>Arrays 和 ArrayList 的区别：</p><ul><li><p>Array：最高效，但是其容量固定且无法动态改变；</p></li><li><p>ArrayList： 容量可动态增长，但牺牲效率；</p></li></ul><p>Array类中的方法都是static修饰的静态方法，使用时直接使用类名进行调用，可以不用对象调用。</p><p><strong>常用功能：</strong></p><ul><li>给数组赋值：fill方法。</li><li>排序：sort方法，升序。</li><li>比较数组：equals方法比较数组中元素值是否相等。</li><li>查找数组元素：binarySearch对排序好的数组进行二分查找法操作。</li><li>数组名.length 取数组的长度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9000</span>,<span class="hljs-number">32145</span>,<span class="hljs-number">451</span>,<span class="hljs-number">21</span>&#125;;<br><br><span class="hljs-comment">//Arrays.toString 打印数组元素</span><br>System.out.println(Arrays.toString(a)); <span class="hljs-comment">//[1, 2, 3, 4, 9000, 32145, 451, 21]</span><br><br><span class="hljs-comment">//二分法查找某值 返回下标</span><br>System.out.println(Arrays.binarySearch(a, <span class="hljs-number">9000</span>)); <span class="hljs-comment">// 4</span><br><br><span class="hljs-comment">//填充</span><br>Arrays.fill(a,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">0</span>); <span class="hljs-comment">//数组[a[2]~a[4])之间填充0（左闭右开）</span><br>System.out.println(Arrays.toString(a)); <span class="hljs-comment">//[1, 2, 0, 0, 9000, 32145, 451, 21]</span><br><br><span class="hljs-comment">//升序排序</span><br>Arrays.sort(a);<br><br></code></pre></td></tr></table></figure><p><strong>数组切片</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br>Arrays.copyOfRange(original,<span class="hljs-keyword">int</span> from,<span class="hljs-keyword">int</span> to)<br></code></pre></td></tr></table></figure><p>original 原始数组<br>from 起始位置下标<br>to 终止位置下标 <strong>（不含to，即左闭右开）</strong></p><br><h2 id="Java容器"><a href="#Java容器" class="headerlink" title="Java容器"></a>Java容器</h2><p>容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对（两个对象）的映射表。</p><img src="/.io//image-20220308194828646.png" alt="image-20220308194828646" style="zoom:67%;"><img src="/.io//image-20220308194845597.png" alt="image-20220308194845597" style="zoom:67%;"><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。</p><p>注：需要用<strong>引用类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br>ArrayList&lt;Integer&gt; myNumbers = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br><br>myNumbers.add(<span class="hljs-number">127</span>);<br>myNumbers.add(<span class="hljs-number">100</span>);<br>myNumbers.add(<span class="hljs-number">520</span>);<br><br>Collections.sort(myNumbers);  <span class="hljs-comment">// 数字排序</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : myNumbers) &#123;<br>System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>toArray() 方法</strong>：</p><p>toArray() 方法将 Arraylist 对象转换为数组。</p><p>语法：arraylist.toArray(T[] arr)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><br>        <span class="hljs-comment">// 创建一个动态数组</span><br>        ArrayList&lt;String&gt; sites = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>       <br>        sites.add(<span class="hljs-string">&quot;Google&quot;</span>);<br>        sites.add(<span class="hljs-string">&quot;Taobao&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;网站列表: &quot;</span> + sites);<br><br>        <span class="hljs-comment">// 创建一个新的 String 类型的数组</span><br>        <span class="hljs-comment">// 数组长度和 ArrayList 长度一样</span><br>        String[] arr = <span class="hljs-keyword">new</span> String[sites.size()];<br><br>        <span class="hljs-comment">// 将ArrayList对象转换成数组</span><br>        sites.toArray(arr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>常用方法：</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-add.html">add()</a></td><td align="left">将元素插入到指定位置的 arraylist 中</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-clear.html">clear()</a></td><td align="left">删除 arraylist 中的所有元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-contains.html">contains()</a></td><td align="left">判断元素是否在 arraylist</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-get.html">get()</a></td><td align="left">通过索引值获取 arraylist 中的元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-remove.html">remove()</a></td><td align="left">删除 arraylist 里的单个元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-size.html">size()</a></td><td align="left">返回 arraylist 里元素数量</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-isempty.html">isEmpty()</a></td><td align="left">判断 arraylist 是否为空</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-sort.html">sort()</a></td><td align="left">对 arraylist 元素进行排序</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-toarray.html">toArray()</a></td><td align="left">将 arraylist 转换为数组</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-arraylist-tostring.html">toString()</a></td><td align="left">将 arraylist 转换为字符串</td></tr></tbody></table><br><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。</p><p>HashMap 是无序的，即不会记录插入的顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;Integer, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Integer, String&gt;();<br><br>map.put(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Google&quot;</span>);<br>map.put(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Tencent&quot;</span>);<br><br><span class="hljs-comment">// 输出 key 和 value</span><br><span class="hljs-keyword">for</span> (Integer i : map.keySet()) &#123;<br>System.out.println(<span class="hljs-string">&quot;key: &quot;</span> + i + <span class="hljs-string">&quot; value: &quot;</span> + map.get(i));<br>&#125;<br><br><span class="hljs-comment">// 输出所有的value</span><br><span class="hljs-keyword">for</span>(String value: map.values()) &#123;<br>System.out.println(value);<br>&#125;<br></code></pre></td></tr></table></figure><p>常用方法：</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/java/java-hashmap-clear.html">clear()</a></td><td align="left">删除 hashMap 中的所有键/值对</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-hashmap-isempty.html">isEmpty()</a></td><td align="left">判断 hashMap 是否为空</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-hashmap-size.html">size()</a></td><td align="left">计算 hashMap 中键/值对的数量</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-hashmap-put.html">put()</a></td><td align="left">将键/值对添加到 hashMap 中</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-hashmap-remove.html">remove()</a></td><td align="left">删除 hashMap 中指定键 key 的映射关系</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-hashmap-replace.html">replace()</a></td><td align="left">替换 hashMap 中是指定的 key 对应的 value。</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-hashmap-get.html">get()</a></td><td align="left">获取指定 key 对应对 value</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-hashmap-keyset.html">keySet</a>()</td><td align="left">返回 hashMap 中所有 key 组成的集合视图。</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-hashmap-values.html">values()</a></td><td align="left">返回 hashMap 中存在的所有 value 值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-hashmap-containskey.html">containsKey()</a></td><td align="left">检查 hashMap 中是否存在指定的 key 对应的映射关系。</td></tr><tr><td align="left"><a href="https://www.runoob.com/java/java-hashmap-containsvalue.html">containsValue()</a></td><td align="left">检查 hashMap 中是否存在指定的 value 对应的映射关系。</td></tr></tbody></table><br><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口就是规范，定义一组规则，它的本质是契约，制定好之后大家都要遵守。</p><p>约束和实现分离 -&gt; 面向接口编程</p><h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4><ul><li>约束</li><li>定义一些方法，让不同的人实现</li></ul><h4 id="接口特性："><a href="#接口特性：" class="headerlink" title="接口特性："></a><strong>接口特性</strong>：</h4><ul><li><p>接口中每一个方法是隐式抽象的,接口中的方法会被隐式的指定为 <strong>public abstract</strong>（只能是 public abstract，其他修饰符都会报错）。</p></li><li><p>接口中可以含有变量，但是接口中的变量会被隐式的指定为 <strong>public static final</strong> 变量（并且只能是 public，用 private 修饰会报编译错误）。</p></li><li><p>接口中每一个方法也是隐式抽象的，声明时同样不需要<strong>abstract</strong>关键字。</p></li><li><p>接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。</p></li><li><p>接口中的方法都是公有的。</p></li></ul><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a><strong>声明</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java">[可见度] <span class="hljs-class"><span class="hljs-keyword">interface</span> 接口名称 [<span class="hljs-keyword">extends</span> 其他的接口名] </span>&#123;       <br>    <span class="hljs-comment">// 声明变量  </span><br>    <br>    <span class="hljs-comment">// 抽象方法 </span><br>&#125;<br><br><br><br><br><span class="hljs-keyword">public</span>  <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-comment">// 定义的属性默认是静态常量：public static final</span><br>    <span class="hljs-keyword">int</span> age = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-comment">// 定义的方法是公共抽象：public abstract</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(String str)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(String str)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(String str)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(String str)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a><strong>实现</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抽象类用继承：extends</span><br><span class="hljs-comment"> * 接口用实现：implements</span><br><span class="hljs-comment"> * 类可以实现接口,需要现实所有方法！</span><br><span class="hljs-comment"> * 利用接口实现伪多继承~</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span>,<span class="hljs-title">TimeService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(String str)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(String str)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(String str)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(String str)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">timer</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>接口与类的区别：</strong></p><ul><li>接口不能用户实例化对象。</li><li>接口没有构造方法。</li><li>接口中所有的方法必须是抽象方法。</li><li>接口不能包含成员变量，除了static和final变量。</li><li>接口不是被类集成，而是被类实现。</li><li>接口支持多继承。</li></ul><br><h2 id="垃圾回收GC"><a href="#垃圾回收GC" class="headerlink" title="垃圾回收GC"></a>垃圾回收GC</h2><p>为什么需要有垃圾回收机制？</p><ul><li>在Java中，当一个对象成为垃圾后仍会占用内存空间，时间一长，就会导致内存空间的不足。</li><li>针对内存空间不足的情况，Java中引入了垃圾回收机制（Java GC Garbage Collection）。</li><li>有了垃圾回收机制，程序员不需要过多关心垃圾对象回收的问题，Java虚拟机会自动回收垃圾对象所占用的内存空间。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/9-MVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
    <url>/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/9-MVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="MVC三层架构"><a href="#MVC三层架构" class="headerlink" title="MVC三层架构"></a>MVC三层架构</h2><ul><li>什么是MVC： Model view Controller 模型、视图、控制器</li></ul><h3 id="1、以前的架构"><a href="#1、以前的架构" class="headerlink" title="1、以前的架构"></a>1、以前的架构</h3><p><img src="/.io//image-20220319224720058.png" alt="image-20220319224720058"></p><p>用户直接访问控制层，控制层就可以直接操作数据库；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">servlet--CRUD--&gt;数据库<br>    <br>弊端：程序十分臃肿，不利于维护  <br>servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码<br><br>架构：没有什么是加一层解决不了的！<br>程序猿调用<br>↑<br>JDBC （实现该接口）<br>↑<br>Mysql Oracle SqlServer ....（不同厂商）<br></code></pre></td></tr></table></figure><h3 id="2、MVC三层架构"><a href="#2、MVC三层架构" class="headerlink" title="2、MVC三层架构"></a>2、MVC三层架构</h3><p><img src="/.io//image-20220319224732879.png" alt="image-20220319224732879"></p><p>Model</p><ul><li>业务处理 ：业务逻辑（Service）</li><li>数据持久层：CRUD （Dao - 数据持久化对象）</li></ul><p>View</p><ul><li>展示数据</li><li>提供链接发起Servlet请求 （a，form，img…）</li></ul><p>Controller （Servlet）</p><ul><li>接收用户的请求 ：（req：请求参数、Session信息….）</li><li>交给业务层处理对应的代码</li><li>控制视图的跳转</li></ul><p>流程：</p><p>登录—&gt;接收用户的登录请求—&gt;处理用户的请求（获取用户登录的参数，username，password）—-&gt;交给业务层处理登录业务（判断用户名密码是否正确：事务）—&gt;Dao层查询用户名和密码是否正确–&gt;数据库</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/8-JavaBean/"/>
    <url>/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/8-JavaBean/</url>
    
    <content type="html"><![CDATA[<h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><p>实体类</p><p>JavaBean有特定的写法：</p><ul><li>必须要有一个无参构造</li><li>属性必须私有化</li><li>必须有对应的get/set方法；</li></ul><p>一般用来和数据库的字段做映射 ORM；</p><p><strong>ORM ：对象关系映射</strong></p><ul><li>表—&gt;类</li><li>字段–&gt;属性</li><li>行记录—-&gt;对象</li></ul><p>people表</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>秦疆1号</td><td>3</td><td>西安</td></tr><tr><td>2</td><td>秦疆2号</td><td>18</td><td>西安</td></tr><tr><td>3</td><td>秦疆3号</td><td>100</td><td>西安</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String address;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">new</span> People(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;秦疆1号&quot;</span>,<span class="hljs-number">3</span>，<span class="hljs-string">&quot;西安&quot;</span>);<br>    <span class="hljs-keyword">new</span> People(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;秦疆2号&quot;</span>,<span class="hljs-number">3</span>，<span class="hljs-string">&quot;西安&quot;</span>);<br>    <span class="hljs-keyword">new</span> People(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;秦疆3号&quot;</span>,<span class="hljs-number">3</span>，<span class="hljs-string">&quot;西安&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>过滤器  ——  过滤器实现登录拦截功能，放一个常量标记是否已登录。</li><li>文件上传</li><li>邮件发送</li><li>JDBC 复习 ： 如何使用JDBC , JDBC crud， jdbc 事务</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/7-JSP/"/>
    <url>/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/7-JSP/</url>
    
    <content type="html"><![CDATA[<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="1、什么是JSP"><a href="#1、什么是JSP" class="headerlink" title="1、什么是JSP"></a>1、什么是JSP</h3><p>Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！</p><p>最大的特点：</p><ul><li>写JSP就像在写HTML</li><li>区别：<ul><li>HTML只给用户提供静态的数据</li><li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据；</li></ul></li></ul><h3 id="2、JSP原理"><a href="#2、JSP原理" class="headerlink" title="2、JSP原理"></a>2、JSP原理</h3><p>思路：JSP到底怎么执行的！</p><ul><li><p>代码层面没有任何问题</p></li><li><p>服务器内部工作</p><ul><li>tomcat中有一个work目录</li></ul></li><li><p>在IDEA中使用Tomcat会在IDEA的Tomcat中生成一个work目录</p><ul><li>**浏览器向浏览器发送请求，不管访问什么资源，其实都是在访问<u>Servlet</u>**。</li></ul></li><li><p>JSP最终也会被转化为一个Java类</p><ul><li><strong>JSP 本质上就是一个Servlet</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//初始化</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspInit</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br><span class="hljs-comment">//销毁</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspDestroy</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br><span class="hljs-comment">//JSPService</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">_jspService</span><span class="hljs-params">(.HttpServletRequest request,HttpServletResponse response)</span></span><br></code></pre></td></tr></table></figure><p>判断请求</p><p>内置一些对象（可以直接使用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> javax.servlet.jsp.PageContext pageContext;  <span class="hljs-comment">//页面上下文</span><br>javax.servlet.http.HttpSession session = <span class="hljs-keyword">null</span>;    <span class="hljs-comment">//session</span><br><span class="hljs-keyword">final</span> javax.servlet.ServletContext application;   <span class="hljs-comment">//applicationContext</span><br><span class="hljs-keyword">final</span> javax.servlet.ServletConfig config;         <span class="hljs-comment">//config</span><br>javax.servlet.jsp.JspWriter out = <span class="hljs-keyword">null</span>;           <span class="hljs-comment">//out</span><br><span class="hljs-keyword">final</span> java.lang.Object page = <span class="hljs-keyword">this</span>;               <span class="hljs-comment">//page：当前</span><br>HttpServletRequest request                        <span class="hljs-comment">//请求</span><br>HttpServletResponse response                      <span class="hljs-comment">//响应</span><br></code></pre></td></tr></table></figure><p>输出页面前增加的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);       <span class="hljs-comment">//设置响应的页面类型</span><br>pageContext = _jspxFactory.getPageContext(<span class="hljs-keyword">this</span>, request, response,<br>       <span class="hljs-keyword">null</span>, <span class="hljs-keyword">true</span>, <span class="hljs-number">8192</span>, <span class="hljs-keyword">true</span>);<br>_jspx_page_context = pageContext;<br>application = pageContext.getServletContext();<br>config = pageContext.getServletConfig();<br>session = pageContext.getSession();<br>out = pageContext.getOut();<br>_jspx_out = out;<br></code></pre></td></tr></table></figure><p>以上的这些个对象我们可以在JSP页面中直接使用！</p><p><img src="/.io//1711857-20210816225159513-816497645.png" alt="image"></p><p><strong>在JSP页面中：</strong></p><p><strong>只要是 JAVA代码就会原封不动的输出；</strong></p><p><strong>如果是HTML代码，就会被转换为：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">out</span>.<span class="hljs-keyword">write</span>(&quot;&lt;html&gt;\r\n&quot;);<br></code></pre></td></tr></table></figure><p>这样的格式，输出到前端！</p><h3 id="3、JSP基础语法"><a href="#3、JSP基础语法" class="headerlink" title="3、JSP基础语法"></a>3、JSP基础语法</h3><p>JSP不仅支持Java的所有语法，还有自己的一些扩充语法。</p><h4 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a>JSP表达式</h4><p>注：&lt;%–注释内容–%&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%--JSP表达式<br>作用：用来将程序的输出，输出到客户端<br>&lt;%= 变量或者表达式%&gt;<br>--%&gt;<br>&lt;%= <span class="hljs-keyword">new</span> java.util.Date()%&gt;<br></code></pre></td></tr></table></figure><h4 id="jsp脚本片段"><a href="#jsp脚本片段" class="headerlink" title="jsp脚本片段"></a>jsp脚本片段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%--jsp脚本片段--%&gt;<br>&lt;%<br>  <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;=<span class="hljs-number">100</span> ; i++) &#123;<br>    sum+=i;<br>  &#125;<br>  out.println(<span class="hljs-string">&quot;&lt;h1&gt;Sum=&quot;</span>+sum+<span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);<br>%&gt;<br></code></pre></td></tr></table></figure><p>脚本片段的再实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%<br>  <span class="hljs-keyword">int</span> x = <span class="hljs-number">10</span>;<br>  out.println(x);<br>%&gt;<br>&lt;p&gt;这是一个JSP文档&lt;/p&gt;<br>&lt;%<br>  <span class="hljs-keyword">int</span> y = <span class="hljs-number">2</span>;<br>  out.println(y);<br>%&gt;<br><br>&lt;hr&gt;<br><br><br>&lt;%--在代码嵌入HTML元素--%&gt;<br>&lt;%<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>%&gt;<br>  &lt;h1&gt;Hello,World  &lt;%=i%&gt; &lt;/h1&gt;<br>&lt;%<br>  &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><h4 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%!<br>  <span class="hljs-keyword">static</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Loading Servlet!&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> globalVar = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">kuang</span><span class="hljs-params">()</span></span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;进入了方法Kuang！&quot;</span>);<br>  &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！</p><p>在JSP，嵌入Java代码即可！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%%&gt;<br>&lt;%=%&gt;<br>&lt;%!%&gt;<br><br>&lt;%--注释--%&gt;<br></code></pre></td></tr></table></figure><p><strong>JSP的注释，不会在客户端显示，HTML就会！</strong></p><h3 id="4、JSP指令"><a href="#4、JSP指令" class="headerlink" title="4、JSP指令"></a>4、JSP指令</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%<span class="hljs-meta">@page</span> args.... %&gt;<br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;&quot;</span>%&gt;<br><br>&lt;%--<span class="hljs-meta">@include</span>会将两个页面合二为一--%&gt;<br><br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;common/header.jsp&quot;</span>%&gt;<br>&lt;h1&gt;网页主体&lt;/h1&gt;<br><br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;common/footer.jsp&quot;</span>%&gt;<br><br>&lt;hr&gt;<br><br><br>&lt;%--jSP标签<br>    jsp:include：拼接页面，本质还是三个（推荐使用）<br>    --%&gt;<br>&lt;jsp:include page=<span class="hljs-string">&quot;/common/header.jsp&quot;</span>/&gt;<br>&lt;h1&gt;网页主体&lt;/h1&gt;<br>&lt;jsp:include page=<span class="hljs-string">&quot;/common/footer.jsp&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>对于第一种很可能会出现变量名重复的问题，第二种当变量名重复时在编码阶段就会报错。还有要注意的是方法一是文件的相对路径</p><p>方法二是网页路径，多了一个\来表示默认的根路径。</p><p><img src="/.io//1363376-20210216220926289-1784071746.png" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br>&lt;%--自定义出错路径--%&gt;<br>&lt;%@page errorPage=&quot;error/error.jsp&quot; %&gt;<br>&lt;%--导包--%&gt;<br>&lt;%@page import=&quot;java.util.Date&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>&lt;%<br>    Date date = new Date();<br>    out.print(date);<br>    int i = 1/0;<br>%&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>　　</p><h3 id="5、9大内置对象"><a href="#5、9大内置对象" class="headerlink" title="5、9大内置对象"></a>5、9大内置对象</h3><ul><li>PageContext 存东西</li><li>Request 存东西</li><li>Response</li><li>Session 存东西</li><li>Application 【SerlvetContext】 存东西</li><li>config 【SerlvetConfig】</li><li>out</li><li>page ，不用了解</li><li>exception</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">pageContext.setAttribute(<span class="hljs-string">&quot;name1&quot;</span>,<span class="hljs-string">&quot;秦疆1号&quot;</span>); <span class="hljs-comment">//保存的数据只在一个页面中有效</span><br>request.setAttribute(<span class="hljs-string">&quot;name2&quot;</span>,<span class="hljs-string">&quot;秦疆2号&quot;</span>); <span class="hljs-comment">//保存的数据只在一次请求中有效，请求转发会携带这个数据</span><br>session.setAttribute(<span class="hljs-string">&quot;name3&quot;</span>,<span class="hljs-string">&quot;秦疆3号&quot;</span>); <span class="hljs-comment">//保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span><br>application.setAttribute(<span class="hljs-string">&quot;name4&quot;</span>,<span class="hljs-string">&quot;秦疆4号&quot;</span>);  <span class="hljs-comment">//保存的数据只在服务器中有效，从打开服务器到关闭服务器</span><br></code></pre></td></tr></table></figure><p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！</p><p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；</p><p>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；</p><p>testJsp2.jsp文件</p><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vbscript-html"><span class="vbscript">&lt;%--</span><br><span class="vbscript">  Created by IntelliJ IDEA.</span><br><span class="vbscript">  User: <span class="hljs-number">19575</span></span><br><span class="vbscript">  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">2</span>/<span class="hljs-number">16</span></span><br><span class="vbscript">  Time: <span class="hljs-number">22</span>:<span class="hljs-number">22</span></span><br><span class="vbscript">  <span class="hljs-keyword">To</span> change this template use File | Settings | File Templates.</span><br><span class="vbscript">--%&gt;</span><span class="xml"></span><br><span class="xml"></span><span class="vbscript">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;</span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试内置对象<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"></span><span class="vbscript">&lt;%</span><br><span class="vbscript">    pageContext.setAttribute(<span class="hljs-string">&quot;name1&quot;</span>,<span class="hljs-string">&quot;刘1&quot;</span>);</span><br><span class="vbscript">    <span class="hljs-built_in">request</span>.setAttribute(<span class="hljs-string">&quot;name2&quot;</span>,<span class="hljs-string">&quot;刘2&quot;</span>);</span><br><span class="vbscript">    session.setAttribute(<span class="hljs-string">&quot;name3&quot;</span>,<span class="hljs-string">&quot;刘3&quot;</span>);</span><br><span class="vbscript">    application.setAttribute(<span class="hljs-string">&quot;name4&quot;</span>,<span class="hljs-string">&quot;刘4&quot;</span>);</span><br><span class="vbscript"></span><br><span class="vbscript">    String name1 = (String) pageContext.getAttribute(<span class="hljs-string">&quot;name1&quot;</span>);</span><br><span class="vbscript">    String name2 = (String) <span class="hljs-built_in">request</span>.getAttribute(<span class="hljs-string">&quot;name2&quot;</span>);</span><br><span class="vbscript">    String name3 = (String) session.getAttribute(<span class="hljs-string">&quot;name3&quot;</span>);</span><br><span class="vbscript">    String name4 = (String) application.getAttribute(<span class="hljs-string">&quot;name4&quot;</span>);</span><br><span class="vbscript">    String name5 = (String) application.getAttribute(<span class="hljs-string">&quot;name5&quot;</span>);</span><br><span class="vbscript"></span><br><span class="vbscript">%&gt;</span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>取出的值为:<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>$&#123;name1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>$&#123;name2&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>$&#123;name3&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>$&#123;name4&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"></span><span class="vbscript">&lt;%--会输出<span class="hljs-literal">null</span>--%&gt;</span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>$&#123;name5&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"></span><span class="vbscript">&lt;%--更严格，没有值就直接不输出--%&gt;</span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span></span><span class="vbscript">&lt;%= name5 %&gt;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="/.io//1363376-20210216223311190-2004601916.png" alt="img"></p><p>testJsp3.jsp文件</p><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vbscript-html"><span class="vbscript">&lt;%--</span><br><span class="vbscript">  Created by IntelliJ IDEA.</span><br><span class="vbscript">  User: <span class="hljs-number">19575</span></span><br><span class="vbscript">  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">2</span>/<span class="hljs-number">16</span></span><br><span class="vbscript">  Time: <span class="hljs-number">22</span>:<span class="hljs-number">22</span></span><br><span class="vbscript">  <span class="hljs-keyword">To</span> change this template use File | Settings | File Templates.</span><br><span class="vbscript">--%&gt;</span><span class="xml"></span><br><span class="xml"></span><span class="vbscript">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;</span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试内置对象<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"></span><span class="vbscript">&lt;%</span><br><span class="vbscript">    pageContext.setAttribute(<span class="hljs-string">&quot;name1&quot;</span>,<span class="hljs-string">&quot;刘1&quot;</span>);</span><br><span class="vbscript">    <span class="hljs-built_in">request</span>.setAttribute(<span class="hljs-string">&quot;name2&quot;</span>,<span class="hljs-string">&quot;刘2&quot;</span>);</span><br><span class="vbscript">    session.setAttribute(<span class="hljs-string">&quot;name3&quot;</span>,<span class="hljs-string">&quot;刘3&quot;</span>);</span><br><span class="vbscript">    application.setAttribute(<span class="hljs-string">&quot;name4&quot;</span>,<span class="hljs-string">&quot;刘4&quot;</span>);</span><br><span class="vbscript"></span><br><span class="vbscript">    String name1 = (String) pageContext.getAttribute(<span class="hljs-string">&quot;name1&quot;</span>);</span><br><span class="vbscript">    String name2 = (String) <span class="hljs-built_in">request</span>.getAttribute(<span class="hljs-string">&quot;name2&quot;</span>);</span><br><span class="vbscript">    String name3 = (String) session.getAttribute(<span class="hljs-string">&quot;name3&quot;</span>);</span><br><span class="vbscript">    String name4 = (String) application.getAttribute(<span class="hljs-string">&quot;name4&quot;</span>);</span><br><span class="vbscript">    String name5 = (String) application.getAttribute(<span class="hljs-string">&quot;name5&quot;</span>);</span><br><span class="vbscript"></span><br><span class="vbscript">%&gt;</span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>取出的值为:<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>$&#123;name1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>$&#123;name2&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>$&#123;name3&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>$&#123;name4&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"></span><span class="vbscript">&lt;%--会输出<span class="hljs-literal">null</span>--%&gt;</span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>$&#123;name5&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"></span><span class="vbscript">&lt;%--更严格，没有值就直接不输出--%&gt;</span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span></span><span class="vbscript">&lt;%= name5 %&gt;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="/.io//copycode.gif" alt="复制代码"></a></p><p><img src="/.io//1363376-20210216224529290-293287669.png" alt="img"></p><p>会发现换了个页面后，pageContext就无法取到name1的值，因为name1只在当前页面有效。</p><p><img src="/.io//20200507213158259.png" alt="在这里插入图片描述"></p><p>对于pageContext去找变量的时候先是在当前页寻找，再去request，session，application，找不到就为null，找到就不再向上找，双亲委派机制原理类似，顺序相反，是从高到低，高覆盖度。比如自己声明的String类是无效的，因为rt架包有了，自定义的就是无效。对于pageContext则是先看本页声明了吗，没有看request有没有设置的，再看session的内容，再看application里的内容。</p><h3 id="6、JSP标签、JSTL标签、EL表达式"><a href="#6、JSP标签、JSTL标签、EL表达式" class="headerlink" title="6、JSP标签、JSTL标签、EL表达式"></a>6、JSP标签、JSTL标签、EL表达式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- JSTL表达式的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- standard标签库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>EL表达式： ${ }</p><ul><li>获取数据</li><li>执行运算</li><li>获取web开发的常用对象</li></ul><p>JSP标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%--jsp:include--%&gt;<br><br>&lt;%--<br>http:<span class="hljs-comment">//localhost:8080/jsptag.jsp?name=kuangshen&amp;age=12</span><br>--%&gt;<br><br>&lt;jsp:forward page=<span class="hljs-string">&quot;/jsptag2.jsp&quot;</span>&gt;<br>    &lt;jsp:param name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;kuangshen&quot;</span>&gt;&lt;/jsp:param&gt;<br>    &lt;jsp:param name=<span class="hljs-string">&quot;age&quot;</span> value=<span class="hljs-string">&quot;12&quot;</span>&gt;&lt;/jsp:param&gt;<br>&lt;/jsp:forward&gt;<br>另一个页面是<br>&lt;%=request.getParameter(<span class="hljs-string">&quot;name&quot;</span>)%&gt;<br>&lt;%=request.getParameter(<span class="hljs-string">&quot;age&quot;</span>)%&gt;<br></code></pre></td></tr></table></figure><p>JSTL表达式</p><p>JSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！</p><p>格式化标签</p><p>SQL标签</p><p>XML 标签</p><p>核心标签 （掌握部分）</p><p><img src="/.io//watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><p>JSTL标签库使用步骤</p><ul><li>引入对应的 taglib</li><li>使用其中的方法</li><li>在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误</li></ul><p>c：if</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br><br>&lt;h4&gt;<span class="hljs-keyword">if</span>测试&lt;/h4&gt;<br><br>&lt;hr&gt;<br><br>&lt;form action=<span class="hljs-string">&quot;coreif.jsp&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    &lt;%--<br>    EL表达式获取表单中的数据<br>    $&#123;param.参数名&#125;<br>    --%&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;$&#123;param.username&#125;&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;登录&quot;</span>&gt;<br>&lt;/form&gt;<br><br>&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;param.username==&#x27;admin&#x27;&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;isAdmin&quot;</span>&gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;管理员欢迎您！&quot;</span>/&gt;<br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br><br>&lt;%--自闭合标签--%&gt;<br>&lt;c:out value=<span class="hljs-string">&quot;$&#123;isAdmin&#125;&quot;</span>/&gt;<br><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>c:choose c:when</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;body&gt;<br><br>&lt;%--定义一个变量score，值为<span class="hljs-number">85</span>--%&gt;<br>&lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;score&quot;</span> value=<span class="hljs-string">&quot;55&quot;</span>/&gt;<br><br>&lt;c:choose&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;score&gt;=90&#125;&quot;</span>&gt;<br>        你的成绩为优秀<br>    &lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;score&gt;=80&#125;&quot;</span>&gt;<br>        你的成绩为一般<br>    &lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;score&gt;=70&#125;&quot;</span>&gt;<br>        你的成绩为良好<br>    &lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;score&lt;=60&#125;&quot;</span>&gt;<br>        你的成绩为不及格<br>    &lt;/c:when&gt;<br>&lt;/c:choose&gt;<br><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>c:forEach</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%<br><br>    ArrayList&lt;String&gt; people = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    people.add(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;张三&quot;</span>);<br>    people.add(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;李四&quot;</span>);<br>    people.add(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;王五&quot;</span>);<br>    people.add(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;赵六&quot;</span>);<br>    people.add(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;田六&quot;</span>);<br>    request.setAttribute(<span class="hljs-string">&quot;list&quot;</span>,people);<br>%&gt;<br><br><br>&lt;%--<br><span class="hljs-keyword">var</span> , 每一次遍历出来的变量<br>items, 要遍历的对象<br>begin,   哪里开始<br>end,     到哪里<br>step,   步长<br>--%&gt;<br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;people&quot;</span> items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span>&gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;<br>&lt;/c:forEach&gt;<br><br>&lt;hr&gt;<br><br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;people&quot;</span> items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span> begin=<span class="hljs-string">&quot;1&quot;</span> end=<span class="hljs-string">&quot;3&quot;</span> step=<span class="hljs-string">&quot;1&quot;</span> &gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/6-Cookie%20&amp;%20Session/"/>
    <url>/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/6-Cookie%20&amp;%20Session/</url>
    
    <content type="html"><![CDATA[<h1 id="Cookie、Session"><a href="#Cookie、Session" class="headerlink" title="Cookie、Session"></a>Cookie、Session</h1><h4 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h4><p>会话：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；</p><p>有状态会话：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；</p><p>一个网站，怎么证明你来过？</p><p>客户端 服务端</p><ol><li>服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie</li><li>服务器登记你来过了，下次你来的时候我来匹配你； seesion</li></ol><h4 id="保存会话的两种技术"><a href="#保存会话的两种技术" class="headerlink" title="保存会话的两种技术"></a>保存会话的两种技术</h4><p>cookie</p><ul><li>客户端技术 （响应，请求）</li></ul><p>session</p><ul><li>服务器技术，利用这个技术，可以保存用户的会话信息。 我们可以把信息或者数据放在Session中！</li></ul><p>常见常见：网站登录之后，你下次不用再登录了，第二次访问直接就上去了！</p><h3 id="1、Cookie"><a href="#1、Cookie" class="headerlink" title="1、Cookie"></a>1、Cookie</h3><p>![image-20220318104130414](6-Cookie &amp; Session.assets/image-20220318104130414.png)</p><ol><li>从请求中拿到cookie信息</li><li>服务器响应给客户端cookie</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie[] cookies = req.getCookies(); <span class="hljs-comment">//获得Cookie</span><br>cookie.getName(); <span class="hljs-comment">//获得cookie中的key</span><br>cookie.getValue(); <span class="hljs-comment">//获得cookie中的vlaue</span><br><span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis()+<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">//新建一个cookie</span><br>cookie.setMaxAge(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>); <span class="hljs-comment">//设置cookie的有效期</span><br>resp.addCookie(cookie); <span class="hljs-comment">//响应给客户端一个cookie</span><br></code></pre></td></tr></table></figure><p>cookie：一般会保存在本地的 用户目录下 appdata；</p><p>保存上次登录时间的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.maple.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.Cookie;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 保存用户上一次访问的时间</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> maple_w</span><br><span class="hljs-comment"> * Created on 21/07/28 028 19:59</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CookieServlet01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br><br>        PrintWriter out = resp.getWriter();<br><br>        <span class="hljs-comment">// Cookie, 服务器端从客户端获取</span><br>        Cookie[] cookies = req.getCookies();<br><br>        <span class="hljs-comment">// 判断Cookie是否存在</span><br>        <span class="hljs-keyword">if</span> (cookies != <span class="hljs-keyword">null</span>) &#123;<br>            out.write(<span class="hljs-string">&quot;上次访问的时间：&quot;</span>);<br>            <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>                String name = cookie.getName();<br>                String value = cookie.getValue();<br>                <span class="hljs-keyword">if</span> (name.equals(<span class="hljs-string">&quot;lastLoginTime&quot;</span>)) &#123;<br>                    <span class="hljs-keyword">long</span> l = Long.parseLong(value);<br>                    Date date = <span class="hljs-keyword">new</span> Date(l);<br>                    out.write(date.toLocaleString());<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            out.write(<span class="hljs-string">&quot;首次访问&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 服务器给客户端响应一个cookie</span><br>        Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis() + <span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-comment">// 设置cookie有效期为1天</span><br>        cookie.setMaxAge(<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>);<br><br>        resp.addCookie(cookie);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个网站cookie是否存在上限？聊聊细节问题</p><ul><li>一个Cookie只能保存一个信息；</li><li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；</li><li>Cookie大小有限制4kb；</li><li>300个cookie浏览器上限</li></ul><p>删除Cookie；</p><ul><li>不设置有效期，关闭浏览器，自动失效；</li><li>设置有效期时间为 0 ；</li></ul><p>编码解码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">URLEncoder.encode(<span class="hljs-string">&quot;秦疆&quot;</span>,<span class="hljs-string">&quot;utf-8&quot;</span>)<br>URLDecoder.decode(cookie.getValue(),<span class="hljs-string">&quot;UTF-8&quot;</span>)<br></code></pre></td></tr></table></figure><p> 如果要读取中文Cookie，后台显示中文正常也不行，如果要浏览器显示正常，还需要添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 添加这个才能有效让页面显示中文不乱码</span><br>resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br></code></pre></td></tr></table></figure><p>小栗子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bupt.cookie;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.Cookie;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.net.URLDecoder;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CookieDemo01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        PrintWriter out = resp.getWriter();<br>        Cookie[] cookies = req.getCookies();<br>        <span class="hljs-keyword">if</span> (cookies != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cookies.length; i++) &#123;<br>                Cookie cookie = cookies[i];<br>                <span class="hljs-keyword">if</span>(cookie.getName().equals(<span class="hljs-string">&quot;lastLoginTime&quot;</span>))&#123;<br>                    <span class="hljs-keyword">long</span> lastLoginTime = Long.parseLong(cookie.getValue());<br>                    Date date = <span class="hljs-keyword">new</span> Date(lastLoginTime);<br>                    out.println(date.toLocaleString());<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    out.println(URLDecoder.decode(cookies[i].getValue(),<span class="hljs-string">&quot;utf-8&quot;</span>));<br>                &#125;<br>                out.println(<span class="hljs-string">&quot;=====================&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            out.write(<span class="hljs-string">&quot;这是你第一次访问&quot;</span>);<br>        &#125;<br>        Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;liulei&quot;</span>);<br>        Cookie cookie2 = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;name&quot;</span>, URLEncoder.encode(<span class="hljs-string">&quot;liulei&quot;</span>,<span class="hljs-string">&quot;utf-8&quot;</span>));<span class="hljs-comment">//遇到乱码后，处理乱码最快的方式，</span><br><br>        Cookie cookie1 = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis()+<span class="hljs-string">&quot;&quot;</span>);<br>        cookie.setMaxAge(<span class="hljs-number">0</span>);<span class="hljs-comment">//关闭浏览器会立刻过期，更具有安全性，</span><br>        cookie1.setMaxAge(<span class="hljs-number">50</span>);<span class="hljs-comment">//设置有效期，这个有效期指的是关闭浏览器cookie仍然可以存活的时间</span><br>        resp.addCookie(cookie);<br>        resp.addCookie(cookie1);<br>        resp.addCookie(cookie2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置mapping</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.bupt.cookie.CookieDemo01<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/test<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、Session（重点）"><a href="#2、Session（重点）" class="headerlink" title="2、Session（重点）"></a>2、Session（重点）</h3><p>什么是Session：</p><ul><li>服务器会给每一个用户（浏览器）创建一个Seesion对象；</li><li>一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；</li><li>用户登录之后，整个网站它都可以访问！–&gt; 保存用户的信息；保存购物车的信息……</li></ul><p>Session和cookie的区别：</p><ul><li>Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）</li><li>Session把用户的数据写到用户独占Session中，服务器端保存 （保存重要的信息，减少服务器资源的浪费）</li><li>Session对象由服务创建；</li></ul><p>使用场景：</p><ul><li>保存一个登录用户的信息；</li><li>购物车信息；</li><li>在整个网站中经常会使用的数据，我们将它保存在Session中；</li></ul><p>使用Session：</p><p>往Session中写信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.servlet;<br><br><span class="hljs-keyword">import</span> com.kuang.pojo.Person;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SessionDemo01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <br>        <span class="hljs-comment">//解决乱码问题</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <br>        <span class="hljs-comment">//得到Session</span><br>        HttpSession session = req.getSession();<br>        <span class="hljs-comment">//给Session中存东西</span><br>        session.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;秦疆&quot;</span>,<span class="hljs-number">1</span>));<br>        <span class="hljs-comment">//获取Session的ID</span><br>        String sessionId = session.getId();<br><br>        <span class="hljs-comment">//判断Session是不是新创建</span><br>        <span class="hljs-keyword">if</span> (session.isNew())&#123;<br>            resp.getWriter().write(<span class="hljs-string">&quot;session创建成功,ID:&quot;</span>+sessionId);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            resp.getWriter().write(<span class="hljs-string">&quot;session以及在服务器中存在了,ID:&quot;</span>+sessionId);<br>        &#125;<br><br>        <span class="hljs-comment">//Session创建的时候做了什么事情；</span><br><span class="hljs-comment">//        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;,sessionId);</span><br><span class="hljs-comment">//        resp.addCookie(cookie);</span><br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从Session中读取信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    <span class="hljs-comment">// 解决乱码问题</span><br>    req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br><br>    <span class="hljs-comment">// 得到Session</span><br>    HttpSession session = req.getSession();<br><br>    <span class="hljs-comment">// String name = (String) session.getAttribute(&quot;name&quot;);</span><br>    Person person = (Person) session.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>    System.out.println(person);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>清除Session：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span>  <br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;  <br> HttpSession session = req.getSession();  <br> session.removeAttribute(<span class="hljs-string">&quot;name&quot;</span>);  <br> <span class="hljs-comment">// 手动注销session，但因为浏览器在访问，会立即生成一个新的session  </span><br> session.invalidate();  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//得到Session</span><br>HttpSession session = req.getSession();<br><br>Person person = (Person) session.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br><br>System.out.println(person.toString());<br><br>HttpSession session = req.getSession();<br>session.removeAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">//手动注销Session</span><br>session.invalidate();<br></code></pre></td></tr></table></figure><p>会话自动过期（使得session自动失效）：web.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置Session默认的失效时间--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--15分钟后Session自动失效，以分钟为单位--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![image](6-Cookie &amp; Session.assets/1711857-20210728214629458-1942385174.png)</p><p>ServletContext （ApplicationContext）是在Session之上更高级的一个概念，可以存储多个不同用户的共享信息，如用户统计等。</p><p><a href="https://www.cnblogs.com/l199616j/p/11195667.html">session和cookie介绍，区别和联系</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/5-Servlet/"/>
    <url>/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/5-Servlet/</url>
    
    <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h3 id="1、Servlet简介"><a href="#1、Servlet简介" class="headerlink" title="1、Servlet简介"></a>1、Servlet简介</h3><ul><li>Servlet就是sun公司开发动态web的一门技术</li><li>Sun在这些APi中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：<ul><li>编写一个类，实现Serlet接口</li><li>把开发好java类部署到web服务器中。</li></ul></li></ul><p><strong>把实现了Servlet接口的 Java 程序叫做，Servlet。</strong></p><h3 id="2、HelloServlet"><a href="#2、HelloServlet" class="headerlink" title="2、HelloServlet"></a>2、HelloServlet</h3><p>Serlvet接口Sun公司有两个默认的实现类：<strong>HttpServlet，GenericServled</strong></p><p>构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里面建立Moudel；这个空的工程就题Maven主工程；</p><p>步骤如下：</p><img src="/.io//image-20220315232237510.png" alt="image-20220315232237510" style="zoom:50%;"><p><img src="/.io//image-20220315232311162.png" alt="image-20220315232311162"></p><p><strong>Maven 中添加 servlet、jsp 依赖</strong></p><p>注：tomcat10之后 servlet 依赖包名不是 javax.servlet，而是 jakarta.servlet</p><p><a href="https://blog.csdn.net/qq_40905896/article/details/115257610">https://blog.csdn.net/qq_40905896/article/details/115257610</a></p><p><a href="https://www.cnblogs.com/fanwd/p/15022270.html">https://www.cnblogs.com/fanwd/p/15022270.html</a></p><p><img src="/.io//image-20220316000147832.png" alt="image-20220316000147832"></p><p>新建Servlet项目：</p><p><img src="/.io//image-20220316001217339.png" alt="image-20220316001217339"></p><p>（一个父项目可以有多个Module）</p><p>关于Maven父子工程的理解：<br>父项目中会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>servlet-01<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子项目会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javaweb-02-servlet<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.kuang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父项目中的java子项目可以直接使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">son extends father<br></code></pre></td></tr></table></figure><p><strong>Maven环境优化</strong></p><p>修改web.xml为最新的</p><p>将maven的结构搭建完整</p><p><strong>编写一个Servlet程序</strong></p><p>编写一个普通类</p><p>实现Servlet接口，这里我们直接继承HttpServlet</p><p>（IDEA会提示怎么进行import）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-comment">//由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；</span><br>     <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>         <span class="hljs-comment">//ServletOutputStream outputStream = resp.getOutputStream();</span><br>        PrintWriter writer = resp.getWriter(); <span class="hljs-comment">//响应流</span><br>         writer.print(<span class="hljs-string">&quot;Hello,Serlvet&quot;</span>);<br>     &#125;<br><br>    <span class="hljs-meta">@Override</span><br>     <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>     &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>编写Servlet的映射</strong></p><p>（配置访问路径）</p><p>为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册Servlet--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br> <span class="hljs-comment">&lt;!--Servlet的请求路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="/.io//image-20220316231612281.png" alt="image-20220316231612281"></p><p><strong>配置Tomcat</strong><br>注意：配置项目发布的路径就可以了<br><img src="/.io//20200426163446264.png" alt="在这里插入图片描述"></p><p>启动测试，OK！</p><h3 id="3、Servlet原理"><a href="#3、Servlet原理" class="headerlink" title="3、Servlet原理"></a>3、Servlet原理</h3><p>Servlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：</p><p>注：Tomcat 就是一种 Web 容器（ Web 服务器）</p><p><img src="https://img-blog.csdnimg.cn/20200506180639329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4、Mapping问题"><a href="#4、Mapping问题" class="headerlink" title="4、Mapping问题"></a>4、Mapping问题</h3><ul><li>一个Servlet可以指定一个映射路径<br>.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>一个servlet可以指定多个映射路径</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello2<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello3<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello4<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello5<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>一个servlet可以指定通用映射路径</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>默认请求路径</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--默认请求路径--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>指定一些后缀或者前缀等等…</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--可以自定义后缀实现请求映射</span><br><span class="hljs-comment">     注意：*前面不能加项目映射的路径</span><br><span class="hljs-comment">    hello/sajdlkajda.qinjiang</span><br><span class="hljs-comment">     --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.qinjiang<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>优先级问题<br><u>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</u></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--404--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.kuang.servlet.ErrorServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="5、ServletContext"><a href="#5、ServletContext" class="headerlink" title="5、ServletContext"></a>5、ServletContext</h3><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；</p><h4 id="5-1、共享数据"><a href="#5-1、共享数据" class="headerlink" title="5.1、共享数据"></a>5.1、共享数据</h4><p>我在这个Servlet中保存的数据，可以在另外一个servlet中拿到；</p><img src="/.io//image-20220317010844971.png" alt="image-20220317010844971" style="zoom:67%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        <span class="hljs-comment">//this.getInitParameter()   初始化参数</span><br>       <span class="hljs-comment">//this.getServletConfig()   Servlet配置</span><br>        <span class="hljs-comment">//this.getServletContext()  Servlet上下文</span><br>        ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br><br>        String username = <span class="hljs-string">&quot;秦疆&quot;</span>; <span class="hljs-comment">//数据</span><br>        context.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,username); <span class="hljs-comment">//将一个数据保存在了ServletContext中，名字为：username ；值：username</span><br><br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br>        String username = (String) context.getAttribute(<span class="hljs-string">&quot;username&quot;</span>);<br><br>        resp.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>       resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.getWriter().print(<span class="hljs-string">&quot;名字&quot;</span>+username);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>getc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.kuang.servlet.GetServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>getc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/getc<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="5-2、获取初始化参数"><a href="#5-2、获取初始化参数" class="headerlink" title="5.2、获取初始化参数"></a>5.2、获取初始化参数</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--配置一些web应用初始化参数--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>url<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br>    String url = context.getInitParameter(<span class="hljs-string">&quot;url&quot;</span>);<br>    resp.getWriter().print(url);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-3、请求转发"><a href="#5-3、请求转发" class="headerlink" title="5.3、请求转发"></a>5.3、请求转发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();<br>    System.out.println(<span class="hljs-string">&quot;进入了ServletDemo04&quot;</span>);<br>    <span class="hljs-comment">//RequestDispatcher requestDispatcher = context.getRequestDispatcher(&quot;/gp&quot;); //转发的请求路径</span><br>    <span class="hljs-comment">//requestDispatcher.forward(req,resp); //调用forward实现请求转发；</span><br>    context.getRequestDispatcher(<span class="hljs-string">&quot;/gp&quot;</span>).forward(req,resp);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="转发-VS-重定向："><a href="#转发-VS-重定向：" class="headerlink" title="转发 VS 重定向："></a>转发 VS 重定向：</h5><p>转发的 url 不变；重定向的 url 会改变</p><p>（A：发送请求者）</p><p><img src="/.io//watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70-164714981892918" alt="在这里插入图片描述"></p><h4 id="5-4、读取资源文件"><a href="#5-4、读取资源文件" class="headerlink" title="5.4、读取资源文件"></a>5.4、读取资源文件</h4><p>Properties</p><ul><li>在java目录下新建properties</li><li>在resources目录下新建properties</li></ul><p>发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:<br>思路：需要一个文件流</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">username</span>=root12312<br><span class="hljs-attr">password</span>=zxczxczxc<br></code></pre></td></tr></table></figure><p><img src="/.io//20200505153908944.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo05</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>   <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        InputStream is = <span class="hljs-keyword">this</span>.getServletContext().getResourceAsStream(<span class="hljs-string">&quot;/WEB-INF/classes/com/kuang/servlet/aa.properties&quot;</span>);<span class="hljs-comment">//这个目录是生成的target目录下的文件</span><br><br>        Properties prop = <span class="hljs-keyword">new</span> Properties();<br>        prop.load(is);<br>        String user = prop.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>        String pwd = prop.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        resp.getWriter().print(user+<span class="hljs-string">&quot;:&quot;</span>+pwd);<br><br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>       doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、HttpServletResponse"><a href="#6、HttpServletResponse" class="headerlink" title="6、HttpServletResponse"></a>6、HttpServletResponse</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest<br>对象以及代表响应的一个HttpServletResponse。<br></code></pre></td></tr></table></figure><ul><li>如果要获取客户端请求过来的参数：找HttpServletRequest</li><li>如果要给客户端响应一些信息：找HttpServletResponse</li></ul><h4 id="1、简单分类"><a href="#1、简单分类" class="headerlink" title="1、简单分类"></a>1、简单分类</h4><p>负责向浏览器发送数据的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">servletOutputstream <span class="hljs-title">getOutputstream</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>;<br>   <span class="hljs-function">Printwriter <span class="hljs-title">getwriter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>;<br></code></pre></td></tr></table></figure><p>负责向浏览器发送响应头的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setCharacterEncoding</span><span class="hljs-params">(String var1)</span>；</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setContentLength</span><span class="hljs-params">(<span class="hljs-keyword">int</span> var1)</span>；</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setContentLengthLong</span><span class="hljs-params">(<span class="hljs-keyword">long</span> var1)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setContentType</span><span class="hljs-params">(String var1)</span>；</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setDateHeader</span><span class="hljs-params">(String varl,<span class="hljs-keyword">long</span> var2)</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addDateHeader</span><span class="hljs-params">(String var1,<span class="hljs-keyword">long</span> var2)</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setHeader</span><span class="hljs-params">(String var1,String var2)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addHeader</span><span class="hljs-params">(String var1,String var2)</span>；</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setIntHeader</span><span class="hljs-params">(String var1,<span class="hljs-keyword">int</span> var2)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addIntHeader</span><span class="hljs-params">(String varl,<span class="hljs-keyword">int</span> var2)</span></span>;<br></code></pre></td></tr></table></figure><p>响应的状态码<br><img src="https://img-blog.csdnimg.cn/20200505155751598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="/.io//watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70-164714981892921" alt="在这里插入图片描述"></p><h4 id="2、下载文件"><a href="#2、下载文件" class="headerlink" title="2、下载文件"></a>2、下载文件</h4><ol><li>向浏览器输出消息（一直在讲，就不说了）</li><li>下载文件<ol><li>要获取下载文件的路径</li><li>下载的文件名是啥？</li><li>设置想办法让浏览器能够支持下载我们需要的东西</li><li>获取下载文件的输入流</li><li>创建缓冲区</li><li>获取OutputStream对象</li><li>将FileOutputStream流写入到bufer缓冲区</li><li>使用OutputStream将缓冲区中的数据输出到客户端！</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    <span class="hljs-comment">// 1. 要获取下载文件的路径</span><br>    String realPath = <span class="hljs-keyword">this</span>.getServletContext().getRealPath(<span class="hljs-string">&quot;/1.png&quot;</span>) ;<br>    System.out.println(<span class="hljs-string">&quot;下载文件的路径：&quot;</span>+realPath);<br>   <span class="hljs-comment">// 2. 下载的文件名是啥？</span><br>    String fileName = realPath.substring(realPath.lastIndexOf(<span class="hljs-string">&quot;\\&quot;</span>) + <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码</span><br>    resp.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename=&quot;</span>+URLEncoder.encode(fileName,<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>    <span class="hljs-comment">// 4. 获取下载文件的输入流</span><br>   FileInputStream in = <span class="hljs-keyword">new</span> FileInputStream(realPath);<br>    <span class="hljs-comment">// 5. 创建缓冲区</span><br>   <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>   <span class="hljs-comment">// 6. 获取OutputStream对象</span><br>    ServletOutputStream out = resp.getOutputStream();<br>   <span class="hljs-comment">// 7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！</span><br>    <span class="hljs-keyword">while</span> ((len=in.read(buffer))&gt;<span class="hljs-number">0</span>)&#123;<br>       out.write(buffer,<span class="hljs-number">0</span>,len);<br>    &#125;<br><br>    in.close();<br>    out.close();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、验证码功能"><a href="#3、验证码功能" class="headerlink" title="3、验证码功能"></a>3、验证码功能</h4><p>验证怎么来的?</p><ul><li>前端实现</li><li>后端实现，需要用到Java的图片类，生产一个图片</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.servlet;<br><br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImageServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>   <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        <span class="hljs-comment">//如何让浏览器3秒自动刷新一次;</span><br>        resp.setHeader(<span class="hljs-string">&quot;refresh&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>);<br><br>        <span class="hljs-comment">//在内存中创建一个图片</span><br>        BufferedImage image = <span class="hljs-keyword">new</span> BufferedImage(<span class="hljs-number">80</span>,<span class="hljs-number">20</span>,BufferedImage.TYPE_INT_RGB);<br>        <span class="hljs-comment">//得到图片</span><br>        Graphics2D g = (Graphics2D) image.getGraphics(); <span class="hljs-comment">//笔</span><br>        <span class="hljs-comment">//设置图片的背景颜色</span><br>       g.setColor(Color.white);<br>        g.fillRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">80</span>,<span class="hljs-number">20</span>);<br>        <span class="hljs-comment">//给图片写数据</span><br>        g.setColor(Color.BLUE);<br>        g.setFont(<span class="hljs-keyword">new</span> Font(<span class="hljs-keyword">null</span>,Font.BOLD,<span class="hljs-number">20</span>));<br>        g.drawString(makeNum(),<span class="hljs-number">0</span>,<span class="hljs-number">20</span>);<br><br>        <span class="hljs-comment">//告诉浏览器，这个请求用图片的方式打开</span><br>        resp.setContentType(<span class="hljs-string">&quot;image/jpeg&quot;</span>);<br>        <span class="hljs-comment">//网站存在缓存，不让浏览器缓存</span><br>        resp.setDateHeader(<span class="hljs-string">&quot;expires&quot;</span>,-<span class="hljs-number">1</span>);<br>        resp.setHeader(<span class="hljs-string">&quot;Cache-Control&quot;</span>,<span class="hljs-string">&quot;no-cache&quot;</span>);<br>        resp.setHeader(<span class="hljs-string">&quot;Pragma&quot;</span>,<span class="hljs-string">&quot;no-cache&quot;</span>);<br><br>        <span class="hljs-comment">//把图片写给浏览器</span><br>        ImageIO.write(image,<span class="hljs-string">&quot;jpg&quot;</span>, resp.getOutputStream());<br><br>    &#125;<br><br>    <span class="hljs-comment">//生成随机数</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">makeNum</span><span class="hljs-params">()</span></span>&#123;<br>        Random random = <span class="hljs-keyword">new</span> Random();<br>        String num = random.nextInt(<span class="hljs-number">9999999</span>) + <span class="hljs-string">&quot;&quot;</span>;<br>        StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>-num.length() ; i++) &#123;<br>            sb.append(<span class="hljs-string">&quot;0&quot;</span>);<br>        &#125;<br>       num = sb.toString() + num;<br>        <span class="hljs-keyword">return</span> num;<br>   &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>ImageServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.kuang.servlet.ImageServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>Imageservlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/img<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4、实现重定向"><a href="#4、实现重定向" class="headerlink" title="4、实现重定向"></a>4、实现重定向</h4><p><img src="/.io//image-20220317204420530.png" alt="image-20220317204420530"><br>常见场景:</p><ul><li>用户登录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sendRedirect</span><span class="hljs-params">(String var1)</span> <span class="hljs-keyword">throws</span> IOException</span>;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpservletRequest req, HttpservletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>    resp. sendRedirect(<span class="hljs-string">&quot;/r/img&quot;</span>);<span class="hljs-comment">//重定向</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    resp. setHeader(&quot;Location&quot;,&quot;/r/img&quot;);</span><br><span class="hljs-comment">    resp. setstatus (302);</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="面试题：请你聊聊重定向和转发的区别"><a href="#面试题：请你聊聊重定向和转发的区别" class="headerlink" title="面试题：请你聊聊重定向和转发的区别"></a>面试题：请你聊聊重定向和转发的区别</h4><ul><li>相同点：<ul><li>页面都会实现跳转</li></ul></li><li>不同点：<ul><li>请求转发的时候，url 不会发生变化         307</li><li>重定向的时候，url 地址栏会发生改变     302</li></ul></li></ul><p><img src="/.io//watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70-164714981892924" alt="在这里插入图片描述"><br>index.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Hel1o World!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br>&lt;%--这里超交的路径,需要寻找到项目的路径--%&gt;<br>&lt;%--$&#123;pageContext. request, contextPath&#125;代表当前的项目--%&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;$&#123;pageContext. request.contextPath&#125;/login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>用户名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>密码: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>RequestTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    <span class="hljs-comment">//处理方求</span><br>    String username = req.getParameter( s: <span class="hljs-string">&quot;username&quot;</span>);<br>    String password  rea.getParameter( s: <span class="hljs-string">&quot;password&quot;</span>);<br><br>   System.out.println(username+<span class="hljs-string">&quot;:&quot;</span>+password);<br><br>   resp.sendRedirect(s: <span class="hljs-string">&quot;/r/success.jsp&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>重定向页面success.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page contentType=&quot;text/html; charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>success<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>web.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>requset<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com. kuang. servlet. RequestTest<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>requset<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/login<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>导入依赖的jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- https://mvnrepository. com/artifact/javax. servLet/javax. servlet-opi --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupld</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">grouptd</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax. servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/javax. servLet.jsp/javax. servLet.jsp-opi --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupld</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax. servlet.jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7、HttpServletRequest"><a href="#7、HttpServletRequest" class="headerlink" title="7、HttpServletRequest"></a>7、HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求,用户通过Http协议访问服务器, HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息<br><img src="/.io//watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70-164714981892925" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200505165618601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="获取参数-请求转发"><a href="#获取参数-请求转发" class="headerlink" title="获取参数,请求转发"></a>获取参数,请求转发</h4><p><img src="/.io//20200505165652729.png" alt="在这里插入图片描述"><br>自己创建类，且需要继承HttpServlet类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpservletRequest req. HttpservletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>req. setcharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>resp.setcharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>String[] hobbys = req.getParameterValues(<span class="hljs-string">&quot;hobbys&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;==========&quot;</span>);<br><span class="hljs-comment">//后台接收中文乱码问题</span><br>System. out.println(username);<br>System. out.println(password);<br>System. out.println(Arrays.tostring(hobbys));<br>System. out.println(<span class="hljs-string">&quot;============&quot;</span>);<br>system. out.println(req.getContextPath());<br><span class="hljs-comment">//通过请求转发</span><br><span class="hljs-comment">//这里的/代表当前的web应用</span><br>req.getRequestDispatcher(<span class="hljs-string">&quot;/success.jsp&quot;</span>).forward(req,resp);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="面试题：请你聊聊重定向和转发的区别-1"><a href="#面试题：请你聊聊重定向和转发的区别-1" class="headerlink" title="面试题：请你聊聊重定向和转发的区别"></a>面试题：请你聊聊重定向和转发的区别</h4><ul><li>相同点：<ul><li>页面都会实现跳转</li></ul></li><li>不同点：<ul><li>请求转发的时候，url 不会发生变化         307</li><li>重定向的时候，url 地址栏会发生改变     302</li></ul></li></ul><p><img src="/.io//watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70-164714981892924" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/4-Maven/"/>
    <url>/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/4-Maven/</url>
    
    <content type="html"><![CDATA[<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>我为什么要学习这个技术？</p><ul><li><p>在Javaweb开发中，需要使用大量的jar包，我们手动去导入；</p></li><li><p>如何能够让一个东西自动帮我导入和配置这个jar包。</p><p>由此，Maven诞生了！</p></li></ul><h3 id="1-Maven项目架构管理工具"><a href="#1-Maven项目架构管理工具" class="headerlink" title="1 Maven项目架构管理工具"></a>1 Maven项目架构管理工具</h3><p>我们目前用来就是方便导入jar包的！<br>Maven的核心思想：</p><h4 id="约定大于配置"><a href="#约定大于配置" class="headerlink" title="约定大于配置"></a>约定大于配置</h4><p><strong>==&gt;</strong> <strong>有约束，不要去违反</strong></p><p>Maven会规定好你该如何去编写我们 Java 代码，必须要按照这个规范来；</p><h3 id="2-下载安装Maven"><a href="#2-下载安装Maven" class="headerlink" title="2 下载安装Maven"></a>2 下载安装Maven</h3><p>官网：<a href="https://maven.apache.org/">https://maven.apache.org/</a><br><img src="/.io//image-20220314165921789.png" alt="image-20220314165921789"></p><p>下载完成后，解压即可；<br>小狂神友情建议：电脑上的所有环境都放在一个文件夹下，方便管理；</p><h3 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3 配置环境变量"></a>3 配置环境变量</h3><p>在我们的系统环境变量中配置如下配置：</p><ul><li><p>M2_HOME maven目录下的bin目录</p></li><li><p>MAVEN_HOME maven的目录</p></li><li><p>在系统的path中配置%MAVEN_HOME%\bin<br><img src="/.io//20200423213124579.png" alt="在这里插入图片描述"><br>测试Maven是否安装成功，保证必须配置完毕！</p></li></ul><h3 id="4-阿里云镜像"><a href="#4-阿里云镜像" class="headerlink" title="4 阿里云镜像"></a>4 阿里云镜像</h3><p>镜像：mirrors</p><p>作用：加速我们的下载</p><p>国内建议使用阿里云的镜像</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p>D:Enmvironment\apache-maven-3.6.2\conf\settings.xml<br>（狂神老师配置源和仓库的文件位置）</p><h3 id="5-本地仓库"><a href="#5-本地仓库" class="headerlink" title="5 本地仓库"></a>5 本地仓库</h3><p>建立一个本地仓库：localRepository</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;localRepository&gt;D:\Environment\apache-maven-<span class="hljs-number">3.6</span>.<span class="hljs-number">2</span>\maven-repo&lt;/localRepository&gt;<br></code></pre></td></tr></table></figure><p>可以把Maven的仓库分为两种：</p><ul><li>本地仓库</li><li>远程仓库</li></ul><p>Maven寻找一个dependency时会先从本地仓库查找，如果找不到则在远程仓库查找，发现则下载到本地仓库使用。如果都查找失败，会提示build failure。</p><h3 id="6-在-IDEA-中使用-Maven"><a href="#6-在-IDEA-中使用-Maven" class="headerlink" title="6 在 IDEA 中使用 Maven"></a>6 在 IDEA 中使用 Maven</h3><p>1、启动IDEA</p><p>2、创建一个Maven项目</p><p><img src="/.io//clip_image002.jpg" alt="img"></p><img src="/.io//clip_image004.jpg" alt="img" style="zoom:50%;"><p><img src="/.io//clip_image006.jpg" alt="img"></p><p>3、等待项目初始化完毕</p><p>（记得配置阿里云镜像）</p><p><img src="/.io//clip_image016.jpg" alt="img"></p><p>4、IDEA中的Maven配置</p><p>​    IDEA项目创建成功后，看一眼Maven的配置</p><p><img src="/.io//image-20220315190254221.png" alt="image-20220315190254221"></p><p><img src="/.io//clip_image022.jpg" alt="img"></p><p>5、IDEA中的Maven配置基本完成</p><h3 id="7-创建一个普通的Maven项目"><a href="#7-创建一个普通的Maven项目" class="headerlink" title="7 创建一个普通的Maven项目"></a>7 创建一个普通的Maven项目</h3><p><img src="/.io//image-20220315190553652.png" alt="image-20220315190553652"></p><p><img src="/.io//clip_image028.jpg" alt="img"><img src="/.io//clip_image030.jpg" alt="img"></p><h3 id="8-标记文件夹功能"><a href="#8-标记文件夹功能" class="headerlink" title="8 标记文件夹功能"></a>8 标记文件夹功能</h3><p><img src="/.io//clip_image034.jpg" alt="img"></p><p><img src="/.io//clip_image036.jpg" alt="img"></p><p><img src="/.io//clip_image038.jpg" alt="img"></p><p><img src="/.io//clip_image040.jpg" alt="img"></p><p><img src="/.io//clip_image042.jpg" alt="img"></p><p>弹幕评论:友情提示不要用高版本的maven, 用3.6.1</p><h3 id="9-在-IDEA-中配置-Tomcat"><a href="#9-在-IDEA-中配置-Tomcat" class="headerlink" title="9 在 IDEA 中配置 Tomcat"></a>9 在 IDEA 中配置 Tomcat</h3><img src="/.io//image-20220315191744680.png" alt="image-20220315191744680" style="zoom:67%;"><p><img src="/.io//clip_image046.jpg" alt="img"></p><p><img src="/.io//clip_image048.jpg" alt="img"></p><p><img src="/.io//clip_image050.jpg" alt="img"></p><p><img src="/.io//clip_image052.jpg" alt="img"></p><p><img src="/.io//clip_image054.jpg" alt="img"></p><p><img src="/.io//clip_image056.jpg" alt="img"></p><p><img src="/.io//clip_image058.jpg" alt="img"></p><h3 id="10-pom-xml-文件"><a href="#10-pom-xml-文件" class="headerlink" title="10 pom.xml 文件"></a>10 pom.xml 文件</h3><p><strong>pom.xml 是Maven的核心配置文件</strong></p><p><img src="/.io//clip_image062.jpg" alt="img"></p><p><img src="/.io//clip_image064.jpg" alt="img"></p><p><img src="/.io//image-20220315235923572.png" alt="image-20220315235923572"></p><p><img src="/.io//clip_image066.jpg" alt="img"></p><p><img src="/.io//clip_image068.jpg" alt="img"></p><p>最新版本和idea不兼容，3.62~3.63都不兼容</p><p><img src="/.io//clip_image070.jpg" alt="img"></p><p>要用的</p><p><img src="/.io//clip_image072.jpg" alt="img"></p><p><img src="/.io//clip_image074.jpg" alt="img"></p><p><img src="/.io//clip_image076.jpg" alt="img"></p><h3 id="11-IDEA-操作"><a href="#11-IDEA-操作" class="headerlink" title="11 IDEA 操作"></a>11 IDEA 操作</h3><h5 id="导包举例——Maven-中添加-servlet、jsp-依赖"><a href="#导包举例——Maven-中添加-servlet、jsp-依赖" class="headerlink" title="导包举例——Maven 中添加 servlet、jsp 依赖"></a>导包举例——<strong>Maven 中添加 servlet、jsp 依赖</strong></h5><p><a href="https://www.cnblogs.com/fanwd/p/15022270.html">https://www.cnblogs.com/fanwd/p/15022270.html</a></p><img src="/.io//image-20220322232824593.png" alt="image-20220322232824593" style="zoom:67%;"><p><img src="/.io//clip_image080.jpg" alt="img"></p><p><img src="/.io//clip_image082.jpg" alt="img"></p><h3 id="12-解决遇到的问题"><a href="#12-解决遇到的问题" class="headerlink" title="12 解决遇到的问题"></a>12 解决遇到的问题</h3><p><img src="/.io//image-20220315201505359.png" alt="image-20220315201505359"></p><p><strong>Solve：</strong></p><p>1、降级为3.6.1</p><p>2、</p><p><img src="/.io//clip_image086.jpg" alt="img"></p><p>3、</p><p><img src="/.io//clip_image088.jpg" alt="img"></p><p><img src="/.io//clip_image090.jpg" alt="img"></p><p>4、下面5~6是解决方法</p><p><img src="/.io//clip_image092.jpg" alt="img"></p><p><img src="/.io//clip_image094.jpg" alt="img"></p><p><img src="/.io//clip_image096.jpg" alt="img"></p><h3 id="13-Maven-仓库的使用"><a href="#13-Maven-仓库的使用" class="headerlink" title="13 Maven 仓库的使用"></a>13 Maven 仓库的使用</h3><p>地址：    <a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><p><img src="/.io//clip_image100.jpg" alt="img"></p><p><img src="/.io//clip_image102.jpg" alt="img"></p><p><img src="/.io//clip_image104.jpg" alt="img"></p><p><img src="/.io//clip_image106.jpg" alt="img"></p><p><img src="/.io//clip_image108.jpg" alt="img"></p><p>作用域一般可以删掉</p><p>正常情况应该导入完上面的包就OK了</p><h5 id="导包举例——Maven-中添加-servlet、jsp-依赖-1"><a href="#导包举例——Maven-中添加-servlet、jsp-依赖-1" class="headerlink" title="导包举例——Maven 中添加 servlet、jsp 依赖"></a>导包举例——<strong>Maven 中添加 servlet、jsp 依赖</strong></h5><p><a href="https://www.cnblogs.com/fanwd/p/15022270.html">https://www.cnblogs.com/fanwd/p/15022270.html</a></p><img src="/.io//image-20220322232836560.png" alt="image-20220322232836560" style="zoom:67%;">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/3-HTTP/"/>
    <url>/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/3-HTTP/</url>
    
    <content type="html"><![CDATA[<h2 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h2><h3 id="1、什么是HTTP"><a href="#1、什么是HTTP" class="headerlink" title="1、什么是HTTP"></a>1、什么是HTTP</h3><p>(超文本传输协议）是一个简单的请求–响应协议，它通常运行在TCP之上。</p><ul><li>文本：html，字符串，…</li><li>超文本：图片，音乐，视频，定位，地图.……</li><li>端口:80</li></ul><p>Https：安全的，默认端口：443</p><h3 id="2、两个时代"><a href="#2、两个时代" class="headerlink" title="2、两个时代"></a>2、两个时代</h3><p>http/1.1请求一次资源可以连续获取多个web资源，不需要每次获取一个web资源就必须再次连接一次</p><ul><li>http1.0<ul><li>HTTP/1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接。这是一种短链接</li></ul></li><li>http2.0<ul><li>HTTP/1.1：客户端可以与web服务器连接后，可以获得多个web资源。这是一种长连接。</li></ul></li></ul><p><a href="https://blog.csdn.net/m0_37865510/article/details/83349488">长连接和短连接的区别是啥</a></p><ul><li><p>长连接多用于操作频繁，点对点的通讯，而且连接数不能太多情况。每个TCP连接都需要三步握手，这需要时间，如果每个操作都是先连接，再操作的话那么处理速度会降低很多，所以每个操作完后都不断开，次处理时直接发送数据包就OK了不用建立TCP连接。例如：数据库的连接用长连接， 如果用短连接频繁的通信会造成socket错误，而且频繁的socket 创建也是对资源的浪费。</p></li><li><p>而像WEB网站的http服务一般都用短链接，因为长连接对于服务端来说会耗费一定的资源，而像WEB网站这么频繁的成千上万甚至上亿客户端的连接用短连接会更省一些资源，如果用长连接，而且同时有成千上万的用户，如果每个用户都占用一个连接的话，那可想而知吧。所以并发量大，但每个用户无需频繁操作情况下需用短连好。</p></li></ul><h3 id="3、Http请求"><a href="#3、Http请求" class="headerlink" title="3、Http请求"></a>3、Http请求</h3><ul><li>客户端–发请求（Request）–服务器</li></ul><p>百度：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">Request</span> URL:https:<span class="hljs-comment">//www.baidu.com/   请求地址</span><br><span class="hljs-symbol">Request</span> Method:<span class="hljs-meta">GET</span>    <span class="hljs-meta">get</span>方法/post方法<br><span class="hljs-symbol">Status</span> <span class="hljs-meta">Code</span>:<span class="hljs-number">200</span> OK    状态码：<span class="hljs-number">200</span><br><span class="hljs-symbol">Remote</span>（远程） Address:<span class="hljs-number">14</span>.<span class="hljs-number">215</span>.<span class="hljs-number">177</span>.<span class="hljs-number">39</span>:<span class="hljs-number">443</span><br><br><span class="hljs-symbol">Accept:</span>text/html  <br><span class="hljs-symbol">Accept</span>-Encoding:gzip, deflate, <span class="hljs-keyword">br</span><br><span class="hljs-symbol">Accept</span>-Language:zh-<span class="hljs-meta">CN</span>,zh<span class="hljs-comment">;q=0.9    语言</span><br><span class="hljs-symbol">Cache</span>-Control:max-age<span class="hljs-number">=0</span><br><span class="hljs-symbol">Connection:</span><span class="hljs-meta">keep</span>-alive<br></code></pre></td></tr></table></figure><h4 id="3-1、请求行"><a href="#3-1、请求行" class="headerlink" title="3.1、请求行"></a>3.1、请求行</h4><ul><li>请求行中的请求方式：GET</li><li>请求方式：Get，Post，HEAD，DELETE，PUT，TRACT.…<ul><li>get：请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效</li><li>post：请求能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效。</li></ul></li></ul><h4 id="3-2、消息头"><a href="#3-2、消息头" class="headerlink" title="3.2、消息头"></a>3.2、消息头</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">Accept：告诉浏览器，它所支持的数据类型<br>Accept-Encoding：支持哪种编码格式  GBK   UTF-8   GB2312  ISO8859-1<br>Accept-Language：告诉浏览器，它的语言环境<br>Cache-Control：缓存控制<br>Connection：告诉浏览器，请求完成是断开还是保持连接<br>HOST：主机..../.<br></code></pre></td></tr></table></figure><h3 id="4、Http响应"><a href="#4、Http响应" class="headerlink" title="4、Http响应"></a>4、Http响应</h3><ul><li>服务器–响应…….客户端</li></ul><p>百度：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">Cache-Control:private    缓存控制</span><br><span class="hljs-section">Connection:Keep-Alive    连接</span><br><span class="hljs-section">Content-Encoding:gzip    编码</span><br><span class="hljs-section">Content-Type:text/html   类型  </span><br></code></pre></td></tr></table></figure><h4 id="4-1、响应体"><a href="#4-1、响应体" class="headerlink" title="4.1、响应体"></a>4.1、响应体</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">Accept：告诉浏览器，它所支持的数据类型<br>Accept-Encoding：支持哪种编码格式  GBK   UTF-8   GB2312  ISO8859-1<br>Accept-Language：告诉浏览器，它的语言环境<br>Cache-Control：缓存控制<br>Connection：告诉浏览器，请求完成是断开还是保持连接<br>HOST：主机..../.<br>Refresh：告诉客户端，多久刷新一次；<br>Location：让网页重新定位；<br></code></pre></td></tr></table></figure><h4 id="4-2、响应状态码"><a href="#4-2、响应状态码" class="headerlink" title="4.2、响应状态码"></a>4.2、响应状态码</h4><p>200：请求响应成功200<br>3xx:请求重定向·重定向：你重新到我给你新位置去；<br>4xx:找不到资源404·资源不存在；<br>5xx:服务器代码错误 500 502:网关错误</p><h3 id="5、环境变量的作用"><a href="#5、环境变量的作用" class="headerlink" title="5、环境变量的作用"></a>5、<strong>环境变量的作用</strong></h3><p>1、随着电脑安装的软件越来越多，我们记不住所有软件的安装路径，想运行某一软件就很麻烦。</p><p>2、如果想在某一路径下直接运行某款软件，我们无能为力。</p><p>通过在环境变量里面加入所有软件的安装路径，当我们想运行某一软件时双击其快捷方式或者在DOS界面输入软件名称，此时，计算机除了在其当前目录下寻找该软件的.exe文件外，还在环境变量中搜索软件的路径，找到，运行。</p><p>综上，Windows和DOS操作系统中的path环境变量，当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到path中指定的路径去找。用户通过设置环境变量，来更好的运行进程。</p><h3 id="6、网关和502错误"><a href="#6、网关和502错误" class="headerlink" title="6、网关和502错误"></a>6、<strong>网关和502错误</strong></h3><p>从网络设备上的“网关”讲，这个设备有时候又叫“路由器”或者“防火墙”又或者叫“（三层）交换机”。如果给出一张拓扑图，可以想见网关是处于两个或两个以上的网络之间的，负责路由转发或者地址转换或者执行数据包过滤的设备。<em>从别的角度看描述起来不会这么绕，比如说终端配置的网关地址，它的意义就在于访问本网段以外的地址都经由所配置网关地址所在的网关设备转发。</em></p><p>出现502的原因是：<br>对用户访问请求的响应超时造成的，简单来说 502 是报错类型代码 bad gateway 错误的网关。连接超时 我们向服务器发送请求 由于服务器当前链接太多，导致服务器方面无法给于正常的响应,产生此类报错。在最基本的级别上，502错误网关表示服务器通信出现了问题。它涉及网关或代理服务器之间的通信，这些网关或代理服务器接受来自上游（或源）服务器的无效响应。当上游服务器和网关服务器无法决定交换数据的协议，就会出现问题，因此无法显示网站。502错误通常意味着在你的网站设置过程中出现了错误配置。</p><p>具体分析有几下几点：</p><p>服务器超载——如果服务器耗尽内存，服务器可能会崩溃，原因是站点上有大量访问者或DDOS攻击。</p><p>防火墙阻止请求——防火墙可能会阻止边缘服务器和上游服务器之间的通信。某些DDoS保护系统可能会过度反应并阻止来自内容传送系统的请求。<br>编程错误——有时网站代码中的一个错误可能意味着请求不能得到正确的响应，从而导致出现这个错误。</p><p>网络错误——DNS问题、路由问题和ISP相关的问题也可以导致错误网关。<br>服务器软件超时——当Web服务器需要更多时间来完成并且缓存工具达到其超时值时，也会发生此错误。慢查询也会导致此问题。</p><p>解决办法：<br>1.提高 Web 服务器的响应速度，也即减少内部的调用关系，可以把需要的页面、素材或数据，缓存在内存中，可以是专门的缓存服务器 ，也可以Web服务器自身的缓存，提高响应速度；</p><p>2.网络带宽的问题，则对传输的数据包进行压缩处理，或者向IDC申请增加带宽；</p><p>3.属于内部网络的故障或设置问题，也即内部网络拥塞，可能内部存在大量的数据调用或交互造成的，则需要优化内部网络传输或协议；</p><p>4.另外很大的问题在MySQL数据库这一块，如果数据库执行命令超时也会大延长php脚本的执行时间，导致 Nginx 等待超时。可以my.cnf的 slow log进行确认效能低下的sql语句是哪些，进行优化配置。数据库的数据读取造成前端服务器 ，响应用户的请求变慢，那么必须提高数据库的处理能力，若是只读业务可以增加数据缓存的模式 或者增加数据库备机，分散读压力； 若是写的压力，则可以考虑延迟写的模式，想这个时候做数据写分散肯定来不及。</p><p>5.在发生错误时检查Web服务器日志将是一个很好的起点。如果你是该网站的所有者，则可以检查你的FQDN</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/2-Tomcat/"/>
    <url>/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/2-Tomcat/</url>
    
    <content type="html"><![CDATA[<h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><h5 id="Tomcat-1"><a href="#Tomcat-1" class="headerlink" title="Tomcat"></a>Tomcat</h5><p><img src="/.io//20200423183331323.png" alt="在这里插入图片描述"></p><p>最新的Servlet 和 JSP 规范总是能在Tomcat中得到体现，因为Tomcat 技术先进、性能稳定，而且免费，因而深受lava爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web应用服务器。</p><p>Tomcat 服务器是一个免费的开放源代码的Web应用服务器，属于<strong>轻量级应用服务器</strong>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP程序的首选。对于一个Java初学web的人来说，它是最佳的选择。</p><h3 id="1、安装tomcat-tomcat"><a href="#1、安装tomcat-tomcat" class="headerlink" title="1、安装tomcat tomcat"></a>1、安装tomcat tomcat</h3><p>官网：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></p><p><img src="/.io//watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70-16471498189275" alt="在这里插入图片描述"><br><img src="/.io//20200423183826267.png" alt="在这里插入图片描述"></p><h3 id="2、Tomcat启动和配置"><a href="#2、Tomcat启动和配置" class="headerlink" title="2、Tomcat启动和配置"></a>2、Tomcat启动和配置</h3><p>文件夹作用:<br><img src="/.io//image-20220313212603521.png" alt="image-20220313212603521"></p><p><img src="/.io//image-20220313212624598.png" alt="image-20220313212624598"></p><p>访问测试：<a href="http://localhost:8080/">http://localhost:8080/</a><br>可能遇到的问题：</p><ol><li>Java环境变量没有配置</li><li>闪退问题：需要配置兼容性</li><li>乱码问题：配置文件中设置</li></ol><p>可以修改 conf/logging.properties 中的 java.util.logging.ConsoleHandler.encoding = GBK 解决乱码问题</p><h3 id="3、配置"><a href="#3、配置" class="headerlink" title="3、配置"></a>3、配置</h3><p><img src="/.io//watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70-16471498189279" alt="在这里插入图片描述"></p><p>可以配置启动的端口号</p><ul><li>tomcat的默认端口号为：8080</li><li>mysql:3306</li><li>http:80</li><li>https：443</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8081&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>可以配置主机的名称</p><ul><li>默认的主机名为：localhost-&gt;127.0.0.1</li><li>默认网站应用存放的位置为：webapps</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Host</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;www.qinjiang.com&quot;</span>  <span class="hljs-attr">appBase</span>=<span class="hljs-string">&quot;webapps&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">unpackWARs</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">autoDeploy</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="高难度面试题："><a href="#高难度面试题：" class="headerlink" title="高难度面试题："></a>高难度面试题：</h5><p><a href="https://blog.csdn.net/zhongqw_00/article/details/88958000">请你谈谈网站是如何进行访问的！</a></p><ol><li><p>输入一个域名；回车</p></li><li><p>检查本机的C:\Windows\System32\drivers\etc\hosts配置文件下有没有这个域名映射；</p><ol><li><p>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> www.qinjiang.com<br></code></pre></td></tr></table></figure></li><li><p>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；<br><img src="/.io//image-20220313214253452.png" alt="image-20220313214253452"></p></li></ol></li></ol><h3 id="4、发布一个web网站"><a href="#4、发布一个web网站" class="headerlink" title="4、发布一个web网站"></a>4、发布一个web网站</h3><p>不会就先模仿</p><ul><li><p>将自己写的网站，放到服务器（Tomcat)中指定的web应用的文件夹（webapps)下，就可以访问了</p></li><li><p><img src="/.io//1363376-20210211000006651-638790997.png" alt="img"></p></li></ul><p>网站应该有的结构</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">--webapps ：Tomcat服务器的web目录<br>-ROOT<br>-kuangstudy ：网站的目录名<br>- WEB-INF<br>-classes : <span class="hljs-keyword">java程序</span><br><span class="hljs-keyword"></span>-lib：web应用所依赖的<span class="hljs-keyword">jar包</span><br><span class="hljs-keyword"></span>-web.xml ：网站配置文件<br>- index.html 默认的首页<br>- static <br>            -css<br>            -style.css<br>            -<span class="hljs-keyword">js</span><br><span class="hljs-keyword"></span>            -img<br>         -.....<br></code></pre></td></tr></table></figure><h3 id="5、应用服务器-amp-物理服务器"><a href="#5、应用服务器-amp-物理服务器" class="headerlink" title="5、应用服务器 &amp; 物理服务器"></a>5、应用服务器 &amp; 物理服务器</h3><p>tomcat可以说成是应用服务器软件，也可以说是中间件，也可以说是Servlet容器，Web服务器。你说的不停运转的物理机器，那是物理机器，物理机器肯定是一起的基础，但是就像就有了一台裸电脑，你不装操作系统，你QQ怎么运行啊。先有物理服务器机器，再安装tomcat，然后在tomcat里面部署你的JavaEE JavaWeb程序，才能像QQ一样提供服务。Tomcat是Java Web才需要的，如果使用ASP.net或者PHP开发网站，不需要Tomcat。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/14-SSM%E6%A1%86%E6%9E%B6/"/>
    <url>/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/14-SSM%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="企业中用的两种-Java-框架"><a href="#企业中用的两种-Java-框架" class="headerlink" title="企业中用的两种 Java 框架"></a>企业中用的两种 Java 框架</h2><ul><li><h4 id="SSM"><a href="#SSM" class="headerlink" title="SSM"></a>SSM</h4></li><li><h4 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h4></li></ul><p><img src="/.io//a1879b66217c4bf1b8a3d0ab05e83dce.png" alt="a1879b66217c4bf1b8a3d0ab05e83dce"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/13-Spring%20Boot%E5%8F%96%E4%BB%A3JSP/"/>
    <url>/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/13-Spring%20Boot%E5%8F%96%E4%BB%A3JSP/</url>
    
    <content type="html"><![CDATA[<p>Spring Boot一部分取代了jsp：<br>以前老的方式是：<br>1.客户端请求<br>2.服务端的servlet或controller接收请求（路由规则由后端制定，整个项目开发的权重大部分在后端）<br>3.调用service,dao代码完成业务逻辑<br>4.返回jsp<br>5.jsp展现一些动态的代码</p><p>新的方式是：<br>1.浏览器发送请求<br>2.直接到达html页面（路由规则由前端制定，整个项目开发的权重前移）<br>3.html页面负责调用服务端接口产生数据（通过ajax等等）<br>4.填充html，展现动态效果。</p><p>这样做的好处是：<br>1.可以实现真正的前后端解耦，前端服务器使用nginx。<br>前端服务器放的是css，js，图片等等一系列静态资源（甚至你还可以css，js，图片等资源放到特定的文件服务器，例如阿里云的oss，并使用cdn加速），前端服务器负责控制页面引用，跳转，调用后端的接口，后端服务器使用tomcat。<br>（这里需要使用一些前端工程化的框架比如nodejs，react，router，react，redux，webpack）</p><p>2.发现bug，可以快速定位是谁的问题，不会出现互相踢皮球的现象。<br>页面逻辑，跳转错误，浏览器兼容性问题，脚本错误，页面样式等问题，全部由前端工程师来负责。<br>接口数据出错，数据没有提交成功，应答超时等问题，全部由后端工程师来解决。<br>双方互不干扰，前端与后端是相亲相爱的一家人。</p><p>3.在大并发情况下，我可以同时水平扩展前后端服务器，比如淘宝的一个首页就需要2000台前端服务器做集群来抗住日均多少亿+的日均pv。<br>（去参加阿里的技术峰会，听他们说他们的web容器都是自己写的，就算他单实例抗10万http并发，2000台是2亿http并发，并且他们还可以根据预知洪峰来无限拓展，很恐怖，就一个首页。。。）</p><p>4.减少后端服务器的并发压力，除了接口以外的其他所有http请求全部转移到前端nginx上。</p><p>5.即使后端服务暂时超时或者宕机了，前端页面也会正常访问，只不过数据刷不出来而已。</p><p>6.也许你也需要有微信相关的轻应用，那样你的接口完全可以共用，如果也有app相关的服务，那么只要通过一些代码重构，也可以大量复用接口，提升效率。</p><p>7.页面显示的东西再多也不怕，因为是异步加载。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/12-JDBC/"/>
    <url>/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/12-JDBC/</url>
    
    <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h3 id="1、什么是JDBC"><a href="#1、什么是JDBC" class="headerlink" title="1、什么是JDBC"></a>1、什么是JDBC</h3><p>Java Database Connectivity —— Java连接数据库</p><p>思想——架构：没有什么是加一层解决不了的</p><p><img src="/.io//image-20220320155833170.png" alt="image-20220320155833170"></p><p>需要jar包的支持：</p><ul><li>java.sql</li><li>javax.sql</li><li>mysql-conneter-java… 连接驱动（必须要导入）</li></ul><h3 id="2、实验环境搭建"><a href="#2、实验环境搭建" class="headerlink" title="2、实验环境搭建"></a>2、<strong>实验环境搭建</strong></h3><h4 id="2-1-创建MySQL数据库表格"><a href="#2-1-创建MySQL数据库表格" class="headerlink" title="2.1 创建MySQL数据库表格"></a><strong>2.1 创建MySQL数据库表格</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> users(<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>),<br>    `password` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>),<br>    email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">60</span>),<br>    birthday <span class="hljs-type">DATE</span><br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users(id,`name`,`password`,email,birthday)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>,<span class="hljs-string">&#x27;zs@qq.com&#x27;</span>,<span class="hljs-string">&#x27;2000-01-01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users(id,`name`,`password`,email,birthday)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>,<span class="hljs-string">&#x27;ls@qq.com&#x27;</span>,<span class="hljs-string">&#x27;2000-01-01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users(id,`name`,`password`,email,birthday)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>,<span class="hljs-string">&#x27;ww@qq.com&#x27;</span>,<span class="hljs-string">&#x27;2000-01-01&#x27;</span>);<br><br><br><span class="hljs-keyword">SELECT</span><span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users;<br></code></pre></td></tr></table></figure><h4 id="2-1-导入数据库依赖"><a href="#2-1-导入数据库依赖" class="headerlink" title="2.1  导入数据库依赖"></a>2.1  导入数据库依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mysql的驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、IDEA中连接数据库："><a href="#3、IDEA中连接数据库：" class="headerlink" title="3、IDEA中连接数据库："></a>3、IDEA中连接数据库：</h3><ul><li>输入用户和密码</li><li>选择Schemas</li><li>选择Driver</li></ul><img src="/.io//image-20220320193034391.png" alt="image-20220320193034391" style="zoom:67%;"><img src="/.io//image-20220320193122424.png" alt="image-20220320193122424" style="zoom:67%;"><img src="/.io//image-20220320193157550.png" alt="image-20220320193157550" style="zoom:67%;"><img src="/.io//image-20220320200024499.png" alt="image-20220320200024499" style="zoom:67%;"><h3 id="4、JDBC-固定步骤："><a href="#4、JDBC-固定步骤：" class="headerlink" title="4、JDBC 固定步骤："></a>4、<strong>JDBC 固定步骤：</strong></h3><ol><li>加载驱动</li><li>连接数据库，代表数据库</li><li>向数据库发送SQL的对象Statement：CRUD</li><li>编写SQL （根据业务，不同的SQL）</li><li>执行SQL</li><li>关闭连接（先开的后关）</li></ol><p><strong>注：查询用executeQuery()，增删改都用executeUpdate()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestJdbc</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;<br>        <span class="hljs-comment">//配置信息</span><br>        <span class="hljs-comment">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span><br>        String url=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;<br>        String username = <span class="hljs-string">&quot;root&quot;</span>;<br>        String password = <span class="hljs-string">&quot;123456&quot;</span>;<br><br>        <span class="hljs-comment">//1.加载驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">//2.连接数据库,代表数据库</span><br>        Connection connection = DriverManager.getConnection(url, username, password);<br><br>        <span class="hljs-comment">//3.向数据库发送SQL的对象Statement,PreparedStatement : CRUD</span><br>        Statement statement = connection.createStatement();<br><br>        <span class="hljs-comment">//4.编写SQL</span><br>        String sql = <span class="hljs-string">&quot;select * from users&quot;</span>;<br><br>        <span class="hljs-comment">//5.执行查询SQL，返回一个 ResultSet  ： 结果集</span><br>        ResultSet rs = statement.executeQuery(sql);<br><br>        <span class="hljs-keyword">while</span> (rs.next())&#123;<br>            System.out.println(<span class="hljs-string">&quot;id=&quot;</span>+rs.getObject(<span class="hljs-string">&quot;id&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;name=&quot;</span>+rs.getObject(<span class="hljs-string">&quot;name&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;password=&quot;</span>+rs.getObject(<span class="hljs-string">&quot;password&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;email=&quot;</span>+rs.getObject(<span class="hljs-string">&quot;email&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;birthday=&quot;</span>+rs.getObject(<span class="hljs-string">&quot;birthday&quot;</span>));<br>        &#125;<br><br>        <span class="hljs-comment">//6.关闭连接，释放资源（一定要做） 先开后关</span><br>        rs.close();<br>        statement.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、预编译SQL"><a href="#5、预编译SQL" class="headerlink" title="5、预编译SQL"></a><strong>5、预编译SQL</strong></h3><h4 id="预编译语句基本概念"><a href="#预编译语句基本概念" class="headerlink" title="预编译语句基本概念"></a>预编译语句基本概念</h4><p>通常我们的一条sql在db接收到最终执行完毕返回可以分为下面三个过程：</p><ol><li>词法和语义解析</li><li>优化sql语句，制定执行计划</li><li>执行并返回结果</li></ol><p>我们把这种普通语句称作<strong>Immediate Statements</strong>。</p><p>但是很多情况，我们的一条sql语句可能会反复执行，或者每次执行的时候只有个别的值不同（比如query的where子句值不同，update的set子句值不同,insert的values值不同）。<br>如果每次都需要经过上面的词法语义解析、语句优化、制定执行计划等，则效率就明显不行了。</p><p>所谓预编译语句就是将这类语句中的值用占位符替代，可以视为<strong>将sql语句模板化或者说参数化</strong>，一般称这类语句叫<strong>Prepared Statements</strong>或者<strong>Parameterized Statements</strong><br>预编译语句的优势在于归纳为：<strong>一次编译、多次运行，省去了解析优化等过程；此外预编译语句能防止sql注入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestJDBC2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//配置信息</span><br>        <span class="hljs-comment">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span><br>        String url=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;<br>        String username = <span class="hljs-string">&quot;root&quot;</span>;<br>        String password = <span class="hljs-string">&quot;123456&quot;</span>;<br><br>        <span class="hljs-comment">//1.加载驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">//2.连接数据库,代表数据库</span><br>        Connection connection = DriverManager.getConnection(url, username, password);<br><br>        <span class="hljs-comment">//3.编写SQL</span><br>        String sql = <span class="hljs-string">&quot;insert into  users(id, name, password, email, birthday) values (?,?,?,?,?);&quot;</span>;<br><br>        <span class="hljs-comment">//4.预编译</span><br>        PreparedStatement preparedStatement = connection.prepareStatement(sql);<br><br>        preparedStatement.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//给第一个占位符？ 的值赋值为1；</span><br>        preparedStatement.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;狂神说Java&quot;</span>);<span class="hljs-comment">//给第二个占位符？ 的值赋值为狂神说Java；</span><br>        preparedStatement.setString(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;123456&quot;</span>);<span class="hljs-comment">//给第三个占位符？ 的值赋值为123456；</span><br>        preparedStatement.setString(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;24736743@qq.com&quot;</span>);<span class="hljs-comment">//给第四个占位符？ 的值赋值为1；</span><br>        preparedStatement.setDate(<span class="hljs-number">5</span>,<span class="hljs-keyword">new</span> Date(<span class="hljs-keyword">new</span> java.util.Date().getTime()));<span class="hljs-comment">//给第五个占位符？ 的值赋值为new Date(new java.util.Date().getTime())；</span><br><br>        <span class="hljs-comment">//5.执行SQL</span><br>        <span class="hljs-keyword">int</span> i = preparedStatement.executeUpdate();<br><br>        <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;插入成功@&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//6.关闭连接，释放资源（一定要做） 先开后关</span><br>        preparedStatement.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、事务-amp-ACID原则"><a href="#6、事务-amp-ACID原则" class="headerlink" title="6、事务 &amp; ACID原则"></a><strong>6、事务 &amp; ACID原则</strong></h3><p>要么都成功，要么都失败！</p><p>ACID原则：保证数据的安全。</p><p><strong>原子性(Atomicity)：</strong>是指一个事务要么全部执行，要么不执行，也就是说一个事务不可能只执行了一半就停止了。</p><p>**一致性(Consistency)**：是指事务的运行并不改变数据库中数据的一致性。例如，完整性约束了a+b=10，一个事务改变了a，那么b也应该随之改变。</p><p><strong>独立性(Isolation）：</strong>事务的独立性也称作隔离性，是指两个以上的事务不会出现交错执行的状态。因为这样可能会导致数据不一致，更加具体的来讲，就是事务之间的操作是独立的。</p><p><strong>持久性(Durability）：</strong>事务的持久性是指事务执行成功以后，该事务对数据库所作的更改便是持久的保存在数据库之中，不会无缘无故的回滚。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs isbl">执行顺序：<br><br>开启事务<br>事务提交  <span class="hljs-function"><span class="hljs-title">commit</span>()</span><br>事务回滚  <span class="hljs-function"><span class="hljs-title">rollback</span>()</span><br>关闭事务<br><br></code></pre></td></tr></table></figure><h3 id="7、Junit单元测试"><a href="#7、Junit单元测试" class="headerlink" title="7、Junit单元测试"></a>7、<strong>Junit单元测试</strong></h3><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--单元测试--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>简单使用：</p><p><strong>@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行！</strong></p><p>（可以只运行注解标注的方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/.io//image-20220320203844328.png" alt="image-20220320203844328"></p><p>失败的时候是红色：</p><p><img src="/.io//image-20220320203902937.png" alt="image-20220320203902937"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/11-%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <url>/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/11-%E7%9B%91%E5%90%AC%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><p>实现一个监听器的接口；（有n种监听器）</p><ol><li><p>编写一个监听器</p><p>实现监听器的接口依赖的jar包</p></li></ol><p><img src="/.io//image-20220320142749339.png" alt="image-20220320142749339"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//统计网站在线人数 ： 统计session</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OnlineCountListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HttpSessionListener</span> </span>&#123;<br><br>    <span class="hljs-comment">//创建session监听： 看你的一举一动</span><br>    <span class="hljs-comment">//一旦创建Session就会触发一次这个事件！</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sessionCreated</span><span class="hljs-params">(HttpSessionEvent se)</span> </span>&#123;<br>        ServletContext ctx = se.getSession().getServletContext();<br><br>        System.out.println(se.getSession().getId());<br><br>        Integer onlineCount = (Integer) ctx.getAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (onlineCount==<span class="hljs-keyword">null</span>)&#123;<br>            onlineCount = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> count = onlineCount.intValue();<br>            onlineCount = <span class="hljs-keyword">new</span> Integer(count+<span class="hljs-number">1</span>);<br>        &#125;<br><br>        ctx.setAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>,onlineCount);<br><br>    &#125;<br><br>    <span class="hljs-comment">//销毁session监听</span><br>    <span class="hljs-comment">//一旦销毁Session就会触发一次这个事件！</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sessionDestroyed</span><span class="hljs-params">(HttpSessionEvent se)</span> </span>&#123;<br>        ServletContext ctx = se.getSession().getServletContext();<br><br>        Integer onlineCount = (Integer) ctx.getAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (onlineCount==<span class="hljs-keyword">null</span>)&#123;<br>            onlineCount = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">0</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> count = onlineCount.intValue();<br>            onlineCount = <span class="hljs-keyword">new</span> Integer(count-<span class="hljs-number">1</span>);<br>        &#125;<br><br>        ctx.setAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>,onlineCount);<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Session销毁：</span><br><span class="hljs-comment">    1. 手动销毁  getSession().invalidate();</span><br><span class="hljs-comment">    2. 自动销毁</span><br><span class="hljs-comment">     */</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure><ol start="2"><li>web.xml中注册监听器</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册监听器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>com.kuang.listener.OnlineCountListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br>1234<br></code></pre></td></tr></table></figure><ol start="3"><li>看情况是否使用！</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/10-Filter%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <url>/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/10-Filter%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>比如 Shiro安全框架技术就是用Filter来实现的</p><p>Filter：过滤器 ，用来过滤网站的数据；</p><ul><li>处理中文乱码</li><li>登录验证….</li></ul><p>（比如用来过滤网上骂人的话，我***我自己 0-0）</p><p><img src="/.io//image-20220320141837571.png" alt="image-20220320141837571"><br>Filter开发步骤：</p><ol><li><p>导包</p></li><li><p>编写过滤器</p><p>导包不要错 （注意）</p></li></ol><p><img src="/.io//image-20220320141850491.png" alt="image-20220320141850491"></p><p>实现Filter接口，重写对应的方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharacterEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br><br>    <span class="hljs-comment">//初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter初始化&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//Chain : 链</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">          1. 过滤中的所有代码，在过滤特定请求的时候都会执行</span><br><span class="hljs-comment">          2. 必须要让过滤器继续同行</span><br><span class="hljs-comment">              chain.doFilter(request,response);</span><br><span class="hljs-comment">   */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter执行前....&quot;</span>);<br>        chain.doFilter(request,response); <span class="hljs-comment">//让我们的请求继续走，如果不写，程序到这里就被拦截停止！</span><br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter执行后....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//销毁：web服务器关闭的时候，过滤器会销毁</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter销毁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>在web.xml中配置 Filter</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.kuang.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--只要是 /servlet的任何请求，会经过这个过滤器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/servlet/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;url-pattern&gt;/*&lt;/url-pattern&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 别偷懒写个 /* --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Filter实现权限拦截"><a href="#Filter实现权限拦截" class="headerlink" title="Filter实现权限拦截"></a>Filter实现权限拦截</h4><p>用户登录之后才能进入主页！用户注销后就不能进入主页了！</p><ol><li>用户登录之后，向Sesison中放入用户的数据</li><li>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">HttpServletRequest request = (HttpServletRequest) req;<br>HttpServletResponse response = (HttpServletResponse) resp;<br><br><span class="hljs-keyword">if</span> (request.getSession().getAttribute(Constant.USER_SESSION)==<span class="hljs-keyword">null</span>)&#123;<br>    response.sendRedirect(<span class="hljs-string">&quot;/error.jsp&quot;</span>);<br>&#125;<br><br>chain.doFilter(request,response);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基本概念</title>
    <link href="/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <url>/2022/03/24/java/JavaWeb%E5%85%A5%E9%97%A8/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><h3 id="1-1、前言"><a href="#1-1、前言" class="headerlink" title="1.1、前言"></a>1.1、前言</h3><p>web开发：</p><ul><li>web，网页的意思，<a href="http://www.baidu.com·/">www.baidu.com·</a></li><li>静态web<ul><li>html,css</li><li>提供给所有人看的数据始终不会发生变化！</li></ul></li><li>动态web<ul><li>淘宝，几乎是所有的网站；</li><li>提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同！</li><li>技术栈：Servlet/JSP，ASP，PHP</li></ul></li></ul><h3 id="1-2、web应用程序web应用程序："><a href="#1-2、web应用程序web应用程序：" class="headerlink" title="1.2、web应用程序web应用程序："></a>1.2、web应用程序web应用程序：</h3><p>可以提供浏览器访问的程序；</p><ul><li>a.html、b.html.….多个web资源，这些web资源可以被外界访问，对外界提供服务；</li><li>你们能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上。</li><li>URL</li><li>这个统一的web资源会被放在同一个文件夹下，web应用程序—-&gt;Tomcat：服务器</li><li>一个web应用由多部分组成（静态web，动态web)<ul><li>html,css,js</li><li>jsp,servlet</li><li>Java程序</li><li>jar包</li><li>配置文件（Properties)</li></ul></li></ul><p>Web程序编写完毕后，若想提供给外界访问；需费统一管理</p><h3 id="1-3、静态web"><a href="#1-3、静态web" class="headerlink" title="1.3、静态web"></a>1.3、静态web</h3><ul><li>*.htm， *.html这些都是网员的后境、如果服务器上一直存在这些东西，我们就可以直接进行读取、需要网络；</li><li><img src="/.io//image-20220313202759516.png" alt="image-20220313202759516"></li><li>静态web存在的缺点<ul><li>Web页面无法动态更新，所有用户看到都是同一个页面<ul><li>轮播图，点击特效：伪动态</li><li>JavaScript[实际开发中，它用的最多]</li><li>VBScript</li></ul></li><li>它无法和数据库交互（数据无法持久化，用户无法交互）</li></ul></li></ul><h3 id="1-4、-动态web"><a href="#1-4、-动态web" class="headerlink" title="1.4、 动态web"></a>1.4、 动态web</h3><p>页面会动态展示，“web页面的展示效果因人而异”<br><img src="/.io//watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70-16471498189262" alt="在这里插入图片描述"><br>缺点：</p><ul><li>加入服务器的动态web资源出现了错误，我们需要重新编写我们的后台程序，重新发布；</li><li>Web页面可以动态更新，所有用户看到都不是同一个页面</li><li>它可以与数据库交互（数据持久化：注册，商品信息，用户信息………）<br><img src="/.io//image-20220313202841050.png" alt="image-20220313202841050"></li></ul><br><h2 id="2、web服务器"><a href="#2、web服务器" class="headerlink" title="2、web服务器"></a>2、web服务器</h2><h3 id="2-1、技术讲解"><a href="#2-1、技术讲解" class="headerlink" title="2.1、技术讲解"></a>2.1、技术讲解</h3><h5 id="ASP"><a href="#ASP" class="headerlink" title="ASP:"></a>ASP:</h5><ul><li>微软：国内最早流行的就是ASP；</li><li>在HTML中嵌入了VB的脚本，ASP+COM；</li><li>在ASP开发中，基本一个页面都有几干行的业务代码，页面极其换乱</li><li>维护成本高！</li><li>C#</li><li>IIS</li></ul><h5 id="php"><a href="#php" class="headerlink" title="php:"></a>php:</h5><ul><li>PHP开发速度很快，功能很强大，跨平台，代码很简单（70%，WP）</li><li>无法承载大访问量的情况（局限性）</li></ul><h5 id="jSP-Servlet"><a href="#jSP-Servlet" class="headerlink" title="jSP/Servlet:"></a>jSP/Servlet:</h5><p>B/S；浏览和服务器        C/S：客户端和服务器</p><ul><li>sun公司主推的B/S架构</li><li>基于Java语言的（所有的大公司，或者一些开源的组件，都是用Java写的）</li><li>可以承载三高问题带来的影响；</li><li>语法像ASP，ASP-&gt;JSP，加强市场强度；</li></ul><h3 id="2-2、web服务器"><a href="#2-2、web服务器" class="headerlink" title="2.2、web服务器"></a>2.2、web服务器</h3><p>服务器是一种被动的操作，<strong>用来处理用户的一些请求和给用户一些响应信息</strong></p><h5 id="lIS"><a href="#lIS" class="headerlink" title="lIS"></a>lIS</h5><ul><li>微软的；ASP, Windows中自带的</li></ul><h5 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h5><p><img src="/.io//20200423183331323.png" alt="在这里插入图片描述"></p><p>最新的Servlet 和 JSP 规范总是能在Tomcat中得到体现，因为Tomcat 技术先进、性能稳定，而且免费，因而深受lava爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web应用服务器。</p><p>Tomcat 服务器是一个免费的开放源代码的Web应用服务器，属于<strong>轻量级应用服务器</strong>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP程序的首选。对于一个Java初学web的人来说，它是最佳的选择。</p><p>Tomcat 实际上运行JSP页面和Serlet。</p><p>工作3-5年之后，可以尝试手写Tomcat服务器；</p><p>下载tomcat：</p><ol><li>安装or解压</li><li>了解配置文件及目录结构</li><li>这个东西的作用</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JavaWeb入门</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java的HashMap使用</title>
    <link href="/2022/03/21/LeetCode/Java%E7%9A%84HashMap%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/03/21/LeetCode/Java%E7%9A%84HashMap%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/">https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/</a></p><p>题意：给定一个二叉搜索树 <code>root</code> 和一个目标结果 <code>k</code>，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 <code>true</code>。</p><img src="/images/image-20220321004833521.png" alt="image-20220321004833521" style="zoom:67%;"><h4 id="1、注意HashMap作为形参的传递形式"><a href="#1、注意HashMap作为形参的传递形式" class="headerlink" title="1、注意HashMap作为形参的传递形式"></a>1、<strong>注意HashMap作为形参的传递形式</strong></h4><h4 id="2、containsKey-的使用"><a href="#2、containsKey-的使用" class="headerlink" title="2、containsKey( ) 的使用"></a>2、containsKey( ) 的使用</h4><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode a,HashMap&lt;Integer,Integer&gt; map)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(a==<span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>(map.containsKey(a.val))&#123;<br>            map.put(a.val, map.get(a.val)+<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            map.put(a.val,<span class="hljs-number">1</span>);<br>        dfs(a.left,map);<br>        dfs(a.right,map);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">findTarget</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        HashMap&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Integer,Integer&gt;();<br>        dfs(root,map);<br>        <span class="hljs-keyword">for</span> (Integer i : map.keySet()) &#123;<br>            <span class="hljs-keyword">if</span>(i==k-i &amp;&amp; map.containsKey(k-i) &amp;&amp; map.get(i)&gt;<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">if</span>(i!=k-i &amp;&amp; map.containsKey(k-i))<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>606.根据二叉树创建字符串——Java递归</title>
    <link href="/2022/03/20/LeetCode/606.%20%E6%A0%B9%E6%8D%AE%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%9B%E5%BB%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2022/03/20/LeetCode/606.%20%E6%A0%B9%E6%8D%AE%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%9B%E5%BB%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/construct-string-from-binary-tree/">https://leetcode-cn.com/problems/construct-string-from-binary-tree/</a></p><p>题意：你需要采用前序遍历的方式，将一个二叉树转换成一个由括号和整数组成的字符串。</p><p>空节点则用一对空括号 “()” 表示。而且你需要省略所有不影响字符串与原始二叉树之间的一对一映射关系的空括号对。</p><p>样例：</p><p><img src="/images/image-20220320214931421.png" alt="image-20220320214931421"></p><h4 id="Solve"><a href="#Solve" class="headerlink" title="Solve:"></a>Solve:</h4><p>我们可以使用递归的方法得到二叉树的前序遍历，并在递归时加上额外的括号。</p><p>会有以下 4 种情况：</p><ul><li><p>如果当前节点有两个孩子，那我们在递归时，需要在两个孩子的结果外都加上一层括号；</p></li><li><p>如果当前节点没有孩子，那我们不需要在节点后面加上任何括号；</p></li><li><p>如果当前节点只有左孩子，那我们在递归时，只需要在左孩子的结果外加上一层括号，而不需要给右孩子加上任何括号；</p></li><li><p>如果当前节点只有右孩子，那我们在递归时，需要先加上一层空的括号 ‘()’ 表示左孩子为空，再对右孩子进行递归，并在结果外加上一层括号。</p></li></ul><p>图片详解见：<a href="https://leetcode-cn.com/problems/construct-string-from-binary-tree/solution/gen-ju-er-cha-shu-chuang-jian-zi-fu-chua-e1af/">https://leetcode-cn.com/problems/construct-string-from-binary-tree/solution/gen-ju-er-cha-shu-chuang-jian-zi-fu-chua-e1af/</a></p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">tree2str</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.left == <span class="hljs-keyword">null</span> &amp;&amp; root.right == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> Integer.toString(root.val);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.right == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> StringBuffer().append(root.val).append(<span class="hljs-string">&quot;(&quot;</span>).append(tree2str(root.left)).append(<span class="hljs-string">&quot;)&quot;</span>).toString();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> StringBuffer().append(root.val).append(<span class="hljs-string">&quot;(&quot;</span>).append(tree2str(root.left)).append(<span class="hljs-string">&quot;)(&quot;</span>).append(tree2str(root.right)).append(<span class="hljs-string">&quot;)&quot;</span>).toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>合并多个TXT文件</title>
    <link href="/2022/03/11/%E5%B0%8FSkills/%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AATXT%E6%96%87%E4%BB%B6/"/>
    <url>/2022/03/11/%E5%B0%8FSkills/%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AATXT%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>1、将需要合并的多个TXT文件复制到同一文件夹下，按下“win+R”，输入“cmd”，点击“确定”</p><p>2、在弹出窗口中，输入文件夹所在的磁盘，以F盘为例，输入完成按下“回车”，再次输入例如“cd F：\baidu”，输入完成按下“回车”。</p><p>3、输入“type *.txt.&gt;&gt;f：\baidu\111.txt”，按下“回车”键即可。</p><p>4、此时界面下方会显示所复制的txt和合并后的txt的名称。</p>]]></content>
    
    
    <categories>
      
      <category>小Skills</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>批量修改文件名后缀</title>
    <link href="/2022/03/11/%E5%B0%8FSkills/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D%E5%90%8E%E7%BC%80/"/>
    <url>/2022/03/11/%E5%B0%8FSkills/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D%E5%90%8E%E7%BC%80/</url>
    
    <content type="html"><![CDATA[<p>如下图所示，如何将Word 97 -2003文档(*.doc)的后缀名批量更改为.docx？</p><p><img src="/images/image-20220311141728193.png" alt="image-20220311141728193"></p><br><p>在文件夹里面新建一个txt，之后输入代码ren *.doc *.docx，然后按Ctrl+S保存，随后将记事本的后缀名更改为bat，双击即可更改。</p><br><p>注意：ren后面是有空格的。</p><br><p>ren是DOS命令之一，rename的缩写，如果需要给文件重命名，就可以使用rename命令。</p><p>*表示任意字符</p>]]></content>
    
    
    <categories>
      
      <category>小Skills</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>注解与反射</title>
    <link href="/2022/03/11/java/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
    <url>/2022/03/11/java/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="1、注解"><a href="#1、注解" class="headerlink" title="1、注解"></a>1、注解</h1><ul><li>注释：comment    给人看</li><li>注解：annotation    给人和程序看</li></ul><h2 id="1-1、什么是注解"><a href="#1-1、什么是注解" class="headerlink" title="1.1、什么是注解"></a>1.1、什么是注解</h2><ul><li>Annotation是从JDK 5.0开始引入的新技术</li><li>Annotation的作用：<ul><li>不是程序本身，可以对程序作出解释。(这一点和注释(comment)没什么区别)</li><li>可以被其他程序(比如:编译器等)读取</li></ul></li><li>Annotation的格式:<ul><li>注解是以”@注释名”在代码中存在的﹐还可以添加一些参数值，例如:@SuppressWarnings(value=”unchecked”)</li></ul></li><li>Annotation在哪里使用?<ul><li>可以附加在package , class , method , field等上面，相当于给他们添加了额外的辅助信息</li><li>我们可以通过反射机制编程实现对这些元数据的访问</li></ul></li></ul><h2 id="1-2、内置注解"><a href="#1-2、内置注解" class="headerlink" title="1.2、内置注解"></a>1.2、内置注解</h2><ul><li><p>@Override:定义在java.lang.Override中,此注释只适用于修辞方法，表示一个方法声明打算重写超类中的另一个方法声明.</p></li><li><p>@Deprecated :定义在java.lang.Deprecated中,此注释可以用于修辞方法，属性、类，表示不鼓励程序员使用这样的元素，通常是因为它很危险或者存在更好的选择。</p></li><li><p>@suppressWarnings∶</p><p>定义在java.lang.SuppressWarnings中，用来抑制编译时的警告信息。与前两个注释有所不同，你需要添加一个参数才能正确使用，这些参数都是已经定义好了的，我们选择性的使用就好了。</p><ul><li>@SuppressWarnings(“all”)</li><li>@SuppressWarnings(“unchecked”)</li><li>@SuppressWarnings(value={“unchecked” , “deprecation”})</li><li>等等…..</li></ul></li></ul><h2 id="1-3、元注解"><a href="#1-3、元注解" class="headerlink" title="1.3、元注解"></a>1.3、元注解</h2><ul><li><p><strong>元注解</strong>的作用就是负责<strong>注解其他注解</strong>，Java定义了4个标准的meta-annotation类型，他们被用来提供对其他annotation类型作说明。</p></li><li><p>这些类型和它们所支持的类在java.lang.annotation包中可以找到。(@Target , @Retention ,@Documented , @Inherited )</p><ul><li><p>@Target：用于<strong>描述注解的使用范围</strong> (即:<strong>被描述的<u>注解可以用在什么地方</u></strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Target &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns an array of the kinds of elements an annotation type</span><br><span class="hljs-comment">     * can be applied to.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> an array of the kinds of elements an annotation type</span><br><span class="hljs-comment">     * can be applied to</span><br><span class="hljs-comment">     */</span><br>    ElementType[] value();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>@Retention：表示需要在<strong>什么级别保存该注释信息</strong>，用于<u>描述注解在什么地方有效</u></p><ul><li>(SOURCE&lt; CLASS&lt; RUNTIME)</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Retention &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the retention policy.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the retention policy</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">RetentionPolicy <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>@Document：说明<strong>该注解将被包含在javadoc中</strong></li><li>@Inherited：说明<strong>子类可以继承父类中的该注解</strong></li></ul></li></ul><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.nty.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-comment">//测试元注解</span><br><span class="hljs-meta">@MyAnnotation</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>&#123;<br>    <span class="hljs-meta">@MyAnnotation</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//定义一个注解</span><br><span class="hljs-comment">//Target:表示注解可以用在哪些地方</span><br><span class="hljs-comment">//Retention:表示注解在哪些地方有效 runtime&gt;class&gt;sources</span><br><span class="hljs-comment">//Documented:表示是否将注解生成在Javadoc中</span><br><span class="hljs-comment">//Inherited:表示子类可以继承父类</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(value = RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(value = &#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@interface</span> MyAnnotation &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>从 <strong>Java 7</strong> 开始，额外添加了 3 个注解：</p><ul><li>@SafeVarargs： Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</li><li>@FunctionalInterface： Java 8 开始支持，标识一个匿名函数或函数式接口。</li><li>@Repeatable： Java 8 开始支持，标识某注解可以在同一个声明上使用多次。</li></ul><h2 id="1-4、自定义注解"><a href="#1-4、自定义注解" class="headerlink" title="1.4、自定义注解"></a>1.4、自定义注解</h2><p>使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口。</p><p><strong>分析:</strong></p><ul><li>interface用来声明一个注解，格式:public @interface注解名{定义内容}</li><li>其中的每一个方法实际上是声明了一个配置参数</li><li>方法的名称就是参数的名称</li><li>返回值类型就是参数的类型（返回值只能是基本类型,Class , String , enum ).√可以通过default来声明参数的默认值</li><li>如果只有一个参数成员，一般参数名为value</li><li>注解元素必须要有值，我们定义注解元素时,经常使用空字符串,0作为默认值</li></ul><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.nty.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-comment">//自定义注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test02</span> </span>&#123;<br><br>    <span class="hljs-comment">//注解参数可以显示赋值，如果没有默认值，就必须显示赋值</span><br>    <span class="hljs-meta">@MyAnnotation2(name = &quot;nty&quot;, schools = &#123;&quot;南师&quot;, &quot;苏大&quot;&#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//当注解中的参数只有一个值时，定义参数为value，在使用该注解时，可以省略value</span><br>    <span class="hljs-meta">@MyAnnotation3(&quot;nty&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(value = &#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@interface</span> MyAnnotation2 &#123;<br><br>    <span class="hljs-comment">//注解参数：类型 + 变量名();</span><br>    <span class="hljs-comment">//无默认值时必须写参数</span><br>    <span class="hljs-comment">//有默认值时，可以不写参数</span><br>    <span class="hljs-function">String <span class="hljs-title">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">age</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> 0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">id</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> -1</span>;<span class="hljs-comment">//如果默认值为-1，代表不存在</span><br><br>    String[] schools() <span class="hljs-keyword">default</span> &#123;<span class="hljs-string">&quot;北大&quot;</span>, <span class="hljs-string">&quot;清华&quot;</span>&#125;;<br>&#125;<br><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(value = &#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@interface</span> MyAnnotation3 &#123;<br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2、反射机制"><a href="#2、反射机制" class="headerlink" title="2、反射机制"></a>2、反射机制</h1><p><strong>主要内容：</strong></p><ul><li>Java反射机制概述</li><li>理解Class类并获取Class实例</li><li>类的加载与ClassLoader</li><li>创建运行时类的对象</li><li>获取运行时类的完整结构</li><li>调用运行时类的指定结构</li></ul><h2 id="2-1、Java反射机制概述"><a href="#2-1、Java反射机制概述" class="headerlink" title="2.1、Java反射机制概述"></a>2.1、Java反射机制概述</h2><p>Summary：</p><p><strong>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象(<u>一个类只有一个Class对象</u>)，<u>这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构</u>。</strong>这个对象就像一面镜子， 透过这个镜子看到类的结构，所以,我们形象的称之为: <strong>反射</strong>。</p><p><strong>1、静态VS动态语言</strong></p><p><strong>动态语言：</strong></p><ul><li>是一类在运行时可以改变其结构的语言:例如新的函数、对象、甚至代码可以被<br>引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代<br>码可以根据某些条件改变自身结构。</li><li>主要动态语言: Object-C、 C#、JavaScript、 PHP、 Python等。</li></ul><p><strong>静态语言：</strong></p><ul><li>与动态语言相对应的，<strong>运行时结构不可变的语言就是静态语言</strong>。如Java、 C、C++。</li><li>Java不是动态语言，但Java可以称之为**”准动态语言”<strong>。即Java有一定的动态性,<br>我们可以利用</strong>反射机制获得类似动态语言的特性**。Java的动态性让编程的时候更<br>加灵活!</li></ul><p><strong>2、Java Reflection</strong></p><ul><li>Reflection (反射)是Java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API<strong>取得任何类的所有内部信息，并能直接操作任意对象的内部属性及方法。</strong></li></ul><blockquote><p>Class C = Class forName(“java.lang.String”)</p></blockquote><p><strong>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象(<u>一个类只有一个Class对象</u>)，<u>这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构</u>。</strong>这个对象就像一面镜子， 透过这个镜子看到类的结构，所以,我们形象的称之为: <strong>反射</strong>。</p><p><img src="/images/image-20220310090924864.png" alt="image-20220310090924864"></p><p><img src="/images/image-20220309205728679.png" alt="image-20220309205728679"></p><p><img src="/images/format,png.png" alt="image-20200804161913264"></p><img src="/images/image-20220309114139264.png" alt="image-20220309114139264" style="zoom:67%;"><p><strong>3、Java反射机制研究及应用</strong></p><p><strong>Java反射机制提供的功能</strong></p><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成动态代理</li><li>。。。。</li></ul><p><strong>4、Java反射优点和缺点</strong></p><p><strong>优点</strong>:</p><ul><li>可以实现动态创建对象和编译，体现出很大的灵活性</li></ul><p><strong>缺点:</strong></p><ul><li>对性能有影响，使用反射基本上是一种<strong>解释操作</strong>，我们可以告诉JVM,我们希望做什么并且它满足我们的要求。这类操作总是<strong>慢于直接执行相同的操作</strong>。</li></ul><p><strong>5、反射相关的API</strong></p><ul><li>java.lang.Class ：代表一个类</li><li>java.lang.reflect.Method ：代表类的方法</li><li>java.reflect.Field ：代表类的成员变量</li><li>java.lang.reflect.Constructor ：代表类的构造器</li><li>…</li></ul><p><strong>注：</strong></p><p><strong>每个类都是一个对象（Class类的对象），且一个类在内存中只有一个Class对象</strong></p><p><u><strong>一个类被加载后，类的整个结构都会被封装在Class对象中</strong></u></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">//什么叫反射</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">bbb</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br><br>        <span class="hljs-comment">//通过反射获取类的class对象</span><br>        Class aClass = Class.forName(<span class="hljs-string">&quot;test.User&quot;</span>);<br><br>        System.out.println(aClass);<br><br>        System.out.println(aClass.getClass());<br><br>        User use = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;111&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>        System.out.println(use.getClass());<br><br>        <span class="hljs-comment">//结论：一个类在内存中只有一个Class对象</span><br>        <span class="hljs-comment">//一个类被加载后，类的整个结构都会被封装在Class对象中</span><br>        Class c2 = Class.forName(<span class="hljs-string">&quot;test.User&quot;</span>);<br>        Class c3 = Class.forName(<span class="hljs-string">&quot;test.User&quot;</span>);<br>        Class c4 = Class.forName(<span class="hljs-string">&quot;test.User&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;c2:&quot;</span> + c2.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;c3:&quot;</span> + c3.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;c3:&quot;</span> + c3.hashCode());<br><br>        <span class="hljs-comment">/*结果：</span><br><span class="hljs-comment">        c2:460141958</span><br><span class="hljs-comment">        c3:460141958</span><br><span class="hljs-comment">        c3:460141958</span><br><span class="hljs-comment">        */</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//实体类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">Output:</span><br><br><span class="hljs-keyword">class</span> test.User<br><span class="hljs-keyword">class</span> java.lang.<span class="hljs-keyword">Class</span><br><span class="hljs-keyword">class</span> test.User<br><span class="hljs-symbol">c2:</span><span class="hljs-number">1134712904</span><br><span class="hljs-symbol">c3:</span><span class="hljs-number">1134712904</span><br><span class="hljs-symbol">c3:</span><span class="hljs-number">1134712904</span><br></code></pre></td></tr></table></figure><h2 id="2-2、理解Class类并获取Class实例"><a href="#2-2、理解Class类并获取Class实例" class="headerlink" title="2.2、理解Class类并获取Class实例"></a>2.2、理解Class类并获取Class实例</h2><p><strong>1、Class类</strong></p><p>在Object类中定义了以下的方法，此方法将被所有子类继承。</p><blockquote><p>public final Class getClass()</p></blockquote><p>以上的方法返回值的类型是一个Class类，此类是Java反射的源头，实际上所谓反射从程序的运行结果来看也很好理解，</p><p>即: <strong>可以通过对象反射求出类的名称</strong>。</p><p>对象照镜子后可以得到的信息:某个类的属性、方法和构造器、某个类到底实现了哪些接口。</p><p>对于每个类而言，JRE都为其保留一个<strong>不变的Class类型的对象</strong>。一个Class对象包含了特定某个结构</p><p>**(class/interface/enum/annotation/primitive type/void/[])**的有关信息。</p><p><strong>Class本身也是一个类：</strong></p><ul><li>Class 对象只能<strong>由系统建立对象</strong></li><li>一个加载的类在JVM中<strong>只会有一个Class实例</strong></li><li>一个Class对象对应的是一 个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个Class实例所生成</li><li>通过Class可以完整地得到一个类中的所有被加载的结构</li><li>Class类 是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象</li></ul><p><strong>2、Class类的常用方法</strong></p><p><img src="/images/format,png.png" alt="image-20200804163721938"></p><p><strong>3、获取Class类的实例</strong></p><p><strong>3.1 class类的创建方式</strong></p><p>a) 若<strong>已知具体的类</strong>,通过类的class属性获取，该方法最为安全可靠，程序性能最高。</p><blockquote><p>Class clazz = Person.class;</p></blockquote><p>b) 已知某个<strong>类的实例</strong>， 调用该实例的getClass()方法获取Class对象</p><blockquote><p>Class clazz = person.getClass();</p></blockquote><p>c) 已知一 个类的<strong>全类名</strong>，且该类在类路径下，可通过Class类的静态方法forName()获取,可能抛出ClassNotFoundException</p><blockquote><p>Class clazz = Class.forName(“demo01.Student”);</p></blockquote><p>d) 内置基本数据类型可以直接用<strong>类名.Type</strong></p><p>e) 还可以利用ClassLoader我们之后讲解</p><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">bbb</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        Person person = <span class="hljs-keyword">new</span> Student();<br>        System.out.println(<span class="hljs-string">&quot;这个人是：&quot;</span> + person.name);<span class="hljs-comment">//这个人是：学生</span><br><br>        <span class="hljs-comment">//方式一：通过对象获得</span><br>        Class c1 = person.getClass();<br>        System.out.println(c1.hashCode());<span class="hljs-comment">//21685669</span><br>        System.out.println(c1);<br><br>        <span class="hljs-comment">//方式二：ClassForName获得</span><br>        Class c2 = Class.forName(<span class="hljs-string">&quot;test.Student&quot;</span>);<br>        System.out.println(c2.hashCode());<span class="hljs-comment">//21685669</span><br><br>        <span class="hljs-comment">//通过类名.class</span><br>        Class c3 = Student.class;<br>        System.out.println(c3.hashCode());<span class="hljs-comment">//21685669</span><br><br>        <span class="hljs-comment">//方式四：基本内置类型的包装类都有一个Type属性</span><br>        Class&lt;Integer&gt; c4 = Integer.TYPE;<br>        System.out.println(c4);<span class="hljs-comment">//int</span><br><br>        <span class="hljs-comment">//获得父类类型</span><br>        Class c5 = c1.getSuperclass();<br>        System.out.println(c5);<span class="hljs-comment">//class com.nty.reflection.Person</span><br><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = <span class="hljs-string">&quot;学生&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = <span class="hljs-string">&quot;老师&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stata">Output:<br><br>这个人是：学生<br>985922955<br><span class="hljs-keyword">class</span> <span class="hljs-keyword">test</span>.Student<br>985922955<br>985922955<br>int<br><span class="hljs-keyword">class</span> <span class="hljs-keyword">test</span>.Person<br></code></pre></td></tr></table></figure><p><strong>3.2 那些类型可以有Class对象？</strong></p><ul><li>class：外部类，成员（成员内部类，静态内部类），局部内部类，匿名内部类</li><li>interface：接口</li><li>[]：数组</li><li>enum：枚举</li><li>annotation：注解@interface</li><li>primitive type：基本数据类型</li><li>void</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.nty.reflection;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><br><span class="hljs-comment">//所有类型的class</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Class c1 = Object.class;<span class="hljs-comment">//类  class java.lang.Object</span><br>        Class c2 = String[].class;<span class="hljs-comment">//一维数组  class [Ljava.lang.String;</span><br>        Class c3 = <span class="hljs-keyword">int</span>[][].class;<span class="hljs-comment">//二维数组  class [[I</span><br>        Class c4 = Comparable.class;<span class="hljs-comment">//接口  interface java.lang.Comparable</span><br>        Class c5 = Override.class;<span class="hljs-comment">//注解  interface java.lang.Override</span><br>        Class c6 = Integer.class;<span class="hljs-comment">//基本数据类型  class java.lang.Integer</span><br>        Class c7 = <span class="hljs-keyword">void</span>.class;<span class="hljs-comment">//void  void</span><br>        Class c8 = Class.class;<span class="hljs-comment">//Class本身   class java.lang.Class</span><br>        Class c9 = ElementType.class;<span class="hljs-comment">//枚举  class java.lang.annotation.ElementType</span><br><br>        System.out.println(c1);<br>        System.out.println(c2);<br>        System.out.println(c3);<br>        System.out.println(c4);<br>        System.out.println(c5);<br>        System.out.println(c6);<br>        System.out.println(c7);<br>        System.out.println(c8);<br>        System.out.println(c9);<br><br>        <span class="hljs-comment">//只要元素类型与维度一样，class类型就一样</span><br><br>        <span class="hljs-keyword">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">100</span>];<br>        System.out.println(a.getClass().hashCode());     <span class="hljs-comment">//460141958</span><br>        System.out.println(b.getClass().hashCode());     <span class="hljs-comment">//460141958</span><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注：只要元素类型与维度一样，class类型就一样</strong></p><p><strong>3.3 java 内存分析</strong></p><p><img src="/images/image-20220310085654670.png" alt="image-20220310085654670"></p><h2 id="2-3、类的加载与ClassLoader"><a href="#2-3、类的加载与ClassLoader" class="headerlink" title="2.3、类的加载与ClassLoader"></a>2.3、类的加载与ClassLoader</h2><p><strong>1、了解：类的加载过程</strong></p><p>当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对该类进行初始化。</p><p><img src="/images/image-20220310085729619.png" alt="image-20220310085729619"></p><p><img src="/images/image-20220310090759477.png" alt="image-20220310090759477"></p><p><strong>2、类加载与ClassLoader的理解</strong></p><ul><li><p>1、加载：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结  构,然后<strong>生成一个代表这个类的java.lang.Class对象</strong>.</p></li><li><p>2、链接:</p><p>将Java类的二进制代码合并到JVM的运行状态之中的过程。</p><ul><li>验证:确保加载的类信息符合JVM规范，没有安全方面的问题</li><li>准备:正式为类变量(static) 分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配</li><li>解析:虚拟机常量池内的符号引用(常量名)替换为直接引用(地址)的过程</li></ul></li><li><p>3、初始化:</p><ul><li>执行类构造器clinit&gt; ()方法的过程，类构造器&lt; clinit&gt; ()方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。(类构造 器是构造类信息的，不是构造该类对象的构造器)。</li><li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li><li>虚拟机会保证一个类的&lt; clinit&gt; ()方法在多线程环境中被正确加锁和同步。</li></ul></li></ul><p><strong>3、什么时候会发生类初始化</strong></p><ul><li><p>类的主动引用(一定会发生类的初始化)</p><ul><li>当虚拟机启动，<strong>先初始化main方法所在的类</strong></li><li>new一个类的对象</li><li>调用类的静态成员(除了final常量)和静态方法</li><li>使用java.lang.reflect包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</li></ul></li><li><p>类的被动引用(不会发生类的初始化)</p><ul><li><p>当访问一个静态域时，只有真正声明这个域的类才会被初始化。如:当通过<strong>子类引用父类的静态变量，不会导致子类初始化</strong></p><ul><li>```java<br>//不会对子类产生初始化：<br>//通过子类引用父类的静态变量，不会导致子类初始化**<br>System.out.println(Son.b);main 类被加载<br>父类被初始化<br>2<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- 通过**数组定义类引用，不会触发此类的初始化**<br><br>  - ```java<br>    //<span class="hljs-number">2</span>、数组定义类引用，不会触发此类的初始化<br>    Son[] arr  = <span class="hljs-keyword">new</span> Son[<span class="hljs-number">5</span>]<span class="hljs-comment">;</span><br>    <br>    main 类被加载<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>引用常量不会触发此类的初始化</strong>(常量在链接阶段就存入调用类的常量池中了)</p></li></ul></li></ul><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.nty.reflection;<br><br><span class="hljs-comment">//测试类什么时候会初始化</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test05</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main 类被加载&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <br>        <span class="hljs-comment">//1、主动引用</span><br>        <span class="hljs-comment">//Son son = new Son();</span><br><br>        <span class="hljs-comment">//2、通过反射产生主动引用</span><br>        Class.forName(<span class="hljs-string">&quot;com.nty.reflection.Son&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> b = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;父类被初始化&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;子类被加载&quot;</span>);<br>        m = <span class="hljs-number">300</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* main 类被加载</span><br><span class="hljs-comment">父类被初始化</span><br><span class="hljs-comment">子类被加载</span><br><span class="hljs-comment">* */</span><br></code></pre></td></tr></table></figure><p><strong>4、类加载器的作用</strong></p><ul><li><strong>类加载的作用：</strong>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象， 作为方法区中类数据的访问入口。</li><li><strong>类缓存:标准的JavaSE类加载器可以按要求查找类</strong>，但一旦某个类被加载到类加载器中，它将维<br>持加载(缓存) 一段时间。不过<strong>JVM垃圾回收机制</strong>可以回收这些Class对象</li></ul><p><img src="/images/image-20220310092206516.png" alt="image-20220310092206516"></p><ul><li>类加载器作用是用来把类(class)装载进内存的，JVM规范定义了如下类型的类的加载器。</li></ul><p><strong>5、类加载器</strong></p><p><img src="/images/image-20220310092258374.png" alt="image-20220310092258374"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.nty.reflection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test06</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br><br>        <span class="hljs-comment">//获取系统的类加载器</span><br>        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();<br>        System.out.println(systemClassLoader);<span class="hljs-comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><br>        <span class="hljs-comment">//获取系统加载器的父类加载器---&gt;扩展类加载器</span><br>        ClassLoader parent = systemClassLoader.getParent();<br>        System.out.println(parent);<span class="hljs-comment">//sun.misc.Launcher$ExtClassLoader@14ae5a5</span><br><br>        <span class="hljs-comment">//获取扩展类加载器的父类加载器--&gt;根加载器（用C/C++写的)  获取不到</span><br>        ClassLoader parent1 = parent.getParent();<br>        System.out.println(parent1);<span class="hljs-comment">//null</span><br><br>        <span class="hljs-comment">//测试当前类是哪个类加载器加载的</span><br>        ClassLoader classLoader = Class.forName(<span class="hljs-string">&quot;com.nty.reflection.Test06&quot;</span>).getClassLoader();<br>        System.out.println(classLoader);<span class="hljs-comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><br>        <span class="hljs-comment">//测试JDK内部类谁加载的---&gt;是由根加载器加载的，所以打印不出来</span><br>        ClassLoader classLoader1 = Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>).getClassLoader();<br>        System.out.println(classLoader1);<span class="hljs-comment">//null</span><br><br>        <span class="hljs-comment">//获取系统类加载器可以加载的路径</span><br>        System.out.println(System.getProperty(<span class="hljs-string">&quot;java.class.path&quot;</span>));<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\charsets.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\deploy.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\ext\access-bridge-64.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\ext\cldrdata.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\ext\dnsns.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\ext\jaccess.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\ext\jfxrt.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\ext\localedata.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\ext\nashorn.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\ext\sunec.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\ext\sunjce_provider.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\ext\sunmscapi.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\ext\sunpkcs11.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\ext\zipfs.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\javaws.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\jce.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\jfr.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\jfxswt.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\jsse.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\management-agent.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\plugin.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\resources.jar;</span><br><span class="hljs-comment">        C:\Program Files\Java\jdk1.8.0_211\jre\lib\rt.jar;</span><br><span class="hljs-comment">        D:\code\JavaProject\annotation\out\production\annotation;</span><br><span class="hljs-comment">        D:\IntelliJ IDEA 2020.3.2\lib\idea_rt.jar</span><br><span class="hljs-comment">        */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4、获取运行时类的完整结构"><a href="#2-4、获取运行时类的完整结构" class="headerlink" title="2.4、获取运行时类的完整结构"></a>2.4、获取运行时类的完整结构</h2><p>通过反射获取运行时类的完整结构：</p><p>Field、Method、Constructor、Superclass、Interface、Annotation</p><ul><li>实现的全部接口</li><li>所继承的父类</li><li>全部的构造器</li><li>全部的方法</li><li>全部的Field</li><li>注解</li><li>。。。。</li></ul><p><strong>相关接口：</strong></p><ul><li>获得类的名字<ul><li>c1.getName()</li><li>c1.getSimpleName()</li></ul></li><li>获得类的属性<ul><li>获得public的属性    c1.getFields()</li><li>获得所有的属性       c1.getDeclaredFields()</li><li>获得指定的属性        c1.getDeclaredField(“name”)</li></ul></li><li>获得类的方法<ul><li>c1.getMethods()</li><li>c1.getDeclaredMethods()</li><li>c1.getMethod(“getName”, null)</li></ul></li><li>获取指定的构造器<ul><li>c1.getConstructors()</li><li>c1.getDeclaredConstructor(String.class, int.class, int.class)</li></ul></li></ul><p><strong>具体案例如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">bbb</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException </span>&#123;<br>        Class c1 = Class.forName(<span class="hljs-string">&quot;test.User&quot;</span>);<br><br>        <span class="hljs-comment">//1、获得类的名字---&gt;获得包名+类名</span><br>        System.out.println(c1.getName());<span class="hljs-comment">//test.User</span><br><br>        <span class="hljs-comment">//2、获得类的简单名字--&gt;获得类名</span><br>        System.out.println(c1.getSimpleName());<span class="hljs-comment">//User</span><br><br>        System.out.println(<span class="hljs-string">&quot;=======================&quot;</span>);<br><br>        <span class="hljs-comment">//3、获得类的属性</span><br>        <span class="hljs-comment">//3.1 获得public的属性</span><br>        Field[] fields = c1.getFields();<span class="hljs-comment">//只能找到public的属性</span><br><br>        <span class="hljs-comment">//3.2  能够找到所有的属性</span><br>        Field[] fields1 = c1.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field field : fields1) &#123;<br>            System.out.println(field);<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * private java.lang.String com.nty.reflection.User.name</span><br><span class="hljs-comment">         * private int com.nty.reflection.User.id</span><br><span class="hljs-comment">         * private int com.nty.reflection.User.age</span><br><span class="hljs-comment">         * private java.lang.String com.nty.reflection.User.name</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">//3.3、获得指定的属性</span><br>        Field name = c1.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(name);<span class="hljs-comment">//private java.lang.String test.User.name</span><br><br>        <span class="hljs-comment">//4、获得类的方法</span><br>        System.out.println(<span class="hljs-string">&quot;====================================&quot;</span>);<br>        Method[] methods = c1.getMethods();<span class="hljs-comment">//获得本类及其父类的全部public方法</span><br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            System.out.println(<span class="hljs-string">&quot;c1.getMethods():&quot;</span> + method);<br>        &#125;<br>        Method[] methods1 = c1.getDeclaredMethods();<span class="hljs-comment">//获得本类的全部方法</span><br>        <span class="hljs-keyword">for</span> (Method method : methods1) &#123;<br>            System.out.println(<span class="hljs-string">&quot;c1.getDeclaredMethods():&quot;</span> + method);<br>        &#125;<br>        <span class="hljs-comment">//获取指定的方法   重载，所以要添加参数</span><br>        Method getName = c1.getMethod(<span class="hljs-string">&quot;getName&quot;</span>, <span class="hljs-keyword">null</span>);<br>        System.out.println(getName);<span class="hljs-comment">//public java.lang.String com.nty.reflection.User.getName()</span><br>        Method setName = c1.getMethod(<span class="hljs-string">&quot;setName&quot;</span>, String.class);<br>        System.out.println(setName);<span class="hljs-comment">//public void com.nty.reflection.User.setName(java.lang.String)</span><br><br>        <span class="hljs-comment">//5、获取指定的构造器</span><br>        System.out.println(<span class="hljs-string">&quot;=================================&quot;</span>);<br>        Constructor[] constructors = c1.getConstructors();<span class="hljs-comment">//获取public</span><br>        <span class="hljs-keyword">for</span> (Constructor constructor : constructors) &#123;<br>            System.out.println(<span class="hljs-string">&quot;c1.getConstructors():&quot;</span> + constructor);<br>        &#125;<br>        Constructor[] constructors1 = c1.getDeclaredConstructors();<span class="hljs-comment">//获取所有的构造器</span><br>        <span class="hljs-keyword">for</span> (Constructor constructor : constructors1) &#123;<br>            System.out.println(<span class="hljs-string">&quot;c1.getDeclaredConstructors():&quot;</span> + constructor);<br>        &#125;<br><br>        <span class="hljs-comment">//获取指定的构造器重载，所以要添加参数</span><br>        Constructor declaredConstructor = c1.getDeclaredConstructor(String.class, <span class="hljs-keyword">int</span>.class, <span class="hljs-keyword">int</span>.class);<br>        System.out.println(<span class="hljs-string">&quot;获取指定的构造器&quot;</span> + declaredConstructor);<br>        <span class="hljs-comment">//获取指定的构造器public com.nty.reflection.User(java.lang.String,int,int)</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Output:<br><br>test.User<br>User<br>=======================<br><span class="hljs-keyword">private</span> java.lang.String test.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">User</span>.</span></span>name<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> test.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">User</span>.</span></span>id<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> test.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">User</span>.</span></span>age<br><span class="hljs-keyword">private</span> java.lang.String test.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">User</span>.</span></span>name<br>====================================<br>c1.get<span class="hljs-constructor">Methods()</span>:public java.lang.String test.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">User</span>.</span></span>get<span class="hljs-constructor">Name()</span><br>c1.get<span class="hljs-constructor">Methods()</span>:public void test.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">User</span>.</span></span>set<span class="hljs-constructor">Name(<span class="hljs-params">java</span>.<span class="hljs-params">lang</span>.String)</span><br>c1.get<span class="hljs-constructor">Methods()</span>:public final native void java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>wait(long) throws java.lang.InterruptedException<br>c1.get<span class="hljs-constructor">Methods()</span>:public final void java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>wait(long,<span class="hljs-built_in">int</span>) throws java.lang.InterruptedException<br>c1.get<span class="hljs-constructor">Methods()</span>:public final void java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>wait<span class="hljs-literal">()</span> throws java.lang.InterruptedException<br>c1.get<span class="hljs-constructor">Methods()</span>:public boolean java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>equals(java.lang.Object)<br>c1.get<span class="hljs-constructor">Methods()</span>:public java.lang.String java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span><br>c1.get<span class="hljs-constructor">Methods()</span>:public native <span class="hljs-built_in">int</span> java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>hash<span class="hljs-constructor">Code()</span><br>c1.get<span class="hljs-constructor">Methods()</span>:public final native java.lang.Class java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>get<span class="hljs-constructor">Class()</span><br>c1.get<span class="hljs-constructor">Methods()</span>:public final native void java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>notify<span class="hljs-literal">()</span><br>c1.get<span class="hljs-constructor">Methods()</span>:public final native void java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>notify<span class="hljs-constructor">All()</span><br>c1.get<span class="hljs-constructor">DeclaredMethods()</span>:public java.lang.String test.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">User</span>.</span></span>get<span class="hljs-constructor">Name()</span><br>c1.get<span class="hljs-constructor">DeclaredMethods()</span>:public void test.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">User</span>.</span></span>set<span class="hljs-constructor">Name(<span class="hljs-params">java</span>.<span class="hljs-params">lang</span>.String)</span><br>public java.lang.String test.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">User</span>.</span></span>get<span class="hljs-constructor">Name()</span><br>public void test.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">User</span>.</span></span>set<span class="hljs-constructor">Name(<span class="hljs-params">java</span>.<span class="hljs-params">lang</span>.String)</span><br>=================================<br>c1.get<span class="hljs-constructor">Constructors()</span>:public test.<span class="hljs-constructor">User()</span><br>c1.get<span class="hljs-constructor">Constructors()</span>:public test.<span class="hljs-constructor">User(<span class="hljs-params">java</span>.<span class="hljs-params">lang</span>.String,<span class="hljs-params">int</span>,<span class="hljs-params">int</span>)</span><br>c1.get<span class="hljs-constructor">DeclaredConstructors()</span>:public test.<span class="hljs-constructor">User()</span><br>c1.get<span class="hljs-constructor">DeclaredConstructors()</span>:public test.<span class="hljs-constructor">User(<span class="hljs-params">java</span>.<span class="hljs-params">lang</span>.String,<span class="hljs-params">int</span>,<span class="hljs-params">int</span>)</span><br>获取指定的构造器public test.<span class="hljs-constructor">User(<span class="hljs-params">java</span>.<span class="hljs-params">lang</span>.String,<span class="hljs-params">int</span>,<span class="hljs-params">int</span>)</span><br></code></pre></td></tr></table></figure><h2 id="2-5、创建运行时类的对象"><a href="#2-5、创建运行时类的对象" class="headerlink" title="2.5、创建运行时类的对象"></a>2.5、创建运行时类的对象</h2><h4 id="创建类的对象-——-newInstance-方法"><a href="#创建类的对象-——-newInstance-方法" class="headerlink" title="**创建类的对象 **—— **newInstance()**方法"></a>**创建类的对象 **—— **newInstance()**方法</h4><p>1、有无参的构造器：</p><p>​        调用Class对象的**newInstance()**方法</p><ul><li>类必须有一个无参数的构造器</li><li>类的构造器的访问权限需要足够</li></ul><p>2、没有无参的构造器：</p><ul><li><p>只要在操作的时候明确的调用类中的构造器，并将参数传递进去之后，才可以实例化操作</p><p><strong>步骤如下:</strong></p></li><li><p>通过Class类的<strong>getDeclaredConstructor</strong>(Class … parameterTypes)取得本类的指定形参类型的构造器</p></li><li><p>向构造器的形参中传递一个对象数组进去， 里面包含了构造器中所需的各个参数。</p></li><li><p>通过Constructor实例化对象</p></li></ul><h4 id="调用指定的方法-——-getMethod-invoke"><a href="#调用指定的方法-——-getMethod-invoke" class="headerlink" title="**调用指定的方法 **—— getMethod + invoke"></a>**调用指定的方法 **—— getMethod + invoke</h4><ul><li>通过反射，调用类中的方法，通过Method类完成。</li><li>①通过Class类的<strong>getMethod</strong>(String name,Clas..parameterTypes)方法取得一个Method对象，并设置此方法操作时所需要的参数类型。</li><li>②之后使用Object <strong>invoke</strong>(Object obj, Object[] args)进行调用，并向方法中传递要设置的obj对象的参数信息。</li></ul><p><img src="/images/image-20220310232339046.png" alt="image-20220310232339046"></p><ul><li>Object invoke(Object obj, Object … args)<ul><li>Object 对应原方法的返回值,若原方法无返回值，此时返回null</li><li>若原方法若为静态方法，此时形参可为null</li><li>若原方法形参列表为空，则Object[] args为null</li><li>若原方法声明为<strong>private</strong>，则需要在调用此invoke()方法前，显式调用方法对象的<strong>setAccessible(true) （关闭访问安全检查）</strong>方法，将可访问private的方法。</li></ul></li></ul><ul><li>setAccessible()<ul><li>Method 和 Field、Constructor对象都有 setAccessible()方法</li><li>setAccessible作用是启动和禁用访问安全检查的开关</li><li>参数值为true则指示反射的对象在使用时应该取消<strong>Java语言访问检查</strong></li><li>提高反射的效率。如果代码中必须用反射，而该句代码需要频繁的被调用，那么请设置为true</li><li>使得原本无法访问的私有成员也可以访问</li><li>参数值为false则指示反射的对象应该实施Java语言访问检查</li></ul></li></ul><h4 id="操作属性-——-Field"><a href="#操作属性-——-Field" class="headerlink" title="**操作属性 **—— Field"></a>**操作属性 **—— Field</h4><p><strong>案例：</strong></p><ul><li>构造对象</li><li>调用方法</li><li>操作属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.nty.reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test08</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException, InvocationTargetException </span>&#123;<br>        <span class="hljs-comment">//获得Class对象</span><br>        Class c1 = Class.forName(<span class="hljs-string">&quot;com.nty.reflection.User&quot;</span>);<br><br>        <span class="hljs-comment">//1、创建对象：</span><br>        <span class="hljs-comment">//1.1 通过newInstance（）构造一个对象</span><br>        User user1 = (User) c1.newInstance();<span class="hljs-comment">//实质上是调用的无参构造</span><br>        System.out.println(user1);<span class="hljs-comment">//User&#123;name=&#x27;null&#x27;, id=0, age=0&#125;</span><br><br>        <span class="hljs-comment">//1.2 通过构造器创建</span><br>        Constructor constructor = c1.getDeclaredConstructor(String.class, <span class="hljs-keyword">int</span>.class, <span class="hljs-keyword">int</span>.class);<br>        User user2 = (User) constructor.newInstance(<span class="hljs-string">&quot;nty&quot;</span>, <span class="hljs-number">001</span>, <span class="hljs-number">18</span>);<br>        System.out.println(user2);<span class="hljs-comment">//User&#123;name=&#x27;nty&#x27;, id=1, age=18&#125;</span><br><br>        <span class="hljs-comment">//2、通过反射调用普通方法</span><br>        System.out.println(<span class="hljs-string">&quot;=============================================&quot;</span>);<br>        <span class="hljs-comment">//创建一个对象</span><br>        User user3 = (User) c1.newInstance();<br>        <span class="hljs-comment">//通过反射获取一个方法</span><br>        Method setName = c1.getDeclaredMethod(<span class="hljs-string">&quot;setName&quot;</span>, String.class);<br>        <span class="hljs-comment">//invoke：激活 、唤醒</span><br>        <span class="hljs-comment">//参数（对象，&quot;方法的值&quot;）</span><br>        setName.invoke(user3, <span class="hljs-string">&quot;China&quot;</span>);<br>        System.out.println(user3.getName());<span class="hljs-comment">//China</span><br><br>        <span class="hljs-comment">//3、通过反射操作属性</span><br>        System.out.println(<span class="hljs-string">&quot;=============================================&quot;</span>);<br>        User user4 = (User) c1.newInstance();<br>        Field name = c1.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br><br>        <span class="hljs-comment">//不能直接操作私有属性，我们需要关闭程序的安全监测，通过：name.setAccessible(true);</span><br>        name.setAccessible(<span class="hljs-keyword">true</span>);<br>        name.set(user4, <span class="hljs-string">&quot;nty&quot;</span>);<br>        System.out.println(user4.getName());<span class="hljs-comment">//nty</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>性能测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.nty.reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test09</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException </span>&#123;<br>        test01();<br>        test02();<br>        test03();<br>    &#125;<br><br>    <span class="hljs-comment">//普通方法调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        <span class="hljs-keyword">long</span> start_time = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000000</span>; i++) &#123;<br>            user.getName();<br>        &#125;<br>        <span class="hljs-keyword">long</span> end_time = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;普通方式执行10亿次需要：&quot;</span> + (end_time - start_time) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//反射方式调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        Class c1 = user.getClass();<br>        Method getName = c1.getMethod(<span class="hljs-string">&quot;getName&quot;</span>, <span class="hljs-keyword">null</span>);<br>        getName.invoke(user, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">long</span> start_time = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000000</span>; i++) &#123;<br>            user.getName();<br>        &#125;<br>        <span class="hljs-keyword">long</span> end_time = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;反射方式调用执行10亿次需要：&quot;</span> + (end_time - start_time) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-comment">//反射方式调用，关闭安全监测</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        Class c1 = user.getClass();<br>        Method getName = c1.getMethod(<span class="hljs-string">&quot;getName&quot;</span>, <span class="hljs-keyword">null</span>);<br>        getName.setAccessible(<span class="hljs-keyword">true</span>);<br>        getName.invoke(user, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">long</span> start_time = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000000</span>; i++) &#123;<br>            user.getName();<br>        &#125;<br>        <span class="hljs-keyword">long</span> end_time = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;反射方式调用，关闭安全监测调用执行10亿次需要：&quot;</span> + (end_time - start_time) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *普通方式执行10亿次需要：最快</span><br><span class="hljs-comment">     *反射方式调用执行10亿次需要：最慢</span><br><span class="hljs-comment">     *反射方式调用，关闭安全监测调用执行10亿次需要：Middle</span><br><span class="hljs-comment">     */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-6、获取泛型信息"><a href="#2-6、获取泛型信息" class="headerlink" title="2.6、获取泛型信息"></a>2.6、获取泛型信息</h2><ul><li>Java采用泛型擦除的机制来引入泛型，Java中的泛型仅仅是给编译器javac使用的，确保数据的安全性和免去强制类型转换问题，但是，一旦编译完成，所有和泛型有关的类型全部擦除</li><li>为了通过反射操作这些类型， Java新增了ParameterizedType, GenericArrayType，TypeVariable和WildcardType几种类型来代表不能被归一到Class类中的类型但是又和原始类型齐名的类型</li><li>ParameterizedType：表示一种参数化类型,比如Collection</li><li>GenericArrayType：表示一种元素类型是参数化类型或者类型变量的数组类型</li><li>TypeVariable：是各种类型变量的公共父接口</li><li>WildcardType：代表一种通配符类型表达式</li></ul><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.nty.reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.ParameterizedType;<br><span class="hljs-keyword">import</span> java.lang.reflect.Type;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">//通过反射获取泛型信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test10</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">(Map&lt;String, User&gt; map, List&lt;User&gt; list)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;test01&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, User&gt; <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;test02&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException </span>&#123;<br>        Method method = Test10.class.getMethod(<span class="hljs-string">&quot;test01&quot;</span>, Map.class, List.class);<br><br>        <span class="hljs-comment">//getGenericParameterTypes():获得泛型的参数类型</span><br>        Type[] genericParameterTypes = method.getGenericParameterTypes();<br><br>        <span class="hljs-keyword">for</span> (Type genericParameterType : genericParameterTypes) &#123;<br>            System.out.println(genericParameterType);<span class="hljs-comment">//Java.JavaBase.Collections.HashMapTest.Map&lt;java.lang.String, kuangshen.reflection.User&gt;</span><br>            <span class="hljs-comment">// 判断genericParameterType是否等于ParameterizedType（结构化参数类型）</span><br>            <span class="hljs-keyword">if</span> (genericParameterType <span class="hljs-keyword">instanceof</span> ParameterizedType) &#123;<br>                <span class="hljs-comment">//getActualTypeArguments()：获得真实的参数信息</span><br>                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();<br>                <span class="hljs-keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;<br>                    System.out.println(actualTypeArgument);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;===============test02====================&quot;</span>);<br>        method = Test10.class.getMethod(<span class="hljs-string">&quot;test02&quot;</span>, <span class="hljs-keyword">null</span>);<br>        Type genericReturnType = method.getGenericReturnType();<br>        <span class="hljs-keyword">if</span> (genericReturnType <span class="hljs-keyword">instanceof</span> ParameterizedType) &#123;<br>            <span class="hljs-comment">//getActualTypeArguments()：获得真实的参数信息</span><br>            Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();<br>            <span class="hljs-keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;<br>                System.out.println(actualTypeArgument);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * java.util.Map&lt;java.lang.String, com.nty.reflection.User&gt;</span><br><span class="hljs-comment"> * class java.lang.String</span><br><span class="hljs-comment"> * class com.nty.reflection.User</span><br><span class="hljs-comment"> * java.util.List&lt;com.nty.reflection.User&gt;</span><br><span class="hljs-comment"> * class com.nty.reflection.User</span><br><span class="hljs-comment"> * ===============test02====================</span><br><span class="hljs-comment"> * class java.lang.String</span><br><span class="hljs-comment"> * class com.nty.reflection.User</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="2-7、获取注解信息"><a href="#2-7、获取注解信息" class="headerlink" title="2.7、获取注解信息"></a>2.7、获取注解信息</h2><ul><li>getAnnotations()</li><li>getAnnotation()</li></ul><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.nty.reflection;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-comment">//练习反射操作注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test11</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;<br><br>        Class c1 = Class.forName(<span class="hljs-string">&quot;com.nty.reflection.Student2&quot;</span>);<br><br>        <span class="hljs-comment">//通过反射获取注解</span><br>        Annotation[] annotations = c1.getAnnotations();<br>        <span class="hljs-keyword">for</span> (Annotation annotation : annotations) &#123;<br>            System.out.println(annotation);<span class="hljs-comment">//</span><br>        &#125;<br><br>        <span class="hljs-comment">//获得注解value的值</span><br>        TestAnno testAnno = (TestAnno) c1.getAnnotation(TestAnno.class);<br>        System.out.println(testAnno.value());<span class="hljs-comment">//db_student</span><br><br>        System.out.println(<span class="hljs-string">&quot;================================&quot;</span>);<br>        <span class="hljs-comment">//获得类指定的注解</span><br>        Field f = c1.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        FieldAnno annotation = f.getAnnotation(FieldAnno.class);<br>        System.out.println(annotation.columnName());<span class="hljs-comment">//db_name</span><br>        System.out.println(annotation.type());<span class="hljs-comment">//varchar</span><br>        System.out.println(annotation.length());<span class="hljs-comment">//10</span><br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@TestAnno(&quot;db_student&quot;)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student2</span> </span>&#123;<br>    <span class="hljs-meta">@FieldAnno(columnName = &quot;db_id&quot;, type = &quot;int&quot;, length = 10)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-meta">@FieldAnno(columnName = &quot;db_name&quot;, type = &quot;varchar&quot;, length = 10)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@FieldAnno(columnName = &quot;db_age&quot;, type = &quot;int&quot;, length = 10)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student2</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student2&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//创建一个注解</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><span class="hljs-comment">//类上使用</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br>        <span class="hljs-comment">//Retention：表示我们的注解在什么地方有效</span><br><span class="hljs-meta">@interface</span> TestAnno &#123;<br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br><br><span class="hljs-comment">//属性的注解</span><br><span class="hljs-meta">@Target(ElementType.FIELD)</span><span class="hljs-comment">//类上使用</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> FieldAnno &#123;<br>    <span class="hljs-function">String <span class="hljs-title">columnName</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function">String <span class="hljs-title">type</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>15. 三数之和</title>
    <link href="/2022/03/11/LeetCode/15.%20%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2022/03/11/LeetCode/15.%20%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/3sum/">https://leetcode-cn.com/problems/3sum/</a></p><p>题意：给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c             = 0 ？请你找出所有和为 0 且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><p>样例：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：nums = [<span class="hljs-string">-1</span>,0,1,2,<span class="hljs-string">-1</span>,<span class="hljs-string">-4</span>]<br>输出：[[<span class="hljs-string">-1</span>,<span class="hljs-string">-1</span>,2],[<span class="hljs-string">-1</span>,0,1]]<br></code></pre></td></tr></table></figure><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="hljs-keyword">int</span>[] nums) &#123;<br>        List&lt;List&lt;Integer&gt;&gt; ans = <span class="hljs-keyword">new</span> ArrayList();<br>        <span class="hljs-keyword">int</span> len = nums.length;<br>        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || len &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> ans;<br>        Arrays.sort(nums); <span class="hljs-comment">// 排序</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len ; i++) &#123;<br>            <span class="hljs-keyword">if</span>(nums[i] &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 如果当前数字大于0，则三数之和一定大于0，所以结束循环</span><br>            <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i-<span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 去重</span><br>            <span class="hljs-keyword">int</span> L = i+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">int</span> R = len-<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(L &lt; R)&#123;<br>                <span class="hljs-keyword">int</span> sum = nums[i] + nums[L] + nums[R];<br>                <span class="hljs-keyword">if</span>(sum == <span class="hljs-number">0</span>)&#123;<br>                    ans.add(Arrays.asList(nums[i],nums[L],nums[R]));<br>                    <span class="hljs-keyword">while</span> (L&lt;R &amp;&amp; nums[L] == nums[L+<span class="hljs-number">1</span>]) L++; <span class="hljs-comment">// 去重</span><br>                    <span class="hljs-keyword">while</span> (L&lt;R &amp;&amp; nums[R] == nums[R-<span class="hljs-number">1</span>]) R--; <span class="hljs-comment">// 去重</span><br>                    L++;<br>                    R--;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &lt; <span class="hljs-number">0</span>) L++;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &gt; <span class="hljs-number">0</span>) R--;<br>            &#125;<br>        &#125;        <br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决hexo无法显示图片</title>
    <link href="/2022/03/10/%E8%A7%A3%E5%86%B3hexo%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/"/>
    <url>/2022/03/10/%E8%A7%A3%E5%86%B3hexo%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h5 id="1、将笔记md中的图片放入该images文件夹下"><a href="#1、将笔记md中的图片放入该images文件夹下" class="headerlink" title="1、将笔记md中的图片放入该images文件夹下"></a>1、将笔记md中的图片放入该images文件夹下</h5><p><img src="/images/image-20220310204926904.png" alt="image-20220310204926904"></p><h5 id="2、在md中引入图片的方式如下："><a href="#2、在md中引入图片的方式如下：" class="headerlink" title="2、在md中引入图片的方式如下："></a>2、在md中引入图片的方式如下：</h5><p><img src="/images/picture.png" alt="picture"></p><h4 id="（记得路径前面要加’-‘）"><a href="#（记得路径前面要加’-‘）" class="headerlink" title="（记得路径前面要加’/‘）"></a>（记得路径前面要加’/‘）</h4><h5 id="3、为了可以正常在md中看到图片，在文章所在的同级目录下新建images文件夹并放入指定的图片资源"><a href="#3、为了可以正常在md中看到图片，在文章所在的同级目录下新建images文件夹并放入指定的图片资源" class="headerlink" title="3、为了可以正常在md中看到图片，在文章所在的同级目录下新建images文件夹并放入指定的图片资源"></a>3、为了可以正常在md中看到图片，在文章所在的同级目录下新建images文件夹并放入指定的图片资源</h5>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>N 叉树的前序遍历——链表</title>
    <link href="/2022/03/10/LeetCode/N%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2022/03/10/LeetCode/N%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/">https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/</a></p><p>题意：给定一个 n 叉树的根节点  root ，返回其节点值的前序遍历 。</p><p>n 叉树在输入中按层序遍历进行序列化表示，每组子节点由空值 null 分隔（请参见示例）。</p><p>样例：</p><p><img src="/images/image-20220310113445458.png" alt="image-20220310113445458"></p><h4 id="Solve"><a href="#Solve" class="headerlink" title="Solve:"></a>Solve:</h4><p>类似二叉树的先序遍历，每次从左到右依次 dfs 搜索即可。</p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">// Definition for a Node.</span><br><span class="hljs-comment">class Node &#123;</span><br><span class="hljs-comment">public:</span><br><span class="hljs-comment">    int val;</span><br><span class="hljs-comment">    vector&lt;Node*&gt; children;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Node() &#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Node(int _val) &#123;</span><br><span class="hljs-comment">        val = _val;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span><br><span class="hljs-comment">        val = _val;</span><br><span class="hljs-comment">        children = _children;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(Node* a,vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;re)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(a==<span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span>;<br>        re.<span class="hljs-built_in">push_back</span>(a-&gt;val);<br>        <span class="hljs-keyword">if</span>(a-&gt;children.<span class="hljs-built_in">size</span>()==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;a-&gt;children.<span class="hljs-built_in">size</span>();i++)<br>            <span class="hljs-built_in">dfs</span>(a-&gt;children[i],re);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">preorder</span><span class="hljs-params">(Node* root)</span> </span>&#123;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; re;<br>        <span class="hljs-built_in">dfs</span>(root,re);<br>        <span class="hljs-keyword">return</span> re;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>454. 四数相加 II</title>
    <link href="/2022/03/09/LeetCode/454.%20%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0%20II/"/>
    <url>/2022/03/09/LeetCode/454.%20%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0%20II/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/4sum-ii/">https://leetcode-cn.com/problems/4sum-ii/</a></p><p>题意：给你四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是 n ，请你计算有多少个元组 (i, j, k, l) 能满足：0 &lt;= i, j, k, l &lt; n    nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</p><p>样例：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gcode">输入：<span class="hljs-symbol">nums1</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>], <span class="hljs-symbol">nums2</span> = [<span class="hljs-number">-2</span>,<span class="hljs-number">-1</span>], <span class="hljs-symbol">nums3</span> = [<span class="hljs-number">-1</span>,<span class="hljs-number">2</span>], <span class="hljs-symbol">nums4</span> = [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>]<br>输出：<span class="hljs-number">2</span><br>解释：<br>两个元组如下：<br><span class="hljs-number">1.</span> <span class="hljs-comment">(0, 0, 0, 1)</span> -&gt; <span class="hljs-symbol">nums1</span>[<span class="hljs-number">0</span>] + <span class="hljs-symbol">nums2</span>[<span class="hljs-number">0</span>] + <span class="hljs-symbol">nums3</span>[<span class="hljs-number">0</span>] + <span class="hljs-symbol">nums4</span>[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span> + <span class="hljs-comment">(-2)</span> + <span class="hljs-comment">(-1)</span> + <span class="hljs-number">2</span> = <span class="hljs-number">0</span><br><span class="hljs-number">2.</span> <span class="hljs-comment">(1, 1, 0, 0)</span> -&gt; <span class="hljs-symbol">nums1</span>[<span class="hljs-number">1</span>] + <span class="hljs-symbol">nums2</span>[<span class="hljs-number">1</span>] + <span class="hljs-symbol">nums3</span>[<span class="hljs-number">0</span>] + <span class="hljs-symbol">nums4</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span> + <span class="hljs-comment">(-1)</span> + <span class="hljs-comment">(-1)</span> + <span class="hljs-number">0</span> = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="Solve"><a href="#Solve" class="headerlink" title="Solve:"></a>Solve:</h4><p>均分思想</p><p>我们可以将四个数组分成两部分，A 和 B 为一组，C 和 D 为另外一组。</p><p>对于 A 和 B，我们使用二重循环对它们进行遍历，得到所有 A[i]+B[j] 的值并存入哈希映射中。对于哈希映射中的每个键值对，每个键表示一种 A[i]+B[j]，对应的值为 A[i]+B[j] 出现的次数。</p><p>对于 C 和 D，我们同样使用二重循环对它们进行遍历。当遍历到 C[k]+D[l] 时，如果 −(C[k]+D[l]) 出现在哈希映射中，那么将 −(C[k]+D[l]) 对应的值累加进答案中。</p><p>最终即可得到满足 A[i]+B[j]+C[k]+D[l]=0 的四元组数目。</p><p>注：Java HashMap 的 getOrDefault() 方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">hashmap.get<span class="hljs-constructor">OrDefault(Object <span class="hljs-params">key</span>, V <span class="hljs-params">defaultValue</span>)</span><br></code></pre></td></tr></table></figure><ul><li>key - 键</li><li>defaultValue - 当指定的key并不存在映射关系中，则返回的该默认值</li></ul><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fourSumCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] A, <span class="hljs-keyword">int</span>[] B, <span class="hljs-keyword">int</span>[] C, <span class="hljs-keyword">int</span>[] D)</span> </span>&#123;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Integer, Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u : A) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v : B) &#123;<br>                map.put(u + v, map.getOrDefault(u + v, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u : C) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v : D) &#123;<br>                <span class="hljs-keyword">if</span> (map.containsKey(-<span class="hljs-number">1</span>*(u+v))) &#123;<br>                    ans += map.get(-<span class="hljs-number">1</span>*(u+v));<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>部署</title>
    <link href="/2022/02/09/Django%E5%90%8E%E7%AB%AF/%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/02/09/Django%E5%90%8E%E7%AB%AF/%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>当我们完成一个阶段的开发任务后，就需要把我们开发的网站服务给真正的用户使用了。</p><p>那就需要我们的网站部署在公网机器上，而不是我们的个人电脑。这个给真正用户使用的网站服务器我们通常称之为 <code>生产环境</code>。</p><p>通常，我们的web服务是部署在云服务厂商的云主机上，比如阿里云的ECS云主机。</p><p>现在的web服务，基本都是采用 Linux 操作系统，而且生产环境不应该使用 SQLite 数据库，通常是 MySQL、Postgresql、Oracle等。</p><br><h2 id="架构说明"><a href="#架构说明" class="headerlink" title="架构说明"></a>架构说明</h2><p>一个大型的网站系统，架构通常非常的复杂，包括很多的功能节点。</p><p>需要如下两点：</p><ul><li><p>Django 在生产环境不应该处理静态资源（比如网页、图片等）的请求</p><p>前面是开发阶段，为了是环境搭建容易，我们还是让Django来处理静态资源的请求了。</p><p>在生产环境不能这样做，这里我们使用Nginx来处理静态资源的请求。</p></li><li><p>Django 在生产环境 不能直接处理 HTTP请求</p><p>Django是 wsgi web application 的框架，它只有一个简单的单线程 wsgi web server。 供调试时使用。性能很低。在生产环境必须提供 专业的 wsgi web server，比如 uWSGI 或者 Gunicorn。 我们这里使用 Gunicorn。而且即使有了 uWSGI 或者 Gunicorn，我们最好还要在前面设置 Nginx 。所有的客户请求由它先接受，再进行相应的转发。</p></li></ul><p>为什么要这样？</p><p><strong>Nginx</strong> 在整个后端的最前方， 可以实现负载均衡、反向代理、请求缓存、响应缓存 、负荷控制等等一系列功能。可以大大的提高整个后端的性能和稳定性。</p><p>综上， 我们当前这个简单网站，其架构图如下：</p><p><img src="/images/image-20220208174137040-16469161217601.png" alt="image-20220208174137040"></p><p>注——正向代理与反向代理：</p><ul><li>正向代理即是客户端代理，代理客户端。服务端不知道实际发起请求的客户端</li><li>反向代理即是服务端代理，代理服务端。客户端不知道实际提供服务的服务端</li></ul><img src="/images/image-20220208174427816.png" alt="image-20220208174427816" style="zoom: 50%;"><p>这里为了简单，把整个后端系统都部署在同一台Linux主机上，包括：Nginx、Gunicorn、Django（包括我们的代码）、MySQL服务。</p><p>在实际项目中，如果系统的负荷比较大，通常是部署在多台主机上。</p><p>这个架构的各个子系统是如何协同工作的？</p><ul><li><p>Nginx</p><p>Nginx 运行起来是多个进程，接收从客户端（通常是浏览器或者手机APP）发过来的请求。</p><p>它会 <code>根据请求的URL</code> 进行判断：</p><p>如果请求的 是 静态资源，比如HTML文档、图片等，它直接从配置的路径进行读取，返回内容给客户端。</p><p>如果请求的 是 动态数据， 转发给 Gunicorn+Django 进行处理</p></li><li><p>Gunicorn/Django</p><p>Gunicorn 和 Django 是运行在同一个 Python进程里面的。 它们都是用Python代码写的程序。</p><p>启动Gunicorn的时候，它会根据配置加载Django的入口模块，这个入口模块里面提供了WSGI接口。</p><p>当 Gunicorn 接收到 Nginx 转发的 HTTP请求后，就会调用 Django的 WSGI入口函数，将请求给Django进行处理。</p><p>Django框架 再根据请求的URL 和 我们项目配置的 URL 路由表，找到我们编写的对应的消息处理函数进行处理。</p><p>我们编写的消息处理函数，就是前面章节大家学习到的，处理前端请求。如果需要读写数据库，就从MySQL数据库读写数据。</p></li></ul><br><br><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>基于Django开发的后端系统，要发布正式版本：</p><ul><li><p>首先拷贝你的开发项目目录到一个新的目录中，可以改名为 <code>bysms_back_v1</code></p><p>修改项目配置中 bysms/settings.py ，把下面的配置项DEBUG值为 False：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># SECURITY WARNING: don&#x27;t run with debug turned on in production!</span><br>DEBUG = <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure></li><li><p>把数据库改为生产环境的数据库</p><p>前面我们为了开发简单，一直用的SQLite数据库，现在需要改为生产环境的MySQL数据库。</p><p>按照如下示例，修改项目配置 bysms/settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#DATABASES = &#123;</span><br><span class="hljs-comment">#   &#x27;default&#x27;: &#123;</span><br><span class="hljs-comment">#        &#x27;ENGINE&#x27;: &#x27;django.db.backends.sqlite3&#x27;,</span><br><span class="hljs-comment">#       &#x27;NAME&#x27;: os.path.join(BASE_DIR, &#x27;db.sqlite3&#x27;),</span><br><span class="hljs-comment">#    &#125;</span><br><span class="hljs-comment">#&#125;</span><br><br>DATABASES = &#123;<br>  <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>      <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,<br>      <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;bysms&#x27;</span>,   <span class="hljs-comment"># 数据库名</span><br>      <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;byhy&#x27;</span>,    <span class="hljs-comment"># 数据库 用户名</span><br>      <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;Mima123$&#x27;</span>,<span class="hljs-comment"># 数据库 用户密码</span><br>      <span class="hljs-string">&#x27;HOST&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-comment"># 数据库服务主机名</span><br>      <span class="hljs-string">&#x27;PORT&#x27;</span>: <span class="hljs-string">&#x27;3306&#x27;</span>,      <span class="hljs-comment"># 数据库服务端口</span><br>      <span class="hljs-string">&#x27;CONN_MAX_AGE&#x27;</span>: <span class="hljs-number">0</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，上面配置的 MySQL连接的用户名、密码、数据库名、数据库服务主机名、端口都要和你的环境匹配。</p></li><li><p>添加 Linux 启动shell脚本</p><p>生产环境，我们使用 Gunicorn 作为 Django 的WSGI前端，首先我们需要创建一个 Gunicorn启动配置文件 <code>./bysms/gunicorn_conf.py</code> ，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># gunicorn/django  服务监听地址、端口</span><br>bind = <span class="hljs-string">&#x27;127.0.0.1:8000&#x27;</span><br><br><span class="hljs-comment"># gunicorn worker 进程个数，建议为： CPU核心个数 * 2 + 1</span><br>workers =  <span class="hljs-number">3</span> <br><br><span class="hljs-comment"># gunicorn worker 类型， 使用异步的event类型IO效率比较高</span><br>worker_class =  <span class="hljs-string">&quot;gevent&quot;</span>  <br><br><span class="hljs-comment"># 日志文件路径</span><br>errorlog = <span class="hljs-string">&quot;/home/byhy/gunicorn.log&quot;</span><br>loglevel = <span class="hljs-string">&quot;info&quot;</span><br><br><span class="hljs-keyword">import</span> sys,os<br><br>cwd = os.getcwd()<br>sys.path.append(cwd)<br></code></pre></td></tr></table></figure><p>要保证我们的Django后端服务在linux上一个命令就能启动，需要开发一个 Linux 启动shell脚本 <code>./run.sh</code> 。</p><p>可以参考下面的 shell脚本内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>DIR=&quot;$( cd &quot;$( dirname &quot;$0&quot; )&quot; &amp;&amp; pwd )&quot;<br>echo $DIR<br><br>cd $DIR<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">ulimit</span> -n 50000</span><br>nohup gunicorn --config=bysms/gunicorn_conf.py bysms.wsgi &amp;&gt; /dev/null &amp;<br></code></pre></td></tr></table></figure></li><li><p>我们可以在该文件的末尾，加上版本号</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">VERSION</span> = <span class="hljs-string">&#x27;1.0&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><p>然后，删除 所有app 的 <code>migrations</code> 目录。</p><p>最好把整个Django后端的代码打包，包名为 <code>bysms_back_v1.zip</code></p><br><br><h3 id="安装、配置-Nginx"><a href="#安装、配置-Nginx" class="headerlink" title="安装、配置 Nginx"></a>安装、配置 Nginx</h3><p>文档：<a href="http://www.byhy.net/tut/webdev/django/16/">http://www.byhy.net/tut/webdev/django/16/</a></p><p>视频：<a href="https://www.bilibili.com/video/BV1AE41117Up?p=34&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1AE41117Up?p=34&amp;spm_id_from=pageDriver</a></p><br><h3 id="安装-Django"><a href="#安装-Django" class="headerlink" title="安装 Django"></a>安装 Django</h3><p>比较简单，执行如下命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 这是先安装pip</span><br>apt install python3-pip<br><br><span class="hljs-comment"># 再安装 Django</span><br>pip3 install Django -i https:<span class="hljs-regexp">//</span>pypi.douban.com<span class="hljs-regexp">/simple/</span><br></code></pre></td></tr></table></figure><br><h3 id="安装-Gunicorn"><a href="#安装-Gunicorn" class="headerlink" title="安装 Gunicorn"></a>安装 Gunicorn</h3><p>视频：<a href="https://www.bilibili.com/video/BV1AE41117Up?p=35">https://www.bilibili.com/video/BV1AE41117Up?p=35</a></p><p>执行下面的命令安装 Gunicorn 和 它依赖的库 gevent 和 greenlet （异步模式需要）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">pip3 install greenlet -i https:<span class="hljs-regexp">//</span>pypi.douban.com<span class="hljs-regexp">/simple/</span><br>pip3 install gevent    <br>pip3 install gunicorn<br></code></pre></td></tr></table></figure><br><h3 id="安装-MySQL，创建数据库和用户"><a href="#安装-MySQL，创建数据库和用户" class="headerlink" title="安装 MySQL，创建数据库和用户"></a>安装 MySQL，创建数据库和用户</h3><p>文档：<a href="http://www.byhy.net/tut/webdev/django/16/">http://www.byhy.net/tut/webdev/django/16/</a></p><p>视频：<a href="https://www.bilibili.com/video/BV1AE41117Up?p=36">https://www.bilibili.com/video/BV1AE41117Up?p=36</a></p><br><h3 id="创建产品运行用户、安装产品发布包、创建数据库表"><a href="#创建产品运行用户、安装产品发布包、创建数据库表" class="headerlink" title="创建产品运行用户、安装产品发布包、创建数据库表"></a>创建产品运行用户、安装产品发布包、创建数据库表</h3><p>文档：<a href="http://www.byhy.net/tut/webdev/django/16/">http://www.byhy.net/tut/webdev/django/16/</a></p><p>视频：<a href="https://www.bilibili.com/video/BV1AE41117Up?p=37&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1AE41117Up?p=37&amp;spm_id_from=pageDriver</a></p><br><h3 id="启动-Gunicorn-Django"><a href="#启动-Gunicorn-Django" class="headerlink" title="启动 Gunicorn/Django"></a>启动 Gunicorn/Django</h3><p>进入到 byhy 用户home目录，执行命令 run.sh</p><p>然后，执行命令 <code>ps -ef | grep python |grep gunicorn_conf |grep -v grep</code> 查看 是否启动成功。</p><p>注：Gunicorn 启动之后，Django 也随之启动了</p><br>]]></content>
    
    
    <categories>
      
      <category>Django后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>缓存</title>
    <link href="/2022/02/09/Django%E5%90%8E%E7%AB%AF/%E7%BC%93%E5%AD%98/"/>
    <url>/2022/02/09/Django%E5%90%8E%E7%AB%AF/%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<p>教程网址：<a href="http://www.byhy.net/tut/webdev/django/17/">http://www.byhy.net/tut/webdev/django/17/</a></p>]]></content>
    
    
    <categories>
      
      <category>Django后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库表的关联</title>
    <link href="/2022/02/09/Django%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%9A%84%E5%85%B3%E8%81%94/"/>
    <url>/2022/02/09/Django%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%9A%84%E5%85%B3%E8%81%94/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库表的关联"><a href="#数据库表的关联" class="headerlink" title="数据库表的关联"></a>数据库表的关联</h1><p>后端系统开发中，数据库设计是重中之重。</p><p>特别是前后端分离的系统，后端的职责基本就是数据管理，开发的代码几乎都是围绕数据操作的。</p><p>目前使用的数据库系统主要还是 <u>关系型数据库</u> 。</p><p>什么是关系型数据库？就是建立在关系模型基础上的数据库。</p><p>比如mysql、oracle、 sqlserver、SQLite 都是关系型数据库，而 mongodb则不是。</p><p>（mongodb是基于分布式文件存储的数据库）</p><p>而关系型数据库，设计的一个难点就是 <strong>各种表之间的关联关系</strong> 。</p><p>常见的3种关联关系就是：</p><ul><li>一对多</li><li>一对一</li><li>多对多</li></ul><br><br><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><p>表之间 <u>一对多</u> 的关系，就是 <u>外键</u> 关联关系</p><p>比如我们系统中已经定义了 <strong>客户（Customer）</strong>这张表，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span>(<span class="hljs-params">models.Model</span>):</span><br>    <span class="hljs-comment"># 客户名称</span><br>    name = models.CharField(max_length=<span class="hljs-number">200</span>)<br><br>    <span class="hljs-comment"># 联系电话</span><br>    phonenumber = models.CharField(max_length=<span class="hljs-number">200</span>)<br><br>    <span class="hljs-comment"># 地址</span><br>    address = models.CharField(max_length=<span class="hljs-number">200</span>)<br></code></pre></td></tr></table></figure><p>现在我们还需要定义 <strong>药品（Medicine）</strong>这张表，包括药品名称、编号和描述这些信息。</p><p>这个也很简单，添加如下的类定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Medicine</span>(<span class="hljs-params">models.Model</span>):</span><br>    <span class="hljs-comment"># 药品名</span><br>    name = models.CharField(max_length=<span class="hljs-number">200</span>)<br>    <span class="hljs-comment"># 药品编号</span><br>    sn = models.CharField(max_length=<span class="hljs-number">200</span>)<br>    <span class="hljs-comment"># 描述</span><br>    desc = models.CharField(max_length=<span class="hljs-number">200</span>)<br></code></pre></td></tr></table></figure><br><p>接下来我们要定义 <strong>订单（Order）</strong>这张表，这个Order表包括创建日期、客户、药品、数量。</p><p>其中客户字段对应的客户 <strong>只能是 Customer</strong> 中的某个客户记录，而一个客户记录可以对应多条订单记录。</p><p>这就是一对多的关系，可以用如下图片表示：</p><p>（客户——Customer；订单——Order）</p><img src="/images/image-20220204225409465.png" alt="image-20220204225409465" style="zoom:50%;"><p>像这种一对多的关系，数据库中是用 <strong>外键</strong> 来表示的。</p><p>如果一个表中的某个字段是<strong>外键</strong>，那就意味着这个外键字段的记录的取值，只能是它<strong>关联表的某个记录的主键</strong>的值。</p><p>我们定义表的 Model类的时候，如果没有指定主键字段，migrate 的时候 Django 会为该Model对应的数据库表自动生成一个 <strong>id</strong> 字段，作为<strong>主键</strong>。</p><p>比如，我们这里，Customer、Medicine表均没有主键，但是在migrate之后，查看数据库记录就可以发现有一个id字段，且该字段是主键 (primary key)。</p><p>现在我们要定义订单表 Order，其中客户字段就应该是一个外键，对应Customer表的主键，也就是id字段</p><p>Django中定义外键的方法就是 Model 类的该属性字段值为 <strong>ForeignKey</strong> 对象，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span>(<span class="hljs-params">models.Model</span>):</span><br>    <span class="hljs-comment"># 订单名</span><br>    name = models.CharField(max_length=<span class="hljs-number">200</span>,null=<span class="hljs-literal">True</span>,blank=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment"># 创建日期</span><br>    create_date = models.DateTimeField(default=datetime.datetime.now)<br><br>    <span class="hljs-comment"># 客户</span><br>    customer = models.ForeignKey(Customer,on_delete=models.PROTECT)<br></code></pre></td></tr></table></figure><p>其中 customer 字段是外键， 指向 Customer 类。 意思就是告诉Django： Order表的 customer 字段是指向 Customer表的主键的一个外键。</p><p>另外一个参数 <strong>on_delete</strong> 指定了 当我们想 <strong>删除</strong> 外键指向的主键记录时系统的行为。</p><p>比如我们要删除客户记录，那么 Order 表中对应这个客户的订单记录该如何处理呢？</p><p>on_delete 不同取值对应不同的做法，常见的做法如下：</p><ul><li><p>CASCADE</p><p>级联删除主键记录和相应的外键表记录。</p><p>比如，我们要删除客户张三，在删除了客户表中张三记录同时，也删除 Order 表中所有这个张三的订单记录</p></li><li><p>PROTECT</p><p>禁止删除记录。</p><p>比如，我们要删除客户张三，如果Order表中有张三的订单记录，Django系统就会抛出ProtectedError类型的异常，当然也就禁止删除客户记录和相关的订单记录了。</p><p>除非我们将Order表中所有张三的订单记录都先删除掉，才能删除该客户表中的张三记录。</p></li><li><p>SET_NULL</p><p>删除主键记录，并且将外键记录中外键字段的值置为null。 当然前提是外键字段要设置为值允许是null。</p><p>比如，我们要删除客户张三时，在删除了客户张三记录同时，会将Order表里面所有的 张三记录里面的customer字段值置为 null。 但是上面我们并没有设置 customer 字段有 <code>null=True</code> 的参数设置，所以，是不能取值为 SET_NULL的。</p></li></ul><br><p>注意： 外键字段，在数据库表中的实际字段名是 Django ForeignKey 定义字段名加上 后缀 _id 。</p><p>比如这里，在执行了 migrate 命令更新数据库后， customer 这个外键字段实际上在数据库表中的字段名是 customer_id。</p><br><br><h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><p>外键是 一对多 的关系， 也可以说是 多对一 的关系。</p><p>有的时候，表之间是 <strong>一对一</strong> 的关系。</p><p>比如，某个学校的学生表和学生的地址表，就形成一对一的关系，即一条主键所在表的记录只能对应一条外键所在表的记录。</p><p>Django 中用 <strong>OneToOneField</strong> 对象实现一对一的关系，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>(<span class="hljs-params">models.Model</span>):</span><br>    <span class="hljs-comment"># 姓名</span><br>    name = models.CharField(max_length=<span class="hljs-number">200</span>)<br>    <span class="hljs-comment"># 班级</span><br>    classname = models.CharField(max_length=<span class="hljs-number">200</span>)<br>    <span class="hljs-comment"># 描述</span><br>    desc = models.CharField(max_length=<span class="hljs-number">200</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContactAddress</span>(<span class="hljs-params">models.Model</span>):</span><br>    <span class="hljs-comment"># 一对一 对应学生 </span><br>    student = models.OneToOneField(Student, on_delete=models.PROTECT)<br>    <span class="hljs-comment"># 家庭</span><br>    homeaddress = models.CharField(max_length=<span class="hljs-number">200</span>)<br>    <span class="hljs-comment"># 电话号码</span><br>    phone = models.CharField(max_length=<span class="hljs-number">200</span>)<br></code></pre></td></tr></table></figure><p>对于一对一的定义，Django会在migrate的时候，在数据库中定义该字段为外键的同时， 加上 <code>unique=True</code> 约束，表示在此表中，所有记录的该字段取值必须唯一，不能重复。</p><br><br><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><p>数据库表还有一种 <strong>多对多</strong> 的关系。</p><p>比如一个订单可以采购多种药品，就对应 Medicine表里面的多种药品；而一种药品也可以被多个订单采购， 那么 Order表和 Medicine表之间就形成了多对多的关系。</p><p>Django是通过 <strong>ManyToManyField</strong> 对象表示多对多的关系的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span>(<span class="hljs-params">models.Model</span>):</span><br>    <span class="hljs-comment"># 订单名</span><br>    name = models.CharField(max_length=<span class="hljs-number">200</span>,null=<span class="hljs-literal">True</span>,blank=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment"># 创建日期</span><br>    create_date = models.DateTimeField(default=datetime.datetime.now)<br><br>    <span class="hljs-comment"># 客户</span><br>    customer = models.ForeignKey(Customer,on_delete=models.PROTECT)<br><br>    <span class="hljs-comment"># 订单购买的药品，和Medicine表是多对多 的关系</span><br>    medicines = models.ManyToManyField(Medicine, through=<span class="hljs-string">&#x27;OrderMedicine&#x27;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderMedicine</span>(<span class="hljs-params">models.Model</span>):</span><br>    order = models.ForeignKey(Order, on_delete=models.PROTECT)<br>    medicine = models.ForeignKey(Medicine, on_delete=models.PROTECT)<br><br>    <span class="hljs-comment"># 订单中药品的数量</span><br>    amount = models.PositiveIntegerField()<br></code></pre></td></tr></table></figure><p>像这样:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">medicines = models.ManyToManyField(Medicine, through=<span class="hljs-string">&#x27;OrderMedicine&#x27;</span>)<br></code></pre></td></tr></table></figure><p>指定 Order表和 Medicine表的多对多关系，其实 Order表中并不会产生一个 叫 medicines 的字段。</p><p>Order表和 Medicine表的多对多关系是 <strong>通过另外一张表</strong>，也就是 <strong>through</strong> 参数指定的 OrderMedicine 表来确定的。（through指定的表作为桥梁）</p><p>migrate的时候，Django会自动产生一张新表 （这里就是 common_ordermedicine）来实现 order 表和 medicine 表之间的多对多的关系。</p><p>可以执行下面两行命令 migrate 试一下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations common<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate<br></code></pre></td></tr></table></figure><p>就会发现产生如下的一张新表 common_ordermedicine：</p><img src="/images/image-20220206155652200.png" alt="image-20220206155652200" style="zoom: 50%;"><p>可以发现这张表中有 order_id 和 medicine_id 两个字段。</p><p>比如一个order表的订单id 为 1， 如果该订单中对应的药品有3种，它们的id分别 为 3，4，5。 那么就会有类似这样的这样3条记录在 common_order_medicine 表中。</p><img src="/images/image-20220206155728338.png" alt="image-20220206155728338" style="zoom:50%;">]]></content>
    
    
    <categories>
      
      <category>Django后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库操作</title>
    <link href="/2022/02/09/Django%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/02/09/Django%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>后端开发基本都需要操作数据，包括数据的存储、查询、修改、删除。</p><p>通常，这些都是通过数据库来完成的。目前业界最广泛使用的数据库还是：<strong>关系型</strong>数据库。</p><p>关系型数据库系统，常用的开源数据库有 mysql 和 postgresql。</p><p>我们先使用另一种更简单数据库： <strong>sqlite</strong></p><p>sqlite 没有独立的数据库服务进程，数据操作被做成库直接供应用程序调用。 Django中可以直接使用，无须先搭建数据服务。</p><p>创建的整体流程：创建数据库—-&gt;定义数据表—-&gt;创建数据表</p><br><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>项目中数据库的配置在 bysms/settings.py 中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">DATABASES = &#123;<br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.sqlite3&#x27;</span>,<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: os.path.join(BASE_DIR, <span class="hljs-string">&#x27;db.sqlite3&#x27;</span>),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可见项目初始默认的数据库就是sqlite。</p><h5 id="创建数据库："><a href="#创建数据库：" class="headerlink" title="创建数据库："></a><strong>创建数据库：</strong></h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate<br></code></pre></td></tr></table></figure><p>创建成功后可以用 <strong>DBeaver</strong> 访问该数据库（数据库—-新建连接—-db.sqlite3）</p><p>此时可以发现该库中有些表已经创建好了，这些表都是 Django 缺省设置中需要的一些基本表。</p><p>包括: 用户表 auth_user， 登录会话表 django_session 等等。</p><br><br><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>Django 里面，数据库表的操作，包括表的<strong>定义</strong>、表中数据的<strong>增删改查</strong>，都可以通过 <strong>Model</strong> 类型的对象进行</p><p>通常，在Django中：</p><ul><li>定义一张数据库的表就是定义一个继承自 django.db.models.Model 的类</li><li>定义该表中的字段（列）， 就是定义该类里面的一些属性</li><li>类的方法就是对该表中数据的处理方法，包括数据的增删改查 </li></ul><p>这样，开发者对数据库的访问，从原来的使用底层的 sql 语句，变成面向对象的开发，通过一系列对象的类定义 和方法调用就可以操作数据库。</p><p>这样做：</p><ul><li><p>极大的简化了我们应用中的数据库开发，因为无需使用sql语句操作数据库了， 提高了开发的效率。</p></li><li><p>屏蔽了不同的数据库访问的底层细节，基本做到了开发好代码后，如果要换数据库，几乎不需要改代码，修改几个配置项就可以了。</p></li></ul><p>这种通过对象操作数据库的方法被称之为 ORM （object relational mapping）。</p><br><br><h2 id="定义数据库表"><a href="#定义数据库表" class="headerlink" title="定义数据库表"></a>定义数据库表</h2><p>创建一个名为common的应用目录， 里面存放我们项目需要的一些公共的表的定义：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> startapp common <br></code></pre></td></tr></table></figure><p>即可创建一个目录名为 common， 对应一个名为 common 的 app，里面包含了如下自动生成的文件：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim">common/<br>    __init__.<span class="hljs-keyword">py</span><br>    admin.<span class="hljs-keyword">py</span><br>    apps.<span class="hljs-keyword">py</span><br>    migrations/<br>        __init__.<span class="hljs-keyword">py</span><br>    models.<span class="hljs-keyword">py</span><br>    tests.<span class="hljs-keyword">py</span><br>    views.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>Django是通过定义类来定义数据库表的。</p><p>所以，我们要定义数据库的表，无需执行sql语句，只需要在app目录下面定义特殊的类就可以了。</p><p><strong>数据库表的定义</strong>，一般是放在app目录中的 <strong>models.py</strong>里面的。</p><p>（ <strong>类Class – 数据库表，每条数据都是类的一个实例</strong> ）</p><p>打开 common/models.py，发现里面是空的，因为我们还没有定义我们的业务所需要的表。</p><p>我们修改它，加入如下内容:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span>(<span class="hljs-params">models.Model</span>):</span><br>    <span class="hljs-comment"># 客户名称</span><br>    name = models.CharField(max_length=<span class="hljs-number">200</span>)<br><br>    <span class="hljs-comment"># 联系电话</span><br>    phonenumber = models.CharField(max_length=<span class="hljs-number">200</span>)<br><br>    <span class="hljs-comment"># 地址</span><br>    address = models.CharField(max_length=<span class="hljs-number">200</span>)<br></code></pre></td></tr></table></figure><p>这个 Customer 类继承自 django.db.models.Model， 就是用来定义数据库表的。</p><p>里面的 name、phonenumber、address 是该表的3个字段。</p><p>定义表中的字段就是定义一些静态属性，这些属性是 django.db.models 里面的各种 Field 对象，对应不同类型的字段，比如这里的3个字段都是 CharField 对象，对应 varchar类型的数据库字段。</p><p>后面的参数 <code>max_length</code> 指明了该 varchar字段的 最大长度。</p><p>Djanog 有很多字段对象类型， 对应不同的类型的数据库字段。（参考<a href="https://docs.djangoproject.com/en/2.0/ref/models/fields/#model-field-types">官方文档</a>）</p><h5 id="注：我们定义表的-Model类的时候，如果没有指定主键字段，migrate-的时候-Django-会为该Model对应的数据-库表自动生成一个-id-字段，作为主键。"><a href="#注：我们定义表的-Model类的时候，如果没有指定主键字段，migrate-的时候-Django-会为该Model对应的数据-库表自动生成一个-id-字段，作为主键。" class="headerlink" title="注：我们定义表的 Model类的时候，如果没有指定主键字段，migrate 的时候 Django 会为该Model对应的数据        库表自动生成一个 id 字段，作为主键。"></a>注：我们定义表的 Model类的时候，如果没有指定主键字段，migrate 的时候 Django 会为该Model对应的数据        库表自动生成一个 <strong>id</strong> 字段，作为<strong>主键</strong>。</h5><br><br><h2 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h2><p>首先我们需要告诉Django： 我们的 common 应用中需要你关注， 因为其中包含了数据库Model的定义。</p><p>怎么告诉它？ 在项目的配置文件 <code>settings.py </code>中， <strong>INSTALLED_APPS</strong> 配置项加入如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = [<br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br><br>    <span class="hljs-comment"># 加入下面这行</span><br>    <span class="hljs-string">&#x27;common.apps.CommonConfig&#x27;</span>,<br>]<br></code></pre></td></tr></table></figure><p><strong>‘common.apps.CommonConfig’</strong> 告诉 Django ， CommonConfig 是 common/apps.py 文件中定义的一个应用配置的类。</p><p>现在Django知道了我们的 common 应用， 我们可以在项目根目录下执行命令：</p><p>（<strong>修改了表的定义之后就要执行</strong>）</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations common<br></code></pre></td></tr></table></figure><p>这个命令告诉Django：去看看common这个app里面的models.py ，我们已经<strong>修改了数据定义</strong>， 你现在去产生相应的更新脚本。</p><p>执行之后会发现在 common\migrations 目录下面出现了0001_initial.py, 这个脚本就是相应要进行的数据库操作代码。</p><p>随即，执行如下命令：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">python manage.py migrate<br></code></pre></td></tr></table></figure><p>就真正去数据库创建表了，用 DBeaver 查看数据库，发现创建了一张名为 common_customer的表。</p><p>（创建的表会多一个 id 属性，因为没有指定主键，新增的 id 默认作为该表的主键）</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果以后我们修改了models.py 里面的数据库表的定义，都需要再次运行 python manage.py makemigrations common 和 python manage.py migrate 命令，使数据库同步修改结果。</p><br><br><h2 id="Django-Admin-管理数据"><a href="#Django-Admin-管理数据" class="headerlink" title="Django Admin 管理数据"></a>Django Admin 管理数据</h2><p>Django提供了一个管理员操作界面可以方便的 添加、修改、删除你定义的 model 表数据。</p><p>首先，我们需要创建一个超级管理员账号。</p><p>进入到项目的根目录，执行如下命令，依次输入你要创建的管理员的登录名、email、密码。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">d:\projects\bysms&gt;python manage.py createsuperuser<br>Username (leave blank to use <span class="hljs-string">&#x27;byhy&#x27;</span>): byhy<br>Email address: byhy@<span class="hljs-number">163.</span>com<br>Password:<br>Password (again):<br>Superuser created successfully.<br></code></pre></td></tr></table></figure><p>注意密码至少8个字符。</p><p>然后我们需要修改应用里面的管理员配置文件 common/admin.py，注册我们定义的model类。这样Django才会知道</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Customer<br><br>admin.site.register(Customer)<br></code></pre></td></tr></table></figure><p>好了，现在就可以访问 <code>http://127.0.0.1/admin/</code> ，输入刚才注册的用户密码登录。</p><p>登录后可以看到如下界面。这里面是目前系统中可以修改的表。</p><br><br><h2 id="读取数据库数据"><a href="#读取数据库数据" class="headerlink" title="读取数据库数据"></a>读取数据库数据</h2><h3 id="获取全部记录"><a href="#获取全部记录" class="headerlink" title="获取全部记录"></a>获取全部记录</h3><p>现在我们来实现一个功能：浏览器访问 <code>sales/customers/</code> ，我们的服务端就返回系统中所有的客户记录给浏览器。我们先实现一个函数，来处理浏览器发出 URL 为 <code>sales/customers/</code> 的访问请求，该请求需要返回数据库中customer 表的所有记录。</p><p>Django 中对数据库表的操作， 应该都通过 Model 对象实现对数据的读写，而不是通过SQL语句，比如，这里我们要获取 customer 表所有记录， 该表是我们之前定义的 Customer 类管理的。</p><p>我们可以这样获取所有的表记录:</p><p>在文件sales/views.py 中，定义一个listcustomers 函数，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入 Customer 对象定义</span><br><span class="hljs-keyword">from</span> common.models <span class="hljs-keyword">import</span> Customer<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">listcustomers</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-comment"># 返回一个 QuerySet 对象 ，包含所有的表记录</span><br>    <span class="hljs-comment"># 每条表记录都是是一个dict对象，</span><br>    <span class="hljs-comment"># key 是字段名，value 是 字段值</span><br>    qs = Customer.objects.values()<br><br>    <span class="hljs-comment"># 定义返回字符串</span><br>    retStr = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> customer <span class="hljs-keyword">in</span>  qs:<br>        <span class="hljs-keyword">for</span> name,value <span class="hljs-keyword">in</span> customer.items():<br>            retStr += <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;name&#125;</span> : <span class="hljs-subst">&#123;value&#125;</span> | &#x27;</span><br><br>        <span class="hljs-comment"># &lt;br&gt; 表示换行</span><br>        retStr += <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span><br><br>    <span class="hljs-keyword">return</span> HttpResponse(retStr)<br></code></pre></td></tr></table></figure><p>Customer.objects.values() 就会返回一个 <strong>QuerySet 对象</strong>，这个对象是Django 定义的，在这里它<strong>包含所有的Customer 表记录</strong>。</p><p><strong>QuerySet 对象可以使用 for 循环遍历取出里面所有的元素。每个元素对应一条表记录。</strong></p><p><strong>每条表记录元素都是一个dict对象，其中每个元素的 key 是表字段名，value 是该记录的字段值。</strong></p><p>上面的代码就可以将每条记录的信息存储到字符串中返回给前端浏览器。</p><p>我们还需要修改路由表， 加上对 <code>sales/customers/</code> url请求的路由。</p><p>主路由：<code>path(&#39;sales/&#39;, include(&#39;sales.urls&#39;)),</code></p><p>sales APP的路由：<code>path(&#39;customers/&#39;, views.listcustomers),</code></p><h5 id="实例运行："><a href="#实例运行：" class="headerlink" title="实例运行："></a>实例运行：</h5><p>原数据库数据：</p><img src="/images/image-20220128151207443.png" alt="image-20220128151207443" style="zoom: 50%;"><p>程序运行结果：</p><img src="/images/image-20220128151251096.png" alt="image-20220128151251096" style="zoom:50%;"><br><h3 id="过滤条件"><a href="#过滤条件" class="headerlink" title="过滤条件"></a>过滤条件</h3><p>有的时候，我们需要根据过滤条件查询部分客户信息。</p><p>比如，当用户在浏览器输入 <code>/sales/customers/?phonenumber=123</code> ，要求返回电话号码为 123 客户记录。</p><p>我们可以通过 <strong>filter</strong> 方法加入过滤条件，修改view里面的代码，如下所示：</p><p>（先用 <strong>request.GET.get</strong> 获取 url 的参数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">listcustomers</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-comment"># 返回一个 QuerySet 对象 ，包含所有的表记录</span><br>    qs = Customer.objects.values()<br><br>    <span class="hljs-comment"># 检查url中是否有参数phonenumber，缺省为None</span><br>    ph =  request.GET.get(<span class="hljs-string">&#x27;phonenumber&#x27;</span>,<span class="hljs-literal">None</span>)<br><br>    <span class="hljs-comment"># 如果有，添加过滤条件</span><br>    <span class="hljs-keyword">if</span> ph:<br>        qs = qs.<span class="hljs-built_in">filter</span>(phonenumber=ph)<br><br>    <span class="hljs-comment"># 定义返回字符串</span><br>    retStr = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> customer <span class="hljs-keyword">in</span>  qs:<br>        <span class="hljs-keyword">for</span> name,value <span class="hljs-keyword">in</span> customer.items():<br>            retStr += <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;name&#125;</span> : <span class="hljs-subst">&#123;value&#125;</span> | &#x27;</span><br>        <span class="hljs-comment"># &lt;br&gt; 表示换行</span><br>        retStr += <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span><br><br>    <span class="hljs-keyword">return</span> HttpResponse(retStr)<br></code></pre></td></tr></table></figure><p>Django 框架在 url 路由匹配到函数后， 调用函数时，会传入一个 <strong>HttpRequest 对象</strong>给参数变量 <strong>request</strong>，该对象里面包含了<strong>请求的数据信息</strong>。</p><h5 id="实例运行：-1"><a href="#实例运行：-1" class="headerlink" title="实例运行："></a>实例运行：</h5><p>原数据库数据：</p><img src="/images/image-20220128151207443.png" alt="image-20220128151207443" style="zoom: 50%;"><p>程序运行结果：</p><img src="/images/image-20220128171646127.png" alt="image-20220128171646127" style="zoom:50%;"><img src="/images/image-20220128171703483.png" alt="image-20220128171703483" style="zoom:50%;"><br><p>HTTP 的 Get 请求url里面的参数（术语叫 querystring 里面的参数）， 可以通过 HttpRequest对象的 GET 属性获取。这是一个类似dict的对象。比如要获取querystring里面的 phonenumber 参数 ，就可以像这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ph =  request.GET.get(<span class="hljs-string">&#x27;phonenumber&#x27;</span>,<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p>第二个参数传入 None 表示，如果没有 phonenumber 参数在 querystring中 ，就会返回 None。</p><p>然后通过调用 QuerySet 对象的filter方法，就可以把查询过滤条件加上去:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">qs = qs.<span class="hljs-built_in">filter</span>(phonenumber=ph)<br></code></pre></td></tr></table></figure><p>有了这个过滤条件，Django 会在底层执行数据库查询的SQL语句 加上相应的 where 从句，进行过滤查询。</p><p>注意，参数名 phonenumber 是和定义的表 model 的属性名 phonenumber 一致的。</p><p>filter的过滤条件可以有多个，只要继续在后面的参数添加过滤条件即可:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">qs = qs.<span class="hljs-built_in">filter</span>(phonenumber=ph,address=<span class="hljs-string">&#x27;安徽&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Django后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>对资源的增删改查处理</title>
    <link href="/2022/02/09/Django%E5%90%8E%E7%AB%AF/%E5%AF%B9%E8%B5%84%E6%BA%90%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%A4%84%E7%90%86/"/>
    <url>/2022/02/09/Django%E5%90%8E%E7%AB%AF/%E5%AF%B9%E8%B5%84%E6%BA%90%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="对资源的增删改查处理"><a href="#对资源的增删改查处理" class="headerlink" title="对资源的增删改查处理"></a>对资源的增删改查处理</h2><p>前面已经说过如果采用前后端分离的架构开发， 后端几乎不负责任何展现界面的工作，只负责管理数据。</p><p>数据的管理主要就是：响应前端的请求， 对数据资源的：<strong>增加、删除、修改、查询（curd）</strong> 。</p><p>下面我们就以 BYSMS 系统中 customer 数据为例，看看如何进行数据的增删改查操作。</p><p>现在我们的系统的API接口已经由架构师定义好了， <a href="http://www.byhy.net/tut/webdev/django/doc_api_v1_0/">点击这里查看</a>。</p><p>现在我们就根据这个接口文档，来实现后端，其中包括了客户数据的增删改查接口。</p><br><br><h2 id="创建-mgr应用目录"><a href="#创建-mgr应用目录" class="headerlink" title="创建 mgr应用目录"></a>创建 mgr应用目录</h2><p>接口文档明确说明了，这是针对 管理员用户 的请求。</p><p>前面我们已经为 销售员用户 专门创建了一个应用 sales 来处理相关的请求。</p><p>所以，我们可以再为 管理员用户 专门创建一个应用 mgr 来处理相关的请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py startapp mgr <br></code></pre></td></tr></table></figure><br><br><h2 id="添加处理请求模块-和-url-路由"><a href="#添加处理请求模块-和-url-路由" class="headerlink" title="添加处理请求模块 和 url 路由"></a>添加处理请求模块 和 url 路由</h2><p>前面，我们都是在views.py 里面定义函数，处理 http请求的。</p><p>但是可以想象， 以后这个mgr应用要处理很多类型的http请求。</p><p>都用这个views.py 就会让这个文件非常的庞大， 不好维护。所以，我们可以用不同的 py 文件处理不同类型的http请求。比如，这里我们可以新增一个文件 customer.py， 专门处理 客户端对 customer 数据的操作。</p><p>将来如果客户端有对其他类型数据的操作， 比如 order 数据， 我们就可以添加 orders.py 来处理。</p><br><p>从接口文档，我们可以发现对资源的增删改查操作， 都是<strong>同一个URL</strong>，而且不同的操作请求使用不同的 HTTP 请求方法 ，比如<strong>添加是POST</strong>， <strong>查询是GET</strong>， <strong>修改是PUT</strong>， <strong>删除是DELETE</strong>。</p><p>注意：</p><ul><li><p>Django 的 url 路由功能 <strong>不支持</strong> 根据 HTTP 请求的方法和请求体里面的参数进行路由。</p><p>即不支持:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;customers/&#x27;</span>, <span class="hljs-string">&#x27;app.views.list_customer&#x27;</span>, method=<span class="hljs-string">&#x27;get&#x27;</span>),<br>path(<span class="hljs-string">&#x27;customers/&#x27;</span>, <span class="hljs-string">&#x27;app.views.add_customer&#x27;</span>,  method=<span class="hljs-string">&#x27;post&#x27;</span>),<br></code></pre></td></tr></table></figure></li><li><p><strong>REST风格</strong>的URL原则：用URL表示资源，HTTP方法表示操作</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">原来方式的URL restful风格URL<br>UserControllerUserController<br><br>path=<span class="hljs-string">&quot;/user/save&quot;</span>path=<span class="hljs-string">&quot;/user&quot;</span>post请求<br><span class="hljs-function"><span class="hljs-title">save</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<span class="hljs-function"><span class="hljs-title">save</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><br>path=<span class="hljs-string">&quot;/user/update&quot;</span>path=<span class="hljs-string">&quot;/user&quot;</span>put请求<br><span class="hljs-function"><span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<span class="hljs-function"><span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><br>path=<span class="hljs-string">&quot;/user/findById?id=xxx&quot;</span> path=<span class="hljs-string">&quot;/user/&#123;id&#125;&quot;</span>      get请求<br><span class="hljs-function"><span class="hljs-title">findById</span>(<span class="hljs-params">Integer id</span>)</span>&#123;&#125;<span class="hljs-function"><span class="hljs-title">findById</span>(<span class="hljs-params">Integer id</span>)</span>&#123;&#125;<br><br>path=<span class="hljs-string">&quot;/user/findAll&quot;</span>path=<span class="hljs-string">&quot;/user&quot;</span>get请求<br><span class="hljs-function"><span class="hljs-title">findAll</span>(<span class="hljs-params"></span>)</span>&#123;&#125;    <span class="hljs-function"><span class="hljs-title">findAll</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><br>path=<span class="hljs-string">&quot;/user/delete?id=xxx&quot;</span>     path=<span class="hljs-string">&quot;/user/&#123;id&#125;&quot;</span>      <span class="hljs-keyword">delete</span>请求<br><span class="hljs-function"><span class="hljs-title">delete</span>(<span class="hljs-params">Integer id</span>)</span>&#123;&#125;<span class="hljs-function"><span class="hljs-title">delete</span>(<span class="hljs-params">Integer id</span>)</span>&#123;&#125;<br><br></code></pre></td></tr></table></figure><br><h4 id="Solve："><a href="#Solve：" class="headerlink" title="Solve："></a>Solve：</h4><p>自己编写一个函数，根据 http 请求的类型和请求体里面的参数分发（或者说路由）给不同的函数进行处理。</p><p>我们可以在 customer.py 中定义如下 <strong>dispatcher</strong> 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dispatcher</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-comment"># 将请求参数统一放入request 的 params 属性中，方便后续处理</span><br><br>    <span class="hljs-comment"># GET请求 参数在url中，通过 request 对象的 GET 属性获取</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        request.params = request.GET<br><br>    <span class="hljs-comment"># POST/PUT/DELETE 请求 参数 从 request 对象的 body 属性中获取</span><br>    <span class="hljs-keyword">elif</span> request.method <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;POST&#x27;</span>,<span class="hljs-string">&#x27;PUT&#x27;</span>,<span class="hljs-string">&#x27;DELETE&#x27;</span>]:<br>        <span class="hljs-comment"># 根据接口，POST/PUT/DELETE 请求的消息体都是 json格式</span><br>        request.params = json.loads(request.body)<br><br><br>    <span class="hljs-comment"># 根据不同的action分派给不同的函数进行处理</span><br>    action = request.params[<span class="hljs-string">&#x27;action&#x27;</span>]<br>    <span class="hljs-keyword">if</span> action == <span class="hljs-string">&#x27;list_customer&#x27;</span>:<br>        <span class="hljs-keyword">return</span> listcustomers(request)<br>    <span class="hljs-keyword">elif</span> action == <span class="hljs-string">&#x27;add_customer&#x27;</span>:<br>        <span class="hljs-keyword">return</span> addcustomer(request)<br>    <span class="hljs-keyword">elif</span> action == <span class="hljs-string">&#x27;modify_customer&#x27;</span>:<br>        <span class="hljs-keyword">return</span> modifycustomer(request)<br>    <span class="hljs-keyword">elif</span> action == <span class="hljs-string">&#x27;del_customer&#x27;</span>:<br>        <span class="hljs-keyword">return</span> deletecustomer(request)<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;ret&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;不支持该类型http请求&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure><p>该函数把请求消息中的参数统一放入到 request 请求对象的 params 属性中。</p><p>params 属性被做成一个<strong>字典</strong>类型 ， 方便后面的处理函数来获取消息中的参数。</p><p>然后 <strong>dispatch 函数再根据请求的类型和 action 参数的值决定由那个函数具体处理该请求消息</strong>。</p><p>比如 action 参数为 ‘add_customer’ 的请求就由 addcustomer 函数进行处理。</p><p>接下来，根据 API 接口 ，凡是 API 请求url为 <code>/api/mgr/customers</code> 的，都属于客户相关的API， 都应该交由我们上面定义的dispatch函数进行分派处理。</p><ul><li>在总路由文件 <code>bysms/urls.py</code> 中定义了如下部分：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 凡是 url 以 api/mgr  开头的，</span><br><span class="hljs-comment"># 都根据 mgr.urls 里面的 子路由表进行路由</span><br>path(<span class="hljs-string">&#x27;api/mgr/&#x27;</span>, include(<span class="hljs-string">&#x27;mgr.urls&#x27;</span>)),<br></code></pre></td></tr></table></figure><ul><li>在 mgr 目录下面添加 urls.py 路由文件， 并加入如下声明：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><br><span class="hljs-keyword">from</span> mgr <span class="hljs-keyword">import</span> customer<br><br>urlpatterns = [<br><br>    path(<span class="hljs-string">&#x27;customers&#x27;</span>, customer.dispatcher),<br>]<br></code></pre></td></tr></table></figure><p>这样，<strong>凡是 API 请求url为 /api/mgr/customers 的，都交由我们上面定义的dispatch函数进行分派处理。</strong></p><br><br><h2 id="列出客户"><a href="#列出客户" class="headerlink" title="列出客户"></a>列出客户</h2><p>通常数据资源的增删改查里面的查就是查看，对应的就是列出数据资源。</p><p>根据接口文档，列出客户数据接口，后端返回的数据格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;ret&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;retlist&quot;</span>: [<br>        &#123;<br>            <span class="hljs-attr">&quot;address&quot;</span>: <span class="hljs-string">&quot;江苏省常州武进市白云街44号&quot;</span>,<br>            <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;武进市 袁腾飞&quot;</span>,<br>            <span class="hljs-attr">&quot;phonenumber&quot;</span>: <span class="hljs-string">&quot;13886666666&quot;</span><br>        &#125;,<br>        <br>        &#123;<br>            <span class="hljs-attr">&quot;address&quot;</span>: <span class="hljs-string">&quot;北京海淀区&quot;</span>,<br>            <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;北京海淀区代理 蔡国庆&quot;</span>,<br>            <span class="hljs-attr">&quot;phonenumber&quot;</span>: <span class="hljs-string">&quot;13990123456&quot;</span><br>        &#125;<br>    ]              <br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们无需将数据库中获取的数据转化为供浏览器展示的HTML。</p><p>在前后端分离的开发架构中，如何展示数据是前端的事情，我们后端只需要根据接口文档， 返回原始数据就行。</p><p>我们可以使用如下的函数来返回数据库的所有的客户数据信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> common.models <span class="hljs-keyword">import</span> Customer<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">listcustomers</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-comment"># 返回一个 QuerySet 对象 ，包含所有的表记录</span><br>    qs = Customer.objects.values()<br><br>    <span class="hljs-comment"># 将 QuerySet 对象 转化为 list 类型</span><br>    <span class="hljs-comment"># 否则不能 被 转化为 JSON 字符串</span><br>    retlist = <span class="hljs-built_in">list</span>(qs)<br><br>    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;ret&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;retlist&#x27;</span>: retlist&#125;)<br></code></pre></td></tr></table></figure><br><br><h2 id="临时取消-CSRF-校验"><a href="#临时取消-CSRF-校验" class="headerlink" title="临时取消 CSRF 校验"></a>临时取消 CSRF 校验</h2><p>缺省创建的项目， Django 会启用一个 <strong>CSRF （跨站请求伪造） 安全防护机制</strong>。</p><p>在这种情况下， 所有的 <strong>POST、PUT</strong> 类型的请求都必须在HTTP请求头中携带用于校验的数据。</p><p>为了简单起见，我们先临时取消掉CSRF的校验机制，等以后有需要再打开。</p><p>要临时取消掉CSRF的 校验机制，非常简单，只需要在项目的配置文件 <code>bysms/settings.py</code> 中 <code>MIDDLEWARE</code> 配置项里注释掉 ‘django.middleware.csrf.CsrfViewMiddleware’ 即可。</p><p>如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">MIDDLEWARE = [<br>    <span class="hljs-string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class="hljs-comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span><br>    <span class="hljs-string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>]<br></code></pre></td></tr></table></figure><br><br><h2 id="添加客户"><a href="#添加客户" class="headerlink" title="添加客户"></a>添加客户</h2><p>通常数据资源的 增查改删 里面的 增 就是 添加，对应的就是添加数据资源。</p><p>根据接口文档，添加客户数据接口，前端提供的客户数据格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;action&quot;</span>:<span class="hljs-string">&quot;add_customer&quot;</span>,<br>    <span class="hljs-attr">&quot;data&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;武汉市桥西医院&quot;</span>,<br>        <span class="hljs-attr">&quot;phonenumber&quot;</span>:<span class="hljs-string">&quot;13345679934&quot;</span>,<br>        <span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;武汉市桥西医院北路&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以使用如下的函数来处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addcustomer</span>(<span class="hljs-params">request</span>):</span><br><br>    info = request.params[<span class="hljs-string">&#x27;data&#x27;</span>]<br><br>    <span class="hljs-comment"># 从请求消息中 获取要添加客户的信息</span><br>    <span class="hljs-comment"># 并且插入到数据库中</span><br>    <span class="hljs-comment"># 返回值 就是对应插入记录的对象 </span><br>    record = Customer.objects.create(name=info[<span class="hljs-string">&#x27;name&#x27;</span>] ,<br>                            phonenumber=info[<span class="hljs-string">&#x27;phonenumber&#x27;</span>] ,<br>                            address=info[<span class="hljs-string">&#x27;address&#x27;</span>])<br><br><br>    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;ret&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;id&#x27;</span>:record.<span class="hljs-built_in">id</span>&#125;)<br></code></pre></td></tr></table></figure><p><code>Customer.objects.create</code> 方法就可以添加一条Customer表里面的记录。</p><br><br><h2 id="修改客户信息"><a href="#修改客户信息" class="headerlink" title="修改客户信息"></a>修改客户信息</h2><p>数据资源的 增查改删 里面的改就是改动，对应的就是修改数据资源。</p><p>根据接口文档，修改客户数据接口，前端提供的数据格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;action&quot;</span>:<span class="hljs-string">&quot;modify_customer&quot;</span>,<br>    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-attr">&quot;newdata&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;武汉市桥北医院&quot;</span>,<br>        <span class="hljs-attr">&quot;phonenumber&quot;</span>:<span class="hljs-string">&quot;13345678888&quot;</span>,<br>        <span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;武汉市桥北医院北路&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以使用如下的函数来处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">modifycustomer</span>(<span class="hljs-params">request</span>):</span><br><br>    <span class="hljs-comment"># 从请求消息中 获取修改客户的信息</span><br>    <span class="hljs-comment"># 找到该客户，并且进行修改操作</span><br>    <br>    customerid = request.params[<span class="hljs-string">&#x27;id&#x27;</span>]<br>    newdata    = request.params[<span class="hljs-string">&#x27;newdata&#x27;</span>]<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 根据 id 从数据库中找到相应的客户记录</span><br>        customer = Customer.objects.get(<span class="hljs-built_in">id</span>=customerid)<br>    <span class="hljs-keyword">except</span> Customer.DoesNotExist:<br>        <span class="hljs-keyword">return</span>  &#123;<br>                <span class="hljs-string">&#x27;ret&#x27;</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">f&#x27;id 为`<span class="hljs-subst">&#123;customerid&#125;</span>`的客户不存在&#x27;</span><br>        &#125;<br><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;name&#x27;</span> <span class="hljs-keyword">in</span>  newdata:<br>        customer.name = newdata[<span class="hljs-string">&#x27;name&#x27;</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;phonenumber&#x27;</span> <span class="hljs-keyword">in</span>  newdata:<br>        customer.phonenumber = newdata[<span class="hljs-string">&#x27;phonenumber&#x27;</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;address&#x27;</span> <span class="hljs-keyword">in</span>  newdata:<br>        customer.address = newdata[<span class="hljs-string">&#x27;address&#x27;</span>]<br><br>    <span class="hljs-comment"># 注意，一定要执行save才能将修改信息保存到数据库</span><br>    customer.save()<br><br>    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;ret&#x27;</span>: <span class="hljs-number">0</span>&#125;)<br></code></pre></td></tr></table></figure><br><br><h2 id="删除客户"><a href="#删除客户" class="headerlink" title="删除客户"></a>删除客户</h2><p>数据资源的 增查改删 里面的 <strong>删</strong> 就是 删除，对应的就是删除数据资源。</p><p>根据接口文档，删除客户数据接口，前端只需要提供要删除的客户的ID，数据格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;action&quot;</span>:<span class="hljs-string">&quot;del_customer&quot;</span>,<br>    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">6</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以使用如下的函数来处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deletecustomer</span>(<span class="hljs-params">request</span>):</span><br><br>    customerid = request.params[<span class="hljs-string">&#x27;id&#x27;</span>]<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 根据 id 从数据库中找到相应的客户记录</span><br>        customer = Customer.objects.get(<span class="hljs-built_in">id</span>=customerid)<br>    <span class="hljs-keyword">except</span> Customer.DoesNotExist:<br>        <span class="hljs-keyword">return</span>  &#123;<br>                <span class="hljs-string">&#x27;ret&#x27;</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">f&#x27;id 为`<span class="hljs-subst">&#123;customerid&#125;</span>`的客户不存在&#x27;</span><br>        &#125;<br><br>    <span class="hljs-comment"># delete 方法就将该记录从数据库中删除了</span><br>    customer.delete()<br><br>    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;ret&#x27;</span>: <span class="hljs-number">0</span>&#125;)<br></code></pre></td></tr></table></figure><br><br><h2 id="测试后端代码"><a href="#测试后端代码" class="headerlink" title="测试后端代码"></a>测试后端代码</h2><h5 id="Postman——接口测试工具"><a href="#Postman——接口测试工具" class="headerlink" title="Postman——接口测试工具"></a>Postman——接口测试工具</h5><p>在做接口测试的时候，Postman相当于一个客户端，它可以模拟用户发起的各类HTTP请求，将请求数据发送至服务端，获取对应的响应结果，从而验证响应中的结果数据是否和预期值相匹配。</p><br><p>测试结果：（查询客户）</p><img src="/images/image-20220201233836462.png" alt="image-20220201233836462" style="zoom:50%;">]]></content>
    
    
    <categories>
      
      <category>Django后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>实现登录</title>
    <link href="/2022/02/09/Django%E5%90%8E%E7%AB%AF/%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95/"/>
    <url>/2022/02/09/Django%E5%90%8E%E7%AB%AF/%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="实现登录"><a href="#实现登录" class="headerlink" title="实现登录"></a>实现登录</h1><p>前面我们实现了服务端管理员的一些增删改查操作，现在我们根据API接口文档来实现 <strong>管理员登录</strong> 功能。</p><p>API接口文档内容如下：</p><img src="/images/image-20220203114659012.png" alt="image-20220203114659012" style="zoom: 40%;"><img src="/images/image-20220203114734710.png" alt="image-20220203114734710" style="zoom:40%;"><img src="/images/image-20220203114757585.png" alt="image-20220203114757585" style="zoom:40%;"><br><br><h2 id="处理登录、登出请求"><a href="#处理登录、登出请求" class="headerlink" title="处理登录、登出请求"></a>处理登录、登出请求</h2><p>我们可以在mgr目录里面创建一个代码文件 <code>sign_in_out.py</code>，用来处理 <strong>管理员登录和登出</strong> 的API请求。</p><p>如何处理登录请求呢，无非就把请求参数里面的用户名、密码取出来， 和数据库中记录的用户名密码进行比对。</p><p>如果和数据库中记录的一致就认为是认证通过，否则就是不通过。</p><br><p>Django中有个内置app 名为 <code>django.contrib.auth</code> ，缺省包含在项目Installed App（配置文件里的settings.py）设置中。</p><p>这个 app 的 models 定义中包含了一张用户表，名为 <code>auth_user</code> 。</p><p>当我们执行 migrate 创建数据库表时就会为我们创建用户表 auth_user，如下所示：</p><img src="/images/image-20220203182659211.png" alt="image-20220203182659211" style="zoom:50%;"><p><code>django.contrib.auth</code> 这个app 已经 <strong>为我们做好了登录验证功能</strong>。</p><p>我们只需要使用这个app库里面的方法就可以了。</p><p>Django的文档就给出了登录和登出代码范例，我们稍微修改一下。</p><p>我们在 mgr 目录下面， 创建一个 <code>sign_in_out.py</code> 文件。</p><p>在该文件中，输入如下内容:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<br><br><span class="hljs-keyword">from</span> django.contrib.auth <span class="hljs-keyword">import</span> authenticate, login, logout<br><br><span class="hljs-comment"># 登录处理</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">signin</span>(<span class="hljs-params"> request</span>):</span><br>    <span class="hljs-comment"># 从 HTTP POST 请求中获取用户名、密码参数</span><br>    userName = request.POST.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>    passWord = request.POST.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br><br>    <span class="hljs-comment"># 使用 Django auth 库里面的 方法校验用户名、密码</span><br>    user = authenticate(username=userName, password=passWord)<br>    <br>    <span class="hljs-comment"># 如果能找到用户，并且密码正确</span><br>    <span class="hljs-keyword">if</span> user <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">if</span> user.is_active:<br>            <span class="hljs-keyword">if</span> user.is_superuser:<br>                login(request, user)<br>                <span class="hljs-comment"># 在session中存入用户类型</span><br>                request.session[<span class="hljs-string">&#x27;usertype&#x27;</span>] = <span class="hljs-string">&#x27;mgr&#x27;</span><br><br>                <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;ret&#x27;</span>: <span class="hljs-number">0</span>&#125;)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;ret&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;请使用管理员账户登录&#x27;</span>&#125;)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;ret&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;用户已经被禁用&#x27;</span>&#125;)<br>        <br>    <span class="hljs-comment"># 否则就是用户名、密码有误</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;ret&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;用户名或者密码错误&#x27;</span>&#125;)<br><br><br><span class="hljs-comment"># 登出处理</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">signout</span>(<span class="hljs-params"> request</span>):</span><br>    <span class="hljs-comment"># 使用登出方法</span><br>    logout(request)<br>    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;ret&#x27;</span>: <span class="hljs-number">0</span>&#125;)<br></code></pre></td></tr></table></figure><br><br><h2 id="创建-url路由"><a href="#创建-url路由" class="headerlink" title="创建 url路由"></a>创建 url路由</h2><p> 我们已经在总路由文件 <code>urls.py</code> 中 添加了如下路由记录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;api/mgr/&#x27;</span>, include(<span class="hljs-string">&#x27;mgr.urls&#x27;</span>))<br></code></pre></td></tr></table></figure><p>现在，我们只需要在 mgr 目录下面的子路由文件 <code>urls.py</code> 里添加如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> mgr <span class="hljs-keyword">import</span> sign_in_out<br><br>urlpatterns = [<br><br>    path(<span class="hljs-string">&#x27;signin&#x27;</span>, sign_in_out.signin),<br>    path(<span class="hljs-string">&#x27;signout&#x27;</span>, sign_in_out.signout),<br><br>]<br></code></pre></td></tr></table></figure><p>这样就表示：</p><p>如果有HTTP请求 url是 <code>/api/mgr/signin</code> 就由 sign_in_out.py 里面的signin 函数处理，</p><p>如果有HTTP请求 url是 <code>/api/mgr/signout</code> 就由 sign_in_out.py 里面的signout 函数处理。</p><br><br><h2 id="Django内置用户表"><a href="#Django内置用户表" class="headerlink" title="Django内置用户表"></a>Django内置用户表</h2><p>前面说过，Django内置 django.contrib.auth 包含了内置用户表的定义 和 登录认证的功能。</p><p>如果我们要扩展这个表的字段，或者实现用户记录的添加、修改功能，推荐的做法<a href="http://www.byhy.net/tut/webdev/django/e01/">参考该教程</a>。</p>]]></content>
    
    
    <categories>
      
      <category>Django后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>前后端分离框架</title>
    <link href="/2022/02/09/Django%E5%90%8E%E7%AB%AF/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%9E%B6%E6%9E%84/"/>
    <url>/2022/02/09/Django%E5%90%8E%E7%AB%AF/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>现在随着浏览器中 javascript 解释器性能的突飞猛进，以及一些前端模板库和框架的流行。很多架构师将页面的html 内容生成的任务放到前端。</p><p>这样服务端（后端）就<strong>只负责提供数据</strong>，界面的构成全部在前端（浏览器前端或者手机前端）进行称之为前端渲染。只是这个工作在前端执行，使用前端的框架库去完成，比如 Angular，React，Vue。</p><p>这样界面完全交给前端开发人员去做，后端开发只需要提供前端界面所需要的数据就行了。</p><p>前端和后端之间的交互就完全是业务数据了。</p><p>这样需要定义好前端和后端交互数据的接口。</p><p>目前通常这样的接口设计最普遍的就是使用 REST 风格的 API 接口。</p><ul><li>前端通过 API 接口 从后端获取数据展示在界面上。</li><li>前端通过 API 接口 告诉后端需要更新的数据是什么。</li></ul><br><p>注意：需要Django返回的信息，通常都是所谓的 <strong>动态</strong> 数据信息。 比如：用户信息，药品信息，订单信息等等。</p><p>这些信息通常都是存在数据库中，这些信息是会随着系统的使用发生变化的。</p><p>而 <strong>静态</strong> 信息，比如： 页面HTML文档、css文档、图片、视频等，是不应该由 Django 负责返回数据的。</p><p>这些数据通常都是由其他的静态资源服务软件，比如 Nginx、Varnish等等，返回给前端。这些软件都会有效的对静态数据进行缓存，大大提高服务效率。在实际的项目中，往往还会直接使用静态文件云服务（ OSS + CDN ）提供静态数据的访问服务。</p><p>总之，Django处理并返回的应该是动态业务数据信息。</p>]]></content>
    
    
    <categories>
      
      <category>Django后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>分页和过滤</title>
    <link href="/2022/02/09/Django%E5%90%8E%E7%AB%AF/%E5%88%86%E9%A1%B5%E5%92%8C%E8%BF%87%E6%BB%A4/"/>
    <url>/2022/02/09/Django%E5%90%8E%E7%AB%AF/%E5%88%86%E9%A1%B5%E5%92%8C%E8%BF%87%E6%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>我们的系统在列出药品、客户、订单等数据的时候，都是用一张表在一页里面显示全部内容。</p><p>但是如果我们有大量的数据，比如系统中存储10万种药品，这个表将会非常的长，需要后端程序从数据库中读取大量的数据，并传递给前端。而用户通常只需要看其中的一点点数据，这是非常大的性能浪费。</p><p>解决方案：<strong>分页</strong> 和 <strong>过滤</strong></p><ul><li>分页：每次只读取一页的信息返回给前端</li><li>过滤：根据用户提供的筛选条件，只读取符合条件的部分信息</li></ul><br><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>既然要分页，那么前端发送的请求中需要携带 两个信息： <code>每页包含多少条记录</code> 和 <code>需要获取第几页</code></p><p>我们定义列出数据请求中添加 2个url 参数： <code>pagesize</code> 和 <code>pagenum</code> 分别对应这两个信息。</p><p>以列出药品的代码为例， 我们可以修改 listmedicine 函数，如下：</p><p>（利用 Django 的分页器 Paginator ）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 增加对分页的支持</span><br><span class="hljs-keyword">from</span> django.core.paginator <span class="hljs-keyword">import</span> Paginator, EmptyPage<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">listmedicine</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 返回一个 QuerySet 对象 ，包含所有的表记录</span><br>        qs = Medicine.objects.values()<br><br>        <span class="hljs-comment"># 要获取的第几页</span><br>        pagenum = request.params[<span class="hljs-string">&#x27;pagenum&#x27;</span>]<br><br>        <span class="hljs-comment"># 每页要显示多少条记录</span><br>        pagesize = request.params[<span class="hljs-string">&#x27;pagesize&#x27;</span>]<br><br>        <span class="hljs-comment"># 返回一个 QuerySet 对象 ，包含所有的表记录</span><br>        qs = Medicine.objects.values()<br><br>        <span class="hljs-comment"># 使用分页对象，设定每页多少条记录</span><br>        pgnt = Paginator(qs, pagesize)<br><br>        <span class="hljs-comment"># 从数据库中读取数据，指定读取其中第几页</span><br>        page = pgnt.page(pagenum)<br><br>        <span class="hljs-comment"># 将 QuerySet 对象 转化为 list 类型</span><br>        retlist = <span class="hljs-built_in">list</span>(page)<br>         <br>        <span class="hljs-comment"># total指定了 一共有多少数据</span><br>        <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;ret&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;retlist&#x27;</span>: retlist,<span class="hljs-string">&#x27;total&#x27;</span>: pgnt.count&#125;)<br><br>    <span class="hljs-keyword">except</span> EmptyPage:<br>        <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;ret&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;retlist&#x27;</span>: [], <span class="hljs-string">&#x27;total&#x27;</span>: <span class="hljs-number">0</span>&#125;)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;ret&#x27;</span>: <span class="hljs-number">2</span>,  <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">f&#x27;未知错误\n<span class="hljs-subst">&#123;traceback.format_exc()&#125;</span>&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure><p>其中，这行代码创建了分页对象，在初始化参数里面设定每页多少条记录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pgnt = Paginator(qs, pagesize)<br></code></pre></td></tr></table></figure><p>返回的分页对象赋值给变量 pgnt。</p><p>然后一页的数据就可以通过 pgnt.page(pagenum) 获取。</p><p>而总共有多少页，通过 pgnt.count 得到。</p><br><br><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><p>参考 <a href="http://www.byhy.net/tut/webdev/django/15/#%E8%BF%87%E6%BB%A4">http://www.byhy.net/tut/webdev/django/15/#%E8%BF%87%E6%BB%A4</a></p>]]></content>
    
    
    <categories>
      
      <category>Django后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Web 开发简介及前后端分离</title>
    <link href="/2022/02/09/Django%E5%90%8E%E7%AB%AF/Web%20%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    <url>/2022/02/09/Django%E5%90%8E%E7%AB%AF/Web%20%E5%BC%80%E5%8F%91%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<p>web系统，通常可以分为 ： <strong>客户端</strong> 和 <strong>服务端</strong> 。</p><p>BS 模式是一种特殊的 CS 模式。</p><p>比如，手机应用（比如微信）就是 客户端， 腾讯公司的微信服务程序（运行在腾讯的机房里面）就是服务端。</p><p>客户端称之为前端 ，服务端称之为后端。</p><p>我们先关注浏览器前端， 也就是web前端。</p><br><h2 id="Web-前端开发"><a href="#Web-前端开发" class="headerlink" title="Web 前端开发"></a>Web 前端开发</h2><p>Web 前端开发的重点是 ： 提供用户界面给用户进行观看和操作。</p><p>前端开发文件（html，css，js）没法直接放到浏览器端，都是部署在后端服务器上（有些在cdn上）。</p><p>当我们浏览一个网站的时候，浏览器先通过http协议获取这些文档，然后读取解释它们的内容，生成对应的界面呈现给我们操作。</p><br><h2 id="Web-后端开发"><a href="#Web-后端开发" class="headerlink" title="Web 后端开发"></a>Web 后端开发</h2><p>后端要开发服务进程，处理前端http请求，返回相应的数据。</p><p>通常包括数据的查询、增加、删除、修改。</p><p>通常，后端的开发涉及到：</p><ul><li>静态文件服务方案</li></ul><p>就是前端开发出来的HTML、css、js文件存储在什么地方，使用什么的服务提供给前端浏览器访问。 通常一个比较大型的网站， 静态文件往往会使用单独的服务器专门提供服务，甚至一部分特别消耗带宽的数据（比如视频、图片）会使用第三方的云服务厂商（比如阿里云的cdn和oss服务）。</p><ul><li><p>API 接口设计， 就是 定义 前端和后端交互接口规范。</p><p>目前流行的是REST API 风格的接口，但是需要我们设计具体的API请求和响应消息的组成细节。</p><p>这个通常应该是架构师设计的， 但是往往这工作经常会落到后端工程师头上。实际上 很多公司里面，系统架构师 也会做后端开发的工作。</p></li><li><p>数据库存储方案，比如：选择什么样的数据库，包括 关系型和非关系型的数据库。</p></li><li><p>数据库表结构设计， 要能合理、高效的存储业务数据，这样才能高效查询、修改各种关联性的数据。</p></li><li><p>为了提高性能， 需要决定使用怎样的 缓存服务 和 异步任务服务</p></li><li><p>还有其它种种特殊的考虑，比如要熟悉目前日益流行的云存储技术，将有的数据，如图片，视频等 合理存储在云端</p></li><li><p>有的系统还需要有大数据分析的需求要后端高效实现。</p></li></ul><br><h2 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h2><p>前后端分离是目前一种非常流行的开发模式，它使项目的分工更加明确：</p><ul><li>后端：负责处理、存储数据</li><li>前端：负责显示数据</li></ul><h4 id="职责分离："><a href="#职责分离：" class="headerlink" title="职责分离："></a>职责分离：</h4><ul><li>前后端仅仅通过异步接口(AJAX / JSONP)来编程</li><li>前后端都各自有自己的开发流程，构建工具，测试集合</li><li>关注点分离，前后端变得相对独立并解耦合</li></ul><img src="/images/image-20220113235906612.png" alt="image-20220113235906612" style="zoom: 50%;"><br><h4 id="Vue-Django"><a href="#Vue-Django" class="headerlink" title="Vue + Django:"></a>Vue + Django:</h4><ul><li><p>Vue：写好页面内容，准备好 ajax 请求</p></li><li><p>Django：写好 url 配置，针对不同的 url 请求写好对应的处理函数，比如返回需要的 json 数据等。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Django后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>session 和 token</title>
    <link href="/2022/02/09/Django%E5%90%8E%E7%AB%AF/session%20%E5%92%8C%20token/"/>
    <url>/2022/02/09/Django%E5%90%8E%E7%AB%AF/session%20%E5%92%8C%20token/</url>
    
    <content type="html"><![CDATA[<h1 id="session-和-token"><a href="#session-和-token" class="headerlink" title="session 和 token"></a>session 和 token</h1><p>前面我们已经根据接口文档，编写代码，对前端发来的 Customer API请求进行处理了。</p><p>并且我们也编写了用户登录处理的代码。</p><p>但是还存在一个问题：前端发来的 Customer API 请求， 我们后端代码就直接处理了， <strong>并没有验证</strong> 这个请求是不是已经登录的管理员发出的（或者是否有权限等）。</p><p>如果是这样，客户端可以不需要登录，直接访问登录后的主页。</p><p>这就需要我们在处理 Customer API 请求前， 判断发出该请求的用户是否登录了。</p><p>对于<strong>请求消息的合法性验证</strong>， 通常有两种方案： <strong>session</strong> 和 <strong>token</strong></p><br><br><h2 id="session-方案"><a href="#session-方案" class="headerlink" title="session 方案"></a>session 方案</h2><p><strong>session</strong> 就是 <strong>会话</strong> 的意思。</p><p>session 方案的原理如下： </p><ul><li><p>服务端在数据库中保存一张session表。 这张表记录了每次用户登录的相关信息。</p><p>具体记录什么信息，不同的系统各有差异，通常会记录该用户的 ID 、姓名、登录名之类的。</p><p>Django 中该表名字就叫 django_session, 如下所示：</p><img src="/images/image-20220204114144805.png" alt="image-20220204114144805" style="zoom:50%;"><p>可以发现 sessionid 通常就是一串字符串用来标记一个session的。 而session对应的数据在这里是加密的。通过这张表，服务端可以根据 session号（通常叫session ID） 查到 session 的信息数据。</p></li><li><p><strong>在用户登录成功后， 服务端就在数据库session表中创建一条记录，记录这次会话。</strong></p><p>也就是创建一个新的 sessionid 插入到该表中。</p><p>同时也放入一些 该session对应的数据到记录的数据字段中，比如登录用户的信息。</p><p><strong>然后在该登录请求的HTTP响应消息中， 头字段 Set-Cookie 里填入 sessionid 数据。</strong></p><p>类似这样：</p><p><code>Set-Cookie: sessionid=6qu1cuk8cxvtf4w9rjxeppexh2izy0hh</code></p><p>根据http协议， 这个 <strong>Set-Cookie</strong> 字段的意思就是<strong>要求前端将其中的数据存入 cookie 中。 并且随后访问该服务端的时候， 在HTTP请求消息中必须带上这些 cookie 数据。</strong></p><p>cookie 通常就是存储在客户端浏览器的一些数据。 服务端可以通过http响应消息要求浏览器存储一些数据。</p><p><strong>以后每次访问同一个网站服务，必须在HTTP请求中再带上这些cookie里面的数据。</strong></p><p>cookie数据由多个键值对组成，比如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sessionid</span>=<span class="hljs-number">6</span>qu<span class="hljs-number">1</span>cuk<span class="hljs-number">8</span>cxvtf<span class="hljs-number">4</span>w<span class="hljs-number">9</span>rjxeppexh<span class="hljs-number">2</span>izy<span class="hljs-number">0</span>hh<br><span class="hljs-attribute">username</span>=byhy<br><span class="hljs-attribute">favorite</span>=phone_laptop_watch<br></code></pre></td></tr></table></figure></li><li><p>该用户的后续操作，<strong>触发的HTTP请求，都会在请求头的 Cookie 字段带上前面说的sessionid</strong> 。</p><p>如下所示：</p><p><code>Cookie: sessionid=6qu1cuk8cxvtf4w9rjxeppexh2izy0hh</code></p><p><strong>服务端接受到该请求后，只需要到session表中查看是否有该 sessionid 对应的记录，这样就可以判断这个请求是否是前面已经登录的用户发出的。</strong></p><p><strong>如果不是，就可以拒绝服务，重定向http请求到登录页面让用户登录。</strong></p></li></ul><br><br><h2 id="token机制"><a href="#token机制" class="headerlink" title="token机制"></a>token机制</h2><p>使用session机制验证用户请求的合法性的主要缺点有两个</p><ul><li><p>性能问题</p><p>因为验证请求是根据sessionid 到数据库中查找session表的，而数据库操作是服务端常见的性能瓶颈，尤其是当用户量比较大的时候。</p></li><li><p>扩展性问题</p><p>当系统用户特别多的时候，后端处理请求的服务端通常由多个，部署在多个节点上。 但是多个节点都要访问session表，这样就要求数据库服务能够被多个节点访问，不方便切分数据库以提高性能。</p></li></ul><p>最近比较流行的一种token机制可以比较好的解决这些问题。</p><p>token 简单来说，就是包含了数据信息和校验信息的数据包。</p><p>Session 机制是把数据信息（比如session表）放到服务端，<strong>服务端数据是客户无法篡改的</strong>，从而保证验证的可靠性。</p><p>而 token机制数据信息直接传给客户端，客户每次请求再携带过来给服务端。服务端无需查找数据库，直接根据token里面的数据信息进行校验。</p><p>那么问题来了：客户数据直接发送给客户端，如果客户端篡改了数据， 比如把自己改为 vip 用户怎么办？ 服务端怎么验证数据有没有被客户端篡改（术语叫完整性验证）呢？</p><p>token 机制的原理如下：</p><ul><li><p>服务端配置一个<strong>密钥</strong>（secret key），该密钥是服务端私密保存的，不能外泄</p></li><li><p>在用户登录成功后， 服务端将 <strong>用户的信息数据 + 密钥</strong> 一起进行一个哈希计算， 得到一个哈希值。</p><p>注意：哈希算法保证了， 哈希值只能根据同样的源数据得到。</p><p>如果谁修改了用户信息， <strong>除非他知道密钥</strong>，再次使用哈希算法才能得到正确的新的哈希值。</p><p>所以这个哈希值，就是用来校验数据是否被修改的。</p><p>然后将用户数据信息和哈希值一起做成一个字节串 ，这个字节串就称之为 <strong>token</strong> 。</p><p>大家可以发现 token 里面 <strong>包含了用户数据信息 和 用于校验完整性的哈希值</strong>。</p><p>然后，服务端返回给客户的HTTP响应中返回了这个token。 通常token是放在HTTP响应的头部中的。 具体哪个头部字段没有规定，开发者可以自行定义。</p></li><li><p><strong>该用户的后续操作，触发的HTTP API请求， 会在请求消息里面带上 token 。</strong></p><p>具体在请求消息的什么地方存放 token， 由开发者自己定义，通常也存放在 http 请求的头部中。</p><p>服务端接收到请求后，会根据数据信息和密钥使用哈希算法再次生成哈希值。</p><p>如果客户修改了数据信息， 因为他不知道密钥，没法得到正确的新的哈希值，那么服务端根据 <strong>篡改后的数据+密钥</strong> 得到的新哈希值一定和保存在token中的老哈希值 不同，就知道数据被修改了。</p><p>如果客户没有修改数据，服务端根据原来的数据+密钥得到的哈希值和保存在token中原来的哈希值一致，就校验通过。</p><p>校验通过后，就确信了数据没有被修改，可以放心的使用 token 里面的数据 进行后续的业务逻辑处理了。</p><p>上述处理中，由于不需要服务端访问查找数据库，从而大大了提高了处理性能。</p></li></ul><br><br><h2 id="使用session验证客户端请求"><a href="#使用session验证客户端请求" class="headerlink" title="使用session验证客户端请求"></a>使用session验证客户端请求</h2><p>Django 对 session 的支持是缺省就有的。</p><p>前面处理登录的函数中有如下箭头所指的一行代码：</p><img src="/images/image-20220204123505543.png" alt="image-20220204123505543" style="zoom:50%;"><p>这行代码的作用就是在登录认证后，将用户类型保存到session数据中， 也就是存入前面数据库的那张图的会话数据记录中。</p><p>Django 框架会自动在 HTTP 响应消息头中加入类似下面的 sessionid cookie：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">Set-<span class="hljs-symbol">Cookie:</span> sessionid=<span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br></code></pre></td></tr></table></figure><p>后续的HTTP请求就会携带这个sessionid，</p><p>我们处理 URL 以 <code>/api/mgr</code> 开头的 API 请求代码里面，需加上一个验证逻辑。</p><p>验证请求的 cookie 里面是否有 sessionid，并且检查session表，看看是否存在 session_key 为该 sessionid 的一条记录，该记录的数据字典里面是否包含了 usertype 为 mgr 的数据。</p><p>前面实现的代码中，这些请求都是在 dispatcher 入口函数处理的，我们就只需在该dispatch中进行验证。</p><p>修改 <code>mgr/customer.py</code> 的dispatcher 函数，在前面加上如下代码：</p><p>（其中 redirect 为重定向）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 根据session判断用户是否是登录的管理员用户</span><br>   <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;usertype&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> request.session:<br>       <span class="hljs-keyword">return</span> JsonResponse(&#123;<br>           <span class="hljs-string">&#x27;ret&#x27;</span>: <span class="hljs-number">302</span>,<br>           <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;未登录&#x27;</span>,<br>           <span class="hljs-string">&#x27;redirect&#x27;</span>: <span class="hljs-string">&#x27;/mgr/sign.html&#x27;</span>&#125;, <br>           status=<span class="hljs-number">302</span>)<br><br>   <span class="hljs-keyword">if</span> request.session[<span class="hljs-string">&#x27;usertype&#x27;</span>] != <span class="hljs-string">&#x27;mgr&#x27;</span> :<br>       <span class="hljs-keyword">return</span> JsonResponse(&#123;<br>           <span class="hljs-string">&#x27;ret&#x27;</span>: <span class="hljs-number">302</span>,<br>           <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;用户非mgr类型&#x27;</span>,<br>           <span class="hljs-string">&#x27;redirect&#x27;</span>: <span class="hljs-string">&#x27;/mgr/sign.html&#x27;</span>&#125; ,<br>           status=<span class="hljs-number">302</span>)<br></code></pre></td></tr></table></figure><p>注意 request 对象里面的 session 属性对应的就是 session 记录里面的数据。</p><p>该数据对象类似字典，所以检查是否有 usertype 类型为 mgr 的信息，就是这样写：</p><p><code>if request.session[&#39;usertype&#39;] != &#39;mgr&#39; </code></p><br><br><h2 id="基于Session、Token的身份验证小结"><a href="#基于Session、Token的身份验证小结" class="headerlink" title="基于Session、Token的身份验证小结"></a>基于Session、Token的身份验证小结</h2><ul><li><p>Cookie 存储在client</p></li><li><p>Session 会话，存储在server，server需要对session进行定期清理</p></li><li><p>Token 服务端验证成功后根据一定规则签发的一个‘令牌’，server端每次收到请求都用相同的规则再次生成’令牌’与其对比，而无需存储。</p></li></ul><h5 id="验证流程："><a href="#验证流程：" class="headerlink" title="验证流程："></a>验证流程：</h5><p>login</p><p>=&gt; 发送http请求，账号密码验证成功</p><p>=&gt; server端通过response Set-Cookie的方式将sessionId传递到clinet作为cookie（后端或前端跳转）</p><p>=&gt; client后续再发送http请求，header自动携带cookie，用于server端鉴权</p><p>=&gt; server端通过http请求头中的sessionId进行鉴权，成功则返回数据，否则报错（重定向到登录页）</p><p>（使用token的差别在于将session换成token，token可以选择放在cookie或localstorage等，在请求时置于header或header中的cookie里）</p>]]></content>
    
    
    <categories>
      
      <category>Django后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ORM关联表、事务</title>
    <link href="/2022/02/09/Django%E5%90%8E%E7%AB%AF/ORM%E5%85%B3%E8%81%94%E8%A1%A8%E3%80%81%E4%BA%8B%E5%8A%A1/"/>
    <url>/2022/02/09/Django%E5%90%8E%E7%AB%AF/ORM%E5%85%B3%E8%81%94%E8%A1%A8%E3%80%81%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="ORM-对关联表的操作"><a href="#ORM-对关联表的操作" class="headerlink" title="ORM 对关联表的操作"></a>ORM 对关联表的操作</h2><p>前面一对多，一对一，多对多关系表，都是通过外键来实现。</p><p>接下来，我们通过一个实例演示 Django ORM 如何操作外键关联关系。</p><p>在 models.py 中定义两个Model，对应两张表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 国家表</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Country</span>(<span class="hljs-params">models.Model</span>):</span><br>    name = models.CharField(max_length=<span class="hljs-number">100</span>)<br><br><span class="hljs-comment"># 学生表， country 字段是国家表的外键，形成一对多的关系</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>(<span class="hljs-params">models.Model</span>):</span><br>    name    = models.CharField(max_length=<span class="hljs-number">100</span>)<br>    grade   = models.PositiveSmallIntegerField()<br>    country = models.ForeignKey(Country,on_delete=models.PROTECT)<br></code></pre></td></tr></table></figure><p>然后执行相关命令使定义生效到数据库中：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations common<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate<br></code></pre></td></tr></table></figure><p>然后，命令行中执行 <code>python manage.py shell</code> ，直接启动Django命令行，输入代码。</p><p>先输入如下代码，创建一些数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> common.models <span class="hljs-keyword">import</span> *<br>c1 = Country.objects.create(name=<span class="hljs-string">&#x27;中国&#x27;</span>)<br>c2 = Country.objects.create(name=<span class="hljs-string">&#x27;美国&#x27;</span>)<br>c3 = Country.objects.create(name=<span class="hljs-string">&#x27;法国&#x27;</span>)<br>Student.objects.create(name=<span class="hljs-string">&#x27;白月&#x27;</span>, grade=<span class="hljs-number">1</span>, country=c1)<br>Student.objects.create(name=<span class="hljs-string">&#x27;黑羽&#x27;</span>, grade=<span class="hljs-number">2</span>, country=c1)<br>Student.objects.create(name=<span class="hljs-string">&#x27;大罗&#x27;</span>, grade=<span class="hljs-number">1</span>, country=c1)<br>Student.objects.create(name=<span class="hljs-string">&#x27;真佛&#x27;</span>, grade=<span class="hljs-number">2</span>, country=c1)<br>Student.objects.create(name=<span class="hljs-string">&#x27;Mike&#x27;</span>, grade=<span class="hljs-number">1</span>, country=c2)<br>Student.objects.create(name=<span class="hljs-string">&#x27;Gus&#x27;</span>,  grade=<span class="hljs-number">1</span>, country=c2)<br>Student.objects.create(name=<span class="hljs-string">&#x27;White&#x27;</span>, grade=<span class="hljs-number">2</span>, country=c2)<br>Student.objects.create(name=<span class="hljs-string">&#x27;Napolen&#x27;</span>, grade=<span class="hljs-number">2</span>, country=c3)<br></code></pre></td></tr></table></figure><br><h3 id="外键表字段访问"><a href="#外键表字段访问" class="headerlink" title="外键表字段访问"></a>外键表字段访问</h3><p>如果你已经获取了一个student对象，要得到他的国家名称只需这样：</p><p><strong>（类Class—表结构；每条数据—类的一个实例）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = Student.objects.get(name=<span class="hljs-string">&#x27;白月&#x27;</span>)<br>s1.country.name<br></code></pre></td></tr></table></figure><p>第一句获取名为白月的 Student 对象，第二句中的 s1.country 也是一个对象。</p><h3 id="外键表字段过滤"><a href="#外键表字段过滤" class="headerlink" title="外键表字段过滤"></a>外键表字段过滤</h3><p>如果我们要查找Student表中所有 <code>一年级</code> 学生：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Student.objects.<span class="hljs-built_in">filter</span>(grade=<span class="hljs-number">1</span>).values()<br></code></pre></td></tr></table></figure><p>如果我们要查找Student表中所有 <code>一年级中国</code> 学生：</p><p><u>不能</u>这么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Student.objects.<span class="hljs-built_in">filter</span>(grade=<span class="hljs-number">1</span>,country=<span class="hljs-string">&#x27;中国&#x27;</span>)<br></code></pre></td></tr></table></figure><p>因为 Student 表中 <code>country</code> 并不是国家名称字符串字段，而是一个外键字段，对应 Country 表中 <code>id</code> 字段 。</p><p>应该这么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cn = Country.objects.get(name=<span class="hljs-string">&#x27;中国&#x27;</span>)<br>Student.objects.<span class="hljs-built_in">filter</span>(grade=<span class="hljs-number">1</span>,country_id=cn.<span class="hljs-built_in">id</span>).values()<br></code></pre></td></tr></table></figure><p>注意外键字段的id是通过后缀 <code>_id</code> 获取的。</p><p>也可以这么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cn = Country.objects.get(name=<span class="hljs-string">&#x27;中国&#x27;</span>)<br>Student.objects.<span class="hljs-built_in">filter</span>(grade=<span class="hljs-number">1</span>,country=cn).values()<br></code></pre></td></tr></table></figure><p>上面的方法，写起来麻烦一些，有两步操作。而且需要发送两次数据请求给数据库服务，性能不高。</p><p>其实 Django ORM 中对外键关联有更方便的语法，可以这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Student.objects.<span class="hljs-built_in">filter</span>(grade=<span class="hljs-number">1</span>,country__name=<span class="hljs-string">&#x27;中国&#x27;</span>).values() <span class="hljs-comment"># 注意为两个下划线</span><br></code></pre></td></tr></table></figure><p>写起来简单，一步到位，而且只需要发送一个数据库请求，性能更好。</p><p>如果返回结果只需要 学生姓名 和 国家名两个字段，可以这样指定values内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Student.objects.<span class="hljs-built_in">filter</span>(grade=<span class="hljs-number">1</span>,country__name=<span class="hljs-string">&#x27;中国&#x27;</span>).values(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;country__name&#x27;</span>)<br></code></pre></td></tr></table></figure><p>但是这样写有个问题：选择出来的记录中，国家名是 <code>country__name</code> 。 两个下划线比较怪。</p><p>有时候，前后端接口的设计者，定义好了接口格式，如果要求一定是 <code>countryname</code> 这样怎么办？</p><p>可以使用 <code>annotate</code> 方法将获取的字段值进行<strong>重命名</strong>，像下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> F<br><br><span class="hljs-comment"># annotate 可以将表字段进行别名处理</span><br>Student.objects.annotate(<br>    countryname=F(<span class="hljs-string">&#x27;country__name&#x27;</span>),<br>    studentname=F(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    )\<br>    .<span class="hljs-built_in">filter</span>(grade=<span class="hljs-number">1</span>,countryname=<span class="hljs-string">&#x27;中国&#x27;</span>).values(<span class="hljs-string">&#x27;studentname&#x27;</span>,<span class="hljs-string">&#x27;countryname&#x27;</span>)<br></code></pre></td></tr></table></figure><br><h3 id="外键表反向访问"><a href="#外键表反向访问" class="headerlink" title="外键表反向访问"></a>外键表反向访问</h3><p>Django ORM中，关联表正向关系是通过表外键字段（或者多对多）表示，比如前面例子中Student表的 country字段。</p><p>而反向关系，是通过 <u>表Model名转化为小写</u> 表示的。</p><p>比如，你已经获取了一个Country对象，如下可以获取到所有属于这个国家的学生：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cn = Country.objects.get(name=<span class="hljs-string">&#x27;中国&#x27;</span>)<br>cn.student_set.<span class="hljs-built_in">all</span>()<br></code></pre></td></tr></table></figure><p>通过<strong>表Model名转化为小写</strong> ，后面加上一个 <strong>_set</strong> 来获取所有的反向外键关联对象</p><p>Django还给出了一个方法，可以更直观的反映关联关系。</p><p>在定义Model的时候，外键字段使用 <code>related_name</code> 参数，像这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 国家表</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Country</span>(<span class="hljs-params">models.Model</span>):</span><br>    name = models.CharField(max_length=<span class="hljs-number">100</span>)<br><br><span class="hljs-comment"># country 字段是国家表的外键，形成一对多的关系</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>(<span class="hljs-params">models.Model</span>):</span><br>    name    = models.CharField(max_length=<span class="hljs-number">100</span>)<br>    grade   = models.PositiveSmallIntegerField()<br>    country = models.ForeignKey(Country,<br>                on_delete = models.PROTECT,<br>                <span class="hljs-comment"># 指定反向访问的名字</span><br>                related_name=<span class="hljs-string">&#x27;students&#x27;</span>)<br></code></pre></td></tr></table></figure><p>就可以使用更直观的属性名，像这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cn = Country.objects.get(name=<span class="hljs-string">&#x27;中国&#x27;</span>)<br>cn.students.<span class="hljs-built_in">all</span>()<br></code></pre></td></tr></table></figure><br><h3 id="外键表反向过滤"><a href="#外键表反向过滤" class="headerlink" title="外键表反向过滤"></a>外键表反向过滤</h3><p>如果我们要获取所有具有一年级学生的国家名，该怎么写？</p><p>当然可以这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 先获取所有的一年级学生id列表</span><br>country_ids = Student.objects.<span class="hljs-built_in">filter</span>(grade=<span class="hljs-number">1</span>).values_list(<span class="hljs-string">&#x27;country&#x27;</span>, flat=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 再通过id列表使用  id__in  过滤</span><br>Country.objects.<span class="hljs-built_in">filter</span>(id__in=country_ids).values()<br></code></pre></td></tr></table></figure><p>但是这样同样存在麻烦和性能的问题。</p><p>Django ORM 可以这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Country.objects.<span class="hljs-built_in">filter</span>(students__grade=<span class="hljs-number">1</span>).values()<br></code></pre></td></tr></table></figure><p>注意， 因为，我们定义表的时候，用 <code>related_name=&#39;students&#39;</code> 指定了反向关联名称 <code>students</code> ，所以这里是 <code>students__grade</code> 。 使用了反向关联名字。</p><p>如果定义时，没有指定related_name， 则应该使用 <code>表名转化为小写</code> ，就是这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Country.objects.<span class="hljs-built_in">filter</span>(student__grade=<span class="hljs-number">1</span>).values()<br></code></pre></td></tr></table></figure><p>这种方式，会有重复的记录产生，此时可以使用 <code>.distinct()</code> 去重：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Country.objects.<span class="hljs-built_in">filter</span>(students__grade=<span class="hljs-number">1</span>).values().distinct()<br></code></pre></td></tr></table></figure><br><h3 id="事务、多对多记录添加"><a href="#事务、多对多记录添加" class="headerlink" title="事务、多对多记录添加"></a>事务、多对多记录添加</h3><p>两张表的插入，意味着我们要进行两次数据库操作。</p><p>如果第一次插入成功， 而第二次插入失败，就会出现 Order表中把订单信息写了一部分，而OrderMedicine表中 该订单的信息却没有写成功。这是个大问题，会造成这个处理做了一半。</p><p>那么数据库中就会出现数据的不一致，术语叫<strong>脏数据</strong>。</p><p>针对这种情况，我们应该用数据库的<strong>事务</strong>机制来解决这个问题。</p><p>把一批数据库操作放在事务中， 该<u>事务中的任何一次数据库操作失败了</u>，数据库系统就会让整个事务就会发生<strong>回滚</strong>，<strong>撤销前面的操作</strong>， 数据库回滚到这事务操作之前的状态。</p><p>Django 使用 with transaction.atomic() 实现事务操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addorder</span>(<span class="hljs-params">request</span>):</span><br><br>    info  = request.params[<span class="hljs-string">&#x27;data&#x27;</span>]<br><br>    <span class="hljs-comment"># 从请求消息中 获取要添加订单的信息</span><br>    <span class="hljs-comment"># 并且插入到数据库中</span><br><br>    <br>    <span class="hljs-keyword">with</span> transaction.atomic():<br>        new_order = Order.objects.create(name=info[<span class="hljs-string">&#x27;name&#x27;</span>] ,<br>                                         customer_id=info[<span class="hljs-string">&#x27;customerid&#x27;</span>])<br><br>        batch = [OrderMedicine(order_id=new_order.<span class="hljs-built_in">id</span>,medicine_id=mid,amount=<span class="hljs-number">1</span>)  <br>                    <span class="hljs-keyword">for</span> mid <span class="hljs-keyword">in</span> info[<span class="hljs-string">&#x27;medicineids&#x27;</span>]]<br><br>        <span class="hljs-comment">#  在多对多关系表中 添加了 多条关联记录</span><br>        OrderMedicine.objects.bulk_create(batch)<br><br><br>    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;ret&#x27;</span>: <span class="hljs-number">0</span>,<span class="hljs-string">&#x27;id&#x27;</span>:new_order.<span class="hljs-built_in">id</span>&#125;)<br></code></pre></td></tr></table></figure><p><code>with transaction.atomic()</code> 下面缩进部分的代码，对数据库的操作，就都是在 <code>一个事务</code> 中进行了。</p><p>如果其中有任何一步数据操作失败了，前面的操作都会回滚。</p><p>这就可以防止出现前面的 Order 表记录插入成功， 而后面的订单药品记录插入失败而导致的数据不一致现象。</p>]]></content>
    
    
    <categories>
      
      <category>Django后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HTTP请求的url路由</title>
    <link href="/2022/02/09/Django%E5%90%8E%E7%AB%AF/HTTP%E8%AF%B7%E6%B1%82%E7%9A%84url%E8%B7%AF%E7%94%B1/"/>
    <url>/2022/02/09/Django%E5%90%8E%E7%AB%AF/HTTP%E8%AF%B7%E6%B1%82%E7%9A%84url%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h2 id="创建项目app"><a href="#创建项目app" class="headerlink" title="创建项目app"></a>创建项目app</h2><p>Django 中的一个app 就是项目里面的一个应用的意思，一个项目包含多个app（功能应用）。</p><p>一个app 通常就是一个相对独立的模块 ，实现相对独立的功能。                 </p><p>比如，我们可以把一个系统的管理员管理功能放在一个名为 manage 的 app 里面，把销售人员的操作实现在另外一个名字为 sales的app里面。</p><p>比如，现在我们需要一个 app 专门处理 系统销售员的 添加、修改、查询、删除请求。</p><p>我们就进入项目<strong>根目录</strong>，执行下面的命令。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">python manage.py startapp sales <br></code></pre></td></tr></table></figure><p>这样就会创建一个目录名为 sales， 对应一个名为 sales 的app，里面包含了如下自动生成的文件。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py">sales/<br>    __init__.py<br>    admin.py<br>    apps.py<br>    migrations/<br>        __init__.py<br>    models.py<br>    tests.py<br>    views.py<br></code></pre></td></tr></table></figure><p>这个目录其实就是一个python package。</p><br><br><h2 id="返回-页面内容-给浏览器"><a href="#返回-页面内容-给浏览器" class="headerlink" title="返回 页面内容 给浏览器"></a>返回 页面内容 给浏览器</h2><p>当我们输入网址，比如百度网址，敲回车后， 浏览器会发出http请求给百度的服务器，百度服务器返回 HTML 文档内容给浏览器， 浏览器解析后，呈现出我们最终看到的网页内容。</p><p>刚才我们创建的 sales 应用里面 有个 views.py 文件。 这个文件里面通常是写处理http请求的代码的。</p><p>比如，我们设计浏览器访问的http请求的 url 地址如果是 <code>/sales/orders/</code> , 就由 views.py 里面的函数 <code>listorders</code> 来处理， 返回一段字符串给浏览器。</p><p>打开 views.py , 在里面加入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">listorders</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;下面是系统中所有的订单信息。。。&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul><li><p>这里面最终的返回结果是 <strong>HttpResponse</strong> 对象的参数字符串 ，也就是这句话</p><p><code>下面是系统中所有的订单信息。。。</code></p></li><li><p>listorders的参数 <strong>request</strong> 是Django中的 <code>HttpRequest</code> 对象，包含了 <u>HTTP请求中的信息</u> 。</p><p>后端程序处理请求，常常要根据<strong>请求中的数据</strong>进行相应的处理，比如请求添加一个用户，那么HTTP请求消息中就会携带要添加用户的信息（姓名、登录账号等）。</p><p>我们写后端的代码，这些信息就在 <code>HttpRequest</code>对象中获取，所以这个参数非常重要。</p><p><code>HttpRequest</code> 对象的属性和用法，具体可以<a href="https://docs.djangoproject.com/zh-hans/3.1/ref/request-response/">参考官方文档这里</a></p></li></ul><p>光是定义了这样一个函数不行的，我们需要告诉 Django ：当前端发送过来的HTTP请求 url地址 是 <code>/sales/orders/</code> , 就由 views.py 里面的函数 <code>listorders</code> 来处理。</p><p>怎么告诉Django呢，这就是 Django中的 url路由设置。</p><br><br><h2 id="url-路由"><a href="#url-路由" class="headerlink" title="url 路由"></a>url 路由</h2><h4 id="添加路由记录"><a href="#添加路由记录" class="headerlink" title="添加路由记录"></a>添加路由记录</h4><p>前面在创建项目目录的时候，在项目的设置目录下，有一个urls.py 文件</p><p><img src="/images/36257654_38775838-d867214c-40be-11e8-91e6-45d4d2bae920.png" alt="白月黑羽Python3教程"></p><p>这个文件是 url 路由设置的入口文件。</p><p>打开该文件，在 urlpatterns 列表变量中添加一条路由信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><br><span class="hljs-comment"># 别忘了导入 listorders 函数</span><br><span class="hljs-keyword">from</span> sales.views <span class="hljs-keyword">import</span> listorders<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br><br>    <span class="hljs-comment"># 添加如下的路由记录</span><br>    path(<span class="hljs-string">&#x27;sales/orders/&#x27;</span>, listorders),<br>]<br></code></pre></td></tr></table></figure><p>urlpatterns 列表 就是 Django 的 url 路由的入口。</p><p>我们添加的 path(‘sales/orders/‘, listorders) 就是告诉当前端过来的请求 url 地址如果是 /sales/orders/ (注意：最后的一个斜杠不能省略) , 就由 views.py 里面的函数 listorders 来处理。</p><p><strong>路由就是指 ： 根据 HTTP请求的url路径， 设置由哪个函数来处理这个请求。</strong></p><br><h3 id="路由子表"><a href="#路由子表" class="headerlink" title="路由子表"></a>路由子表</h3><p>url 路由表就是可以像上面这样，一个请求对应一个处理函数。</p><p>但是有的时候，我们的项目比较大的时候， 请求的 url 会特别多。</p><p>比如我们的系统提供给客户、销售商、管理员访问的url是不一样的，比如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">customer/<br>customer<span class="hljs-regexp">/orders/</span>      <br><br>sales/<br>sales<span class="hljs-regexp">/orders/</span>  <br><br>mgr/<br>mgr<span class="hljs-regexp">/customers/</span><br>mgr<span class="hljs-regexp">/medicines/</span><br>mgr<span class="hljs-regexp">/orders/</span><br></code></pre></td></tr></table></figure><p>复杂的系统url条目多达几百甚至上千个， 放在一个表中，查看时，要找一条路由记录就非常麻烦。</p><p>这时，我们通常可以将不同的路由记录按照功能分到不同的 <strong>url路由子表</strong> 文件中。</p><p>比如，这里我们可以把凡是以 sales 开头的 url 全部都 由 sales app 目录下面的子路由文件 urls.py 处理。</p><p>首先需要在 sales 目录下面创建一个新的文件 sales\urls.py ，然后在这个 sales\urls.py 文件中输入如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;orders/&#x27;</span>, views.listorders),<br>]<br></code></pre></td></tr></table></figure><p>然后，我们再修改主url路由文件 bysms/urls.py （配置文件里的urls.py）, 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><br><span class="hljs-comment"># 导入一个include函数</span><br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, include<br><br><span class="hljs-keyword">from</span> sales.views <span class="hljs-keyword">import</span> listorders<br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br><br>    <span class="hljs-comment"># 凡是 url 以 sales/  开头的，</span><br>    <span class="hljs-comment"># 都根据 sales.urls 里面的 子路由表进行路由</span><br>    path(<span class="hljs-string">&#x27;sales/&#x27;</span>, include(<span class="hljs-string">&#x27;sales.urls&#x27;</span>)),<br><br>]<br></code></pre></td></tr></table></figure><p><strong>请求举例：</strong></p><p>当一个http请求过来时， Django 检查 url，比如这里是 <code>sales/orders/</code>，</p><p>先到主url路由文件 <code>bysms/urls.py</code>中查看 是否有匹配的路由项。</p><p>如果有匹配 ( 这里匹配了 <code>sales/</code> )， 并且匹配的对象不是函数， 而是一个子路由设置 , 比如这里是<code>include(&#39;sales.urls&#39;)</code></p><p>就会去子路由文件中查看， 这里就是 sales.urls 对应的文件 <code>sales\urls.py</code> 。</p><p>注意这时，会从请求url中<strong>去掉前面主路由文件已经匹配上的部分</strong>（这里是 <code>sales/</code> ）, 将<strong>剩余的部分</strong> （这里是 <code>orders/</code> ）去<strong>子路由表</strong>中查看是否有匹配的路由项。</p><p>这里就匹配了 <code>orders/</code> ，匹配的对象，这里是 <code>views.listorders</code> ，它是一个处理函数，就调用该函数处理 这个http请求， 将该函数的返回对象构建 HTTP 响应消息，返回给客户端。</p>]]></content>
    
    
    <categories>
      
      <category>Django后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HTTP协议</title>
    <link href="/2022/02/09/Django%E5%90%8E%E7%AB%AF/HTTP%E5%8D%8F%E8%AE%AE/"/>
    <url>/2022/02/09/Django%E5%90%8E%E7%AB%AF/HTTP%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p>Web前端系统 和 后端系统 之间就是通过HTTP协议进行通信的。</p><img src="/images/image-20220114232403398.png" alt="image-20220114232403398" style="zoom: 33%;"><br><h2 id="HTTP协议简介"><a href="#HTTP协议简介" class="headerlink" title="HTTP协议简介"></a>HTTP协议简介</h2><p>Web API接口 大都是基于 HTTP 协议的。</p><p>HTTP 协议 全称是 超文本传输协议， 英文是 Hypertext Transfer Protocol 。</p><p>HTTP 最初是用来在浏览器和网站服务器（web服务）之间传输超文本（网页、视频、图片等）信息的。</p><p>由于 HTTP 简洁易用，后来，不仅仅是浏览器和服务器之间使用它， 服务器和服务器之间， 手机App和服务器之间，都广泛的采用。 成了一个软件系统间通信的首选协议之一。</p><p>HTTP 有好几个版本，包括： 0.9、1.0、1.1、2，当前最广泛使用的是 HTTP/1.1 版本。</p><p>HTTP 协议最大的特点是通讯双方分为 客户端 和 服务端。</p><p>由于目前HTTP是基于 TCP 协议的， 所以要进行通讯，客户端必须先和服务端创建 TCP 连接。</p><p>而且 HTTP 双方的信息交互，必须是这样一种方式：</p><ul><li>客户端先发送 http 请求（request）给服务端</li><li>然后服务端发送 http 响应（response）给客户端</li></ul><p>特别注意：HTTP协议中，服务端不能主动先发送信息给客户端。</p><p>而且在1.1 以前的版本， 服务端返响应客户端后连接断开 ，下一次双方要进行信息交流，必须重复上面的过程，重新建立连接，客户端发送请求，服务返回响应。</p><p>到了 1.1 版本， 建立连接后，这个连接可以保持一段时间（keep alive）， 这段时间，双方可以多次进行请求和响应， 无需重新建立连接。</p><br><h2 id="HTTP请求消息"><a href="#HTTP请求消息" class="headerlink" title="HTTP请求消息"></a>HTTP请求消息</h2><p>下面是一个 http 请求消息 request 的示例</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">GET</span> <span class="hljs-string">/mgr/login.html</span> <span class="hljs-string">HTTP/1.1</span><br><span class="hljs-attr">Host:</span> <span class="hljs-string">www.baiyueheiyu.com</span><br><span class="hljs-attr">User-Agent:</span> <span class="hljs-string">Mozilla/6.0</span> <span class="hljs-string">(compatible;</span> <span class="hljs-string">MSIE5.01;</span> <span class="hljs-string">Windows</span> <span class="hljs-string">NT)</span><br><span class="hljs-attr">Accept-Language:</span> <span class="hljs-string">zh-cn</span><br><span class="hljs-attr">Accept-Encoding:</span> <span class="hljs-string">gzip,</span> <span class="hljs-string">deflate</span><br><span class="hljs-string">POST</span> <span class="hljs-string">/api/medicine</span> <span class="hljs-string">HTTP/1.1</span><br><span class="hljs-attr">Host:</span> <span class="hljs-string">www.baiyueheiyu.com</span><br><span class="hljs-attr">User-Agent:</span> <span class="hljs-string">Mozilla/6.0</span> <span class="hljs-string">(compatible;</span> <span class="hljs-string">MSIE5.01;</span> <span class="hljs-string">Windows</span> <span class="hljs-string">NT)</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">application/x-www-form-urlencoded</span><br><span class="hljs-attr">Content-Length:</span> <span class="hljs-number">51</span><br><span class="hljs-attr">Accept-Language:</span> <span class="hljs-string">zh-cn</span><br><span class="hljs-attr">Accept-Encoding:</span> <span class="hljs-string">gzip,</span> <span class="hljs-string">deflate</span><br><br><span class="hljs-string">name=qingmeisu&amp;sn=099877883837&amp;desc=qingmeisuyaopin</span><br></code></pre></td></tr></table></figure><p>http请求消息由下面几个部分组成:</p><h4 id="请求行-request-line"><a href="#请求行-request-line" class="headerlink" title="请求行 request line"></a>请求行 request line</h4><p>是http请求的第一行的内容，表示要操作什么资源，使用的 http 协议版本是什么。</p><p>里面包含了3部分信息： 请求的方法，操作资源的地址， 协议的版本号</p><p>例如</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">GET /mgr/login.html HTTP/<span class="hljs-number">1.1</span><br></code></pre></td></tr></table></figure><p>表示要 获取 资源， 资源的 地址 是 <code>/mgr/login.html</code> ， 使用的 协议是 HTTP/1.1</p><p>GET、POST是请求的方法，表示这个动作的大体目的，是获取信息，还是提交信息，还是修改信息等等</p><p>常见的HTTP 请求方法包括：</p><ul><li><p>GET</p><p>从服务器 <code>获取</code> 资源信息，这是一种最常见的请求。</p><p>比如 要 从服务器 获取 网页资源、获取图片资源、获取用户信息数据等等。</p></li><li><p>POST，请求方法就应该是</p><p><code>添加</code> 资源信息 到 服务器进行处理（例如提交表单或者上传文件）。</p><p>比如 要 添加用户信息、上传图片数据 到服务器 等等</p><p>具体的数据信息，通常在 HTTP消息体中， 后面会讲到</p></li><li><p>PUT</p><p>请求服务器 <code>更新</code> 资源信息 。</p><p>比如 要 更新 用户姓名、地址 等等</p><p>具体的更新数据信息，通常在 HTTP消息体中， 后面会讲到</p></li><li><p>DELETE</p><p>请求服务器 <code>删除</code> 资源信息 。</p><p>比如 要 删除 某个用户、某个药品 等等</p></li></ul><p>HTTP还有许多其他方法，比如 PATCH、HEAD 等，不是特别常用，暂且不讲。</p><h4 id="请求头-request-headers"><a href="#请求头-request-headers" class="headerlink" title="请求头 request headers"></a>请求头 request headers</h4><p>请求头是http请求行下面的内容，里面存放一些信息。</p><p>比如，请求发送的服务端域名是什么， 希望接收的响应消息使用什么语言，请求消息体的长度等等。</p><p>通常请求头都有好多个，一个请求头占据一行</p><p>单个请求头的格式是： <code>名字: 值</code></p><p>HTTP协议规定了一些标准的请求头，</p><p>开发者也可以在HTTP消息中 添加自己定义的请求头</p><h4 id="消息体-message-body"><a href="#消息体-message-body" class="headerlink" title="消息体 message body"></a>消息体 message body</h4><p>请求的url、请求头中可以存放一些数据信息， 但是有些数据信息，往往需要存放在消息体中。</p><p>特别是 POST、PUT等请求，添加、修改的数据信息 通常都是存放在请求消息体中的。</p><p>如果 HTTP 请求有消息体， 协议规定需要在消息头和消息体之间插入一个空行隔开它们。</p><p>请求消息体中保存了要提交给服务端的数据信息。</p><p>比如：客户端要上传一个文件给服务端，就可以通过HTTP请求发送文件数据给服务端。</p><p>文件的数据就应该在请求的消息体中。</p><p>再比如：上面示例中客户端要添加药品，药品的名称、编码、描述就存放在请求消息体中。</p><p>Web API 请求消息体通常是某种格式的文本，常见的有</p><ul><li>Json</li><li>Xml</li><li>www-form-urlencoded</li></ul><br><h2 id="HTTP响应消息"><a href="#HTTP响应消息" class="headerlink" title="HTTP响应消息"></a>HTTP响应消息</h2><p>下面是一个http响应消息 response 的示例</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">HTTP/1.1</span> <span class="hljs-number">200</span> <span class="hljs-string">OK</span><br><span class="hljs-attr">Date:</span> <span class="hljs-string">Thu,</span> <span class="hljs-number">19</span> <span class="hljs-string">Sep</span> <span class="hljs-number">2019 08:08:27 </span><span class="hljs-string">GMT</span><br><span class="hljs-attr">Server:</span> <span class="hljs-string">WSGIServer/0.2</span> <span class="hljs-string">CPython/3.7.3</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">application/json</span><br><span class="hljs-attr">Content-Length:</span> <span class="hljs-number">37</span><br><span class="hljs-attr">X-Frame-Options:</span> <span class="hljs-string">SAMEORIGIN</span><br><span class="hljs-attr">Vary:</span> <span class="hljs-string">Cookie</span><br><br>&#123;<span class="hljs-attr">&quot;ret&quot;:</span> <span class="hljs-number">0</span>, <span class="hljs-attr">&quot;retlist&quot;:</span> [], <span class="hljs-attr">&quot;total&quot;:</span> <span class="hljs-number">0</span>&#125;<br></code></pre></td></tr></table></figure><p>HTTP响应消息包含如下几个部分：</p><h4 id="状态行-status-line"><a href="#状态行-status-line" class="headerlink" title="状态行 status line"></a>状态行 status line</h4><p>状态行在第一行，包含3个部分：</p><ul><li><p>协议版本</p><p>上面的示例中，就是 <code>HTTP/1.1</code></p></li><li><p>状态码</p><p>上面的示例中，就是 <code>200</code></p></li><li><p>描述状态的短语</p><p>上面的示例中，就是 <code>OK</code></p></li></ul><p>我们重点来看一下状态码，它表示了服务端对客户端请求的处理结果 。</p><p>状态码用3位的数字来表示，第一位 的数字代表处理结果的大体类型，常见的有如下几种：</p><p>• 2xx</p><p>通常表示请求消息没有问题，而且服务器也正确处理了</p><p>最常见的就是 200</p><p>• 3xx</p><p>这是重定向响应，常见的值是 301，302， 表示客户端的这个请求的url地址已经改变了， 需要客户端重新发起一个请求到另外的一个url。</p><p>• 4xx</p><p>表示客户端请求有错误， 常见的值有：</p><p><code>400 Bad Request</code> 表示客户端请求不符合接口要求，比如格式完全错误</p><p><code>401 Unauthorized</code> 表示客户端需要先认证才能发送次请求</p><p><code>403 Forbidden</code> 表示客户端没有权限要求服务器处理这样的请求， 比如普通用户请求删除别人账号等</p><p><code>404 Not Found</code> 表示客户端请求的url 不存在</p><p>• 5xx</p><p>表示服务端在处理请求中，发生了未知的错误。</p><p>通常是服务端的代码设计问题，或者是服务端子系统出了故障（比如数据库服务宕机了）</p><h4 id="响应头-response-headers"><a href="#响应头-response-headers" class="headerlink" title="响应头 response headers"></a>响应头 response headers</h4><p>响应头是响应状态行下面的 的内容，里面存放一些信息。 作用和格式与请求头类似，不再赘述。</p><h4 id="消息体-message-body-1"><a href="#消息体-message-body-1" class="headerlink" title="消息体 message body"></a>消息体 message body</h4><p>有时候，http响应需要消息体。</p><p>同样， 如果 HTTP 响应有消息体， 协议规定需要在消息头和消息体之间插入一个空行隔开它们。</p><p>比如，白月SMS系统请求列出药品信息，那么药品信息就在HTTP响应消息体中</p><p>再比如，浏览器地址栏输入登录网址，浏览器请求一个登录网页的内容，网站服务器，就在响应的消息体中存放登录网页的html内容。</p><p>和请求消息体一样，Web API 响应消息体通常也是某种格式的文本，常见的有：</p><ul><li>Json</li><li>Xml</li><li>www-form-urlencoded</li></ul>]]></content>
    
    
    <categories>
      
      <category>Django后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Django安装与运行</title>
    <link href="/2022/02/09/Django%E5%90%8E%E7%AB%AF/Django%E5%AE%89%E8%A3%85%E4%B8%8E%E8%BF%90%E8%A1%8C/"/>
    <url>/2022/02/09/Django%E5%90%8E%E7%AB%AF/Django%E5%AE%89%E8%A3%85%E4%B8%8E%E8%BF%90%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="安装Django"><a href="#安装Django" class="headerlink" title="安装Django"></a>安装Django</h2><p>Django 框架是用Python语言开发的， 所以安装Django 就像安装其他的 Python库一样，执行如下命令即可</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">pip install django<br></code></pre></td></tr></table></figure><p>你可以执行如下命令检查Django是否安装好， 并且查看安装的Django版本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">python -m django --version<br><span class="hljs-number">2.1</span><span class="hljs-number">.3</span><br></code></pre></td></tr></table></figure><p>如果像上面那样显示出一个版本数字（比如这里就是2.1.3） 表示已经安装好了。</p><br><h2 id="创建Django项目"><a href="#创建Django项目" class="headerlink" title="创建Django项目"></a>创建Django项目</h2><p>进入到 <code>d:\projects</code> 目录，执行下面的命令创建项目目录</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">django-admin startproject bysms<br></code></pre></td></tr></table></figure><p>注意最后的 <code>bysms</code> 就是项目的<strong>根目录</strong>名，执行上面命令后，就会创建如下的目录结构：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim">bysms/<br>    manage.<span class="hljs-keyword">py</span><br>    bysms/<br>        __init__.<span class="hljs-keyword">py</span><br>        settings.<span class="hljs-keyword">py</span><br>        urls.<span class="hljs-keyword">py</span><br>        wsgi.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><ul><li><p>最外层 <code>bysms/</code> 就是项目<strong>根目录</strong> <code>d:\projects\bysms\</code> ， 项目文件都放在里面。</p></li><li><p><code>manage.py</code> 是一个工具脚本，用作<strong>项目管理</strong>的。以后我们会使用它执行管理操作。</p></li><li><p>里面的 <code>bysms/</code> 目录是python包。 里面包含项目的重要<strong>配置文件</strong>。这个目录名字不能随便改，因为manage.py 要用到它。</p></li><li><p><code>bysms/settings.py</code> 是 Django 项目的配置文件. 包含了非常重要的配置项，以后我们可能需要修改里面的配置。</p></li><li><p><code>bysms/urls.py</code> 里面存放了 一张表， 声明了前端发过来的各种http请求，分别由哪些函数处理。</p></li><li><p><code>bysms/wsgi.py</code> 产品正式上线运行的时候，通常我们需要高效的 <code>wsgi web server</code> 产品，比如 <strong>gunicorn，uwsgi</strong>等，结合Django组成一个高效的后端服务。wsgi.py 文件就是 wsgi 的调用入口，可以选择使用哪个 wsgi web server 产品。</p><br></li></ul><h2 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h2><p>python 组织制定了 web 服务网关接口（Web Server Gateway Interface） 规范 ，简称 wsgi。</p><p>遵循wsgi规范的 web后端系统， 我们可以理解为由两个部分组成：</p><p><code>wsgi web server</code> 和 <code>wsgi web application</code></p><p>它们通常是运行在一个python进程中的两个模块，或者说两个子系统。</p><p><code>wsgi web server</code> 接受到前端的http请求后，会调用 <code>wsgi web application</code> 的接口（ 比如函数或者类方法）方法，由<code>wsgi web application</code> 具体处理该请求。然后再把处理结果返回给 <code>wsgi web server</code>， <code>wsgi web server</code>再返回给前端。</p><p>如下图所示:</p><img src="/images/image-20220114234806593.png" alt="image-20220114234806593" style="zoom: 50%;"><p><code>wsgi web server</code> 负责<strong>提供高效的http请求处理环境</strong>，可以使用多线程、多进程或者协程的机制。</p><p>http 请求发送到 <code>wsgi web server</code> ， <code>wsgi web server</code> 分配 线程或者进程或者轻量级线程(协程)，然后在这些线程、进程、或者协程里面，去调用执行 <code>wsgi web application</code> 的入口代码。</p><p><code>wsgi web application</code> 被调用后，负责<strong>处理业务逻辑</strong>。 业务逻辑的处理可能非常复杂， <code>wsgi web application</code> 需要精心的设计来正确处理。</p><p><u>django是 <code>wsgi web application</code> 的框架，它只有一个简单的单线程 <code>wsgi web server</code>， 供调试时使用。</u></p><p>产品正式上线运行的时候，通常我们需要高效的 <code>wsgi web server</code> 产品，比如 <strong>gunicorn，uwsgi</strong>，cherrypy等，结合Django ，组成一个高效的后端服务。</p><p>所以这个 <code>wsgi.py</code> 就是 提供给<code>wsgi web server</code>调用 的接口文件，里面的变量application对应对象实现了 wsgi入口，供<code>wsgi web server</code>调用 。</p><br><h2 id="运行-Django-web服务"><a href="#运行-Django-web服务" class="headerlink" title="运行 Django web服务"></a>运行 Django web服务</h2><p>django虽然只是 <code>wsgi web application</code> 的框架，但是它也有一个简单的 <code>wsgi web server</code>。 供调试时使用。</p><p>所以也构成一个完整的后端web服务。 本地调试代码的时候，完全可以运行起来。</p><p>运行开发web 服务只需要在命令行窗口里面，</p><p>首先进入到项目根目录 ，然后执行如下命令：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">python manage.py runserver <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">8000</span><br></code></pre></td></tr></table></figure><p>这样服务就会被启动。 我们就可以在浏览器访问web服务了。</p><p>其中 <code>0.0.0.0:8000</code> 是指定 web服务绑定的 IP 地址和端口。</p><p><code>0.0.0.0</code> 表示绑定本机所有的IP地址， 就是可以通过任何一个本机的IP (包括环回地址 <code>127.0.0.1 </code>) 都可以访问我们的服务。</p><p><code>8000</code> 表示是服务启动在8000端口上。</p><p>请打开浏览器，地址栏输入 ‘127.0.0.1:8000’  或者 ‘localhost:8000’，就可以看到如下的界面，表示Django服务搭建成功，启动成功。</p><p>注意，启动web服务的命令行窗口不能关闭，如果关闭，web服务就停止了。</p>]]></content>
    
    
    <categories>
      
      <category>Django后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1996. 游戏中弱角色的数量</title>
    <link href="/2022/01/28/LeetCode/1996.%20%E6%B8%B8%E6%88%8F%E4%B8%AD%E5%BC%B1%E8%A7%92%E8%89%B2%E7%9A%84%E6%95%B0%E9%87%8F/"/>
    <url>/2022/01/28/LeetCode/1996.%20%E6%B8%B8%E6%88%8F%E4%B8%AD%E5%BC%B1%E8%A7%92%E8%89%B2%E7%9A%84%E6%95%B0%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/the-number-of-weak-characters-in-the-game/">https://leetcode-cn.com/problems/the-number-of-weak-characters-in-the-game/</a></p><p>题意：你正在参加一个多角色游戏，每个角色都有两个主要属性：攻击 和 防御 。给你一个二维整数数组 properties ，其中 properties[i] = [attacki, defensei] 表示游戏中第 i 个角色的属性。 如果存在一个其他角色的攻击和防御等级 都严格高于 该角色的攻击和防御等级，则认为该角色为 弱角色 。更正式地，如果认为角色 i 弱于 存在的另一个角色 j ，那么 attackj &gt; attacki 且 defensej &gt; defensei 。 </p><p>返回 弱角色 的数量。</p><p>样例：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：properties = <span class="hljs-string">[[1,5],[10,4],[4,3]]</span><br>输出：<span class="hljs-number">1</span><br>解释：第三个角色是弱角色，因为第二个角色的攻击和防御严格大于该角色。<br></code></pre></td></tr></table></figure><h4 id="Solve"><a href="#Solve" class="headerlink" title="Solve:"></a>Solve:</h4><p>设攻击值为 a，防守值为 b；先排序，再创建 maxb 数组记录从后向前遍历时当前最大的 b 值。</p><p><strong>注意</strong>：排序时 a 从小到大排，当 a 相同时 b 从大到小排。这样可以保证从前向后搜索结果时当后面的某个 b 比当前的 b 大时 a 是不相等的。</p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ss</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> a,b;<br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(struct ss s1,struct ss s2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(s1.a==s2.a)<br>            <span class="hljs-keyword">return</span> s1.b&gt;s2.b;<br>        <span class="hljs-keyword">return</span> s1.a&lt;s2.a;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ss</span> <span class="hljs-title">s</span>[100005];</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">numberOfWeakCharacters</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; properties)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n=properties.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            s[i].a=properties[i][<span class="hljs-number">0</span>];<br>            s[i].b=properties[i][<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(s,s+n,cmp);<br>        <span class="hljs-keyword">int</span> maxa=s[n<span class="hljs-number">-1</span>].a;<br>        <span class="hljs-keyword">int</span> maxb[<span class="hljs-number">100005</span>];<br>        maxb[n<span class="hljs-number">-1</span>]=s[n<span class="hljs-number">-1</span>].b;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=n<span class="hljs-number">-2</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>            maxb[i]=<span class="hljs-built_in">max</span>(maxb[i+<span class="hljs-number">1</span>],s[i].b);<br>        <span class="hljs-keyword">int</span> re=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[i].a&lt;maxa &amp;&amp; s[i].b&lt;maxb[i])<br>                re++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> re;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>txt 处理</title>
    <link href="/2022/01/26/%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/txt%20%E5%A4%84%E7%90%86/"/>
    <url>/2022/01/26/%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/txt%20%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<ul><li>几种读写方式比较<ul><li>r 打开只读文件，该文件必须存在。</li><li>r+ 打开可读写的文件，该文件必须存在。</li><li>w 打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失。若文件不存在则建立该文件。</li><li>w+ 打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。</li><li>a 以追加的方式打开只写文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾，即文件原先的内容会被保留。</li><li>a+ 以追加方式打开可读写的文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾后，即文件原先的内容会被保留。</li></ul></li><li>rstrip() 删除字符串末尾的字符；lstrip() 删除字符串首部的字符</li><li>os.mkdir(filepath) 创建目录（只能创建一层，且需先判断是否已存在）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">################################ Output ################################</span><br>filepath = <span class="hljs-string">&#x27;./output/&#x27;</span> + domain + <span class="hljs-string">&#x27;/&#x27;</span> + app<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(data_path):<br>os.mkdir(filepath)<br>data_path1 = filepath + <span class="hljs-string">&#x27;/buggy.txt&#x27;</span><br>data_path2 = filepath + <span class="hljs-string">&#x27;/bug_free.txt&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(len1):<br>    data = domain_docs[<span class="hljs-string">&#x27;total&#x27;</span>][i] + <span class="hljs-string">&#x27;\n&#x27;</span><br>    <span class="hljs-keyword">if</span> flag[i] == <span class="hljs-number">1</span>:<br>        f = <span class="hljs-built_in">open</span>(data_path1, <span class="hljs-string">&#x27;a&#x27;</span>)<br>        f.write(data)<br>        f.close<br>    <span class="hljs-keyword">else</span>:<br>        f = <span class="hljs-built_in">open</span>(data_path2, <span class="hljs-string">&#x27;a&#x27;</span>)<br>        f.write(data)<br>        f.close    <br><br><span class="hljs-comment">################################ Input ################################</span><br>input_path = <span class="hljs-string">&#x27;./total/&#x27;</span> +  domain + <span class="hljs-string">&#x27;/&#x27;</span> + app +<span class="hljs-string">&#x27;.txt&#x27;</span><br>f = <span class="hljs-built_in">open</span>(input_path,encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>)<br>lines = f.readlines()<br>f.close()<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    rs = line.rstrip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    rs = rs.rstrip(<span class="hljs-string">&#x27;\&#x27;,&#x27;</span>)<br>    rs = rs.lstrip(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>)<br>    domain_docs[<span class="hljs-string">&#x27;total&#x27;</span>].append(rs)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>文件处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSV 处理</title>
    <link href="/2022/01/26/%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/CSV%20%E5%A4%84%E7%90%86/"/>
    <url>/2022/01/26/%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/CSV%20%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>csv 表格里的第一行默认为 key 值，即数据索引</p><p>如下为 csv 转 txt：（app和bug为列属性索引）</p><h4 id="读-CSV-文件"><a href="#读-CSV-文件" class="headerlink" title="读 CSV 文件"></a>读 CSV 文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv<br><br>bid_info = csv.DictReader(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./2021/communication/res.csv&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>))<br>dict_data = []<br><span class="hljs-keyword">for</span> lines <span class="hljs-keyword">in</span> bid_info:<br>        <span class="hljs-keyword">if</span> bid_info.line_num == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            dict_data.append(lines)<br>row_num = <span class="hljs-built_in">len</span>(dict_data)<br><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span>(i &lt; row_num):<br>    filepath = <span class="hljs-string">&#x27;./2021/communication/&#x27;</span> + dict_data[i][<span class="hljs-string">&#x27;app&#x27;</span>] + <span class="hljs-string">&#x27;.txt&#x27;</span><br>    newfile = <span class="hljs-built_in">open</span>(filepath, <span class="hljs-string">&#x27;a&#x27;</span>)<br>    new = dict_data[i][<span class="hljs-string">&#x27;bug&#x27;</span>] + <span class="hljs-string">&#x27;\n&#x27;</span><br>    newfile.write(new)<br>    newfile.close<br>    i += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(i)<br>        <br><br><br></code></pre></td></tr></table></figure><br><h4 id="写-CSV-文件："><a href="#写-CSV-文件：" class="headerlink" title="写 CSV 文件："></a>写 CSV 文件：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"># coding:utf-<span class="hljs-number">8</span><br>import csv<br>data = [<br>    (<span class="hljs-string">&quot;测试1&quot;</span>,<span class="hljs-string">&#x27;软件测试工程师&#x27;</span>),<br>    (<span class="hljs-string">&quot;测试2&quot;</span>,<span class="hljs-string">&#x27;软件测试工程师&#x27;</span>),<br>    (<span class="hljs-string">&quot;测试3&quot;</span>,<span class="hljs-string">&#x27;软件测试工程师&#x27;</span>),<br>    (<span class="hljs-string">&quot;测试4&quot;</span>,<span class="hljs-string">&#x27;软件测试工程师&#x27;</span>),<br>    (<span class="hljs-string">&quot;测试5&quot;</span>,<span class="hljs-string">&#x27;软件测试工程师&#x27;</span>),<br>]<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;222.csv&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br>writer = csv.<span class="hljs-built_in">writer</span>(f)<br>for i in data:<br>    writer.<span class="hljs-built_in">writerow</span>(i)<br>f.<span class="hljs-built_in">close</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>文件处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux 常用指令</title>
    <link href="/2022/01/17/Linux-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2022/01/17/Linux-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<ul><li><p>Tab : 补全</p></li><li><p>cd : 改变目录</p></li><li><p>cd . . 回退到上一个目录，直接cd进入默认目录</p></li><li><p>pwd : 显示当前所在的目录路径。</p></li><li><p>ls: 列出当前目录中的所有文件。</p><ul><li>ls -l 可以查看文件的详细属性</li><li>Windows可使用 dir 指令</li></ul></li><li><p>touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</p></li><li><p>rm: 删除一个文件, rm index.js 就会把index.js文件删除。</p><ul><li>rm -r : 删除一个文件夹, rm -r src 删除src目录</li></ul></li><li><p>mkdir: 新建一个目录,就是新建一个文件夹。</p><ul><li>mkdir wangkr  ——  新建一个wangkr文件夹</li></ul></li><li><p>mv 移动文件, <code>mv index.html src </code>   </p></li><li><p>reset 重新初始化终端/清屏。</p></li><li><p>clear 清屏。</p></li><li><p>history 查看命令历史。</p></li><li><p>help 帮助。</p></li><li><p>exit 退出。</p></li><li><p>测试连接是否成功 <code>ping www.baidu.com</code></p></li><li><p>#表示注释</p></li><li><p>wget：下载文件的工具</p></li><li><p>Vim 打开文件：<code>vim /test/vi.txt</code></p></li><li><p>执行shell脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x ./test.sh  #使脚本具有执行权限<br>./test.sh  #执行脚本<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>执行python脚本</p><p><code>python test.py</code></p></li></ul><br><h3 id="Anaconda的使用"><a href="#Anaconda的使用" class="headerlink" title="Anaconda的使用"></a>Anaconda的使用</h3><ul><li><p>创建环境</p><p>conda create -n envname python=3.7</p></li><li><p>激活虚拟环境</p><ul><li>linux： source activate envname </li><li>windows：activate envname </li></ul></li><li><p>查看已有的虚拟环境</p><p>conda env list</p></li><li><p>安装第三方库</p><ul><li>pip install XXX</li><li>pip install XXX.whl（官网下载whl文件）</li></ul></li><li><p>退出虚拟环境</p><ul><li>Linux：source deactivate envname </li><li>Windows：deactivate envname，也可以使用 activate root 切回 root 环境</li></ul></li><li><p>删除虚拟环境</p><p>conda remove -n envname –all</p></li><li><p>执行Python程序</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> test.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure></li></ul><br><h3 id="Linux下配置Anaconda环境："><a href="#Linux下配置Anaconda环境：" class="headerlink" title="Linux下配置Anaconda环境："></a>Linux下配置Anaconda环境：</h3><ul><li>下载anaconda包</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://repo.continuum.io/archive/Anaconda<span class="hljs-number">3</span>-<span class="hljs-number">2021</span>.<span class="hljs-number">05</span>-Linux-x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.sh<br></code></pre></td></tr></table></figure><ul><li>安装anaconda</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> Anaconda<span class="hljs-number">3</span>-<span class="hljs-number">2021</span>.<span class="hljs-number">05</span>-Linux-x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.sh<br></code></pre></td></tr></table></figure><p>(一直回车，需要输入的输“yes”再回车。)</p><ul><li>检查是否配置成功</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">conda</span> <span class="hljs-literal">info</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>若显示无法找到命令：</strong></p><p>这是环境变量没有导入更新。</p><ul><li>输入命令打开配置文件</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">vim ~<span class="hljs-string">/.bashrc</span><br></code></pre></td></tr></table></figure><ul><li>在最后添加语句</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">export PATH=<span class="hljs-regexp">/home/</span>XXX<span class="hljs-regexp">/anaconda3/</span>bin:<span class="hljs-variable">$PATH</span><br>XXX为你的用户名，可以查看到的。<br><br>写好后，先按esc，再shift+<span class="hljs-string">&quot; : &quot;</span>，输入wq，回车，这样保存后退出<br></code></pre></td></tr></table></figure><ul><li>最后更新配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><ul><li>输入命令查看conda路径是否配置成功</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">conda</span> <span class="hljs-literal">info</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Debug汇总</title>
    <link href="/2022/01/13/Debug%E6%B1%87%E6%80%BB/"/>
    <url>/2022/01/13/Debug%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h4 id="Python-通过-pip-install-安装第三方库失败（网络连接原因等）"><a href="#Python-通过-pip-install-安装第三方库失败（网络连接原因等）" class="headerlink" title="Python 通过 pip install 安装第三方库失败（网络连接原因等）"></a>Python 通过 pip install 安装第三方库失败（网络连接原因等）</h4><p>1、通过官网或者 Github 链接直接下载 tar 或者 whl 文件</p><p>2、pip install XXX.whl / XXX.tar.gz    直接安装（同一路径下）</p><br><br><h4 id="python安装第三方包的安装路径"><a href="#python安装第三方包的安装路径" class="headerlink" title="python安装第三方包的安装路径"></a>python安装第三方包的安装路径</h4><ul><li>dist-packages：系统自带的python</li><li>site-packages：自己安装的python</li></ul><br><br><h4 id="python使用os库的注意事项"><a href="#python使用os库的注意事项" class="headerlink" title="python使用os库的注意事项"></a>python使用os库的注意事项</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">output_path = os.path.join(<span class="hljs-string">&#x27;./&#x27;</span>, <span class="hljs-string">&#x27;new_data&#x27;</span>, <span class="hljs-string">&#x27;2021&#x27;</span>, domain)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(output_path):<br>os.mkdir(output_path)<br></code></pre></td></tr></table></figure><p>os.mkdir 用来创建缺失的目录（只能创建<strong>最后一级</strong>）：</p><p>如果目录有多级，则创建最后一级，如果最后一级目录的上级目录有不存在的，则会抛出一个 Error。</p><br><br><h4 id="Linux下运行shell脚本显示“-usr-bin-env-“bash-r”-没有那个文件或目录"><a href="#Linux下运行shell脚本显示“-usr-bin-env-“bash-r”-没有那个文件或目录" class="headerlink" title="Linux下运行shell脚本显示“: /usr/bin/env: “bash\r”: 没有那个文件或目录"></a>Linux下运行shell脚本显示“: /usr/bin/env: “bash\r”: 没有那个文件或目录</h4><p>解决办法：</p><p>  用vim打开sh脚本文件（vim filename.txt）， 重新设置文件的格式</p><p>  ：set ff 然后回车 再重新设置下文件格式：</p><p>  ：set ff=unix 然后保存退出</p><p>  ：wq! 回车</p><br><br><h4 id="执行Shell脚本：–do-eval-未找到命令"><a href="#执行Shell脚本：–do-eval-未找到命令" class="headerlink" title="执行Shell脚本：–do_eval:未找到命令"></a>执行Shell脚本：–do_eval:未找到命令</h4><p>原因：shell脚本采用了错误的注释方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">emcc -o\<br><span class="hljs-meta"> #</span><span class="bash"> 目标文件</span><br> ./dist/test.html\ <br><span class="hljs-meta">  #</span><span class="bash"> 模板文件</span><br> --shell-file ./tmp.html\<br> --source-map-base dist\<br></code></pre></td></tr></table></figure><p>改为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">emcc -o ./dist/test.html `# 目标文件` \<br> -O3 `# 优化级别` \<br> --source-map-base dist\<br> -s MODULARIZE=1\<br> -s LEGACY_GL_EMULATION=1\<br> `# --pre-js ./pre.js`\<br> --post-js ./post.js\<br> --cpuprofiler\<br> `# --threadprofiler`\<br> --memoryprofiler\<br> main.cpp<br></code></pre></td></tr></table></figure><br><br><h4 id="使用-Filezilla-连接服务器以后文件目录缺失"><a href="#使用-Filezilla-连接服务器以后文件目录缺失" class="headerlink" title="使用 Filezilla 连接服务器以后文件目录缺失"></a>使用 Filezilla 连接服务器以后文件目录缺失</h4><p>Solve：连接端口号改为22，采用 sftp 协议</p><p>（ SFTP 比 FTP 更安全，但传输的效率比 FTP 要低一些）</p><p><br><br></p><h4 id="计算交叉熵损失函数报错"><a href="#计算交叉熵损失函数报错" class="headerlink" title="计算交叉熵损失函数报错"></a>计算交叉熵损失函数报错</h4><p><img src="/images/image-20220222012428291.png" alt="image-20220222012428291"></p><p>报错原因：tensor的维度不正确</p><p>——Tensor实际上就是一个多维数组，计算交叉熵时维度需要调对</p><p>解决办法：</p><p>[4] → [1, 4]    利用tensor的view方法调整维度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> p_domain_logits.shape == torch.Size([<span class="hljs-number">4</span>]):<br>    y1 = p_domain_logits.view(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>)<br>    y2 = s_domain_logits.view(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>)<br>    p_domain_logits = y1<br>    s_domain_logits = y2<br></code></pre></td></tr></table></figure><br><br><h4 id="Git-Push-报错"><a href="#Git-Push-报错" class="headerlink" title="Git Push 报错"></a>Git Push 报错</h4><h5 id="error-src-refspec-main-does-not-match-any"><a href="#error-src-refspec-main-does-not-match-any" class="headerlink" title="error: src refspec main does not match any"></a>error: src refspec main does not match any</h5><p>Solve：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git show-ref<br></code></pre></td></tr></table></figure><p>返回：8c4c7afc8d831dcba4f8989e39eb8286c1657439 refs/heads/master</p><p>确定分支的名称后再push</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git push -u origin master<br></code></pre></td></tr></table></figure><br><br><h4 id="RuntimeError-cuDNN-error-CUDNN-STATUS-EXECUTION-FAILED"><a href="#RuntimeError-cuDNN-error-CUDNN-STATUS-EXECUTION-FAILED" class="headerlink" title="RuntimeError: cuDNN error: CUDNN_STATUS_EXECUTION_FAILED"></a>RuntimeError: cuDNN error: CUDNN_STATUS_EXECUTION_FAILED</h4><p>cudnn是cuda的一个工具，专门用于加速深度网络。</p><p>方法一：减小 batch size</p><p><strong>方法二（推荐）：</strong></p><ul><li>先 <strong>nvidia-smi</strong> 查看 GPU 的显存使用情况</li></ul><img src="/images/image-20220301150635665.png" alt="image-20220301150635665" style="zoom: 50%;"><ul><li><p>再 <strong>ps -aux</strong> 查看未结束的无用进程</p></li><li><p>最后 <strong>kill -9 PID</strong> 结束指定的进程（PID为进程号）</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>递增的三元子序列</title>
    <link href="/2022/01/12/LeetCode/334.%20%E9%80%92%E5%A2%9E%E7%9A%84%E4%B8%89%E5%85%83%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <url>/2022/01/12/LeetCode/334.%20%E9%80%92%E5%A2%9E%E7%9A%84%E4%B8%89%E5%85%83%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/increasing-triplet-subsequence/">https://leetcode-cn.com/problems/increasing-triplet-subsequence/</a></p><p>题意：给你一个整数数组 nums ，判断这个数组中是否存在长度为 3 的递增子序列。</p><p>如果存在这样的三元组下标 (i, j, k) 且满足 i &lt; j &lt; k ，使得 nums[i] &lt; nums[j] &lt; nums[k] ，返回 true ；否则，返回 false 。</p><br><p>样例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入：nums = <span class="hljs-selector-attr">[1,2,3,4,5]</span><br>输出：true<br>解释：任何 <span class="hljs-selector-tag">i</span> &lt; j &lt; k 的三元组都满足题意<br><br>输入：nums = <span class="hljs-selector-attr">[2,1,5,0,4,6]</span><br>输出：true<br>解释：三元组 (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>) 满足题意，因为 nums<span class="hljs-selector-attr">[3]</span> == <span class="hljs-number">0</span> &lt; nums<span class="hljs-selector-attr">[4]</span> == <span class="hljs-number">4</span> &lt; nums<span class="hljs-selector-attr">[5]</span> == <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><br><p>创建两个长度为 n 的数组 <strong>leftMin</strong> 和 <strong>rightMax</strong>，对于 0 ≤ i &lt; n，leftMin[i] 表示 nums[0] 到 nums[i] 中的最小值，rightMax[i] 表示 nums[i] 到 nums[n−1] 中的最大值。</p><p>得到数组 leftMin 和 rightMax 之后，遍历 1 ≤ i &lt; n−1 的每个下标 i，如果存在一个下标 i 满足：</p><p>leftMin[i−1]&lt;nums[i]&lt;rightMax[i+1]，则返回 true，不存在则返回 false。</p><br><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> minleft[<span class="hljs-number">500005</span>];<br>    <span class="hljs-keyword">int</span> maxright[<span class="hljs-number">500005</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">increasingTriplet</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        minleft[<span class="hljs-number">0</span>]=nums[<span class="hljs-number">0</span>];<br>        maxright[n<span class="hljs-number">-1</span>]=nums[n<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>            minleft[i]=<span class="hljs-built_in">min</span>(minleft[i<span class="hljs-number">-1</span>],nums[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=n<span class="hljs-number">-2</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>            maxright[i]=<span class="hljs-built_in">max</span>(maxright[i+<span class="hljs-number">1</span>],nums[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n<span class="hljs-number">-1</span>;i++)<br>            <span class="hljs-keyword">if</span>(nums[i]&gt;minleft[i<span class="hljs-number">-1</span>]&amp;&amp;nums[i]&lt;maxright[i+<span class="hljs-number">1</span>])<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>生成式对抗网络 GAN</title>
    <link href="/2022/01/11/%E9%AB%98%E7%BA%A7AI%E7%AC%94%E8%AE%B0/%E7%94%9F%E6%88%90%E5%BC%8F%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%20GAN/"/>
    <url>/2022/01/11/%E9%AB%98%E7%BA%A7AI%E7%AC%94%E8%AE%B0/%E7%94%9F%E6%88%90%E5%BC%8F%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%20GAN/</url>
    
    <content type="html"><![CDATA[<h1 id="生成式对抗网络-GAN"><a href="#生成式对抗网络-GAN" class="headerlink" title="生成式对抗网络 GAN"></a>生成式对抗网络 GAN</h1><h4 id="Generative-adversarial-networks"><a href="#Generative-adversarial-networks" class="headerlink" title="Generative adversarial networks"></a>Generative adversarial networks</h4><p>论文：<a href="https://proceedings.neurips.cc/paper/2014/file/5ca3e9b122f61f8f06494c97b1afccf3-Paper.pdf">https://proceedings.neurips.cc/paper/2014/file/5ca3e9b122f61f8f06494c97b1afccf3-Paper.pdf</a></p><p>GAN具有生成数据样本的能力。 </p><ul><li>这种能力在一定程度上反映了它对事物的理解</li><li>GAN 有望加深人工智能的理解层面的研究</li></ul><p>GAN 作为一种生成式模型, 不直接估计数据样本的分布，而是<strong>通过模型学习来估测其潜在分布并生成同分布的新样本</strong>。这种从潜在分布生成 “无限” 新样本的能力，在图像和视觉计算、 语音和语言处理、信息安全等领域具有重大的应用价值。</p><br><h4 id="生成模型"><a href="#生成模型" class="headerlink" title="生成模型"></a>生成模型</h4><p>生成模型可以描述成一个生成数据的模型，属于一种概率模型。</p><p>通过这个模型我们可以<u>生成不包含在训练数据集中的新的数据</u>。</p><p>比如我们有很多马的图片通过生成模型学习这些马的图像，从中学习到马的样子，生成模型就可以生成看起来很真实的马的图像并且这个图像是不属于训练图像的。</p><img src="/.io//image-20211226221839763.png" alt="image-20211226221839763" style="zoom: 33%;"><br><h4 id="Maximum-Likelihood"><a href="#Maximum-Likelihood" class="headerlink" title="Maximum Likelihood"></a>Maximum Likelihood</h4><p>似然：根据结果来判断这个事情本身的性质（参数）</p><img src="/.io//image-20211226221630593.png" alt="image-20211226221630593" style="zoom:50%;"><p>通过采样结果估计原始图像（数据）</p><br><h2 id="GAN的理论与实现模型"><a href="#GAN的理论与实现模型" class="headerlink" title="GAN的理论与实现模型"></a>GAN的理论与实现模型</h2><h4 id="GAN-的核心思想来源于博弈论的纳什均衡"><a href="#GAN-的核心思想来源于博弈论的纳什均衡" class="headerlink" title="GAN 的核心思想来源于博弈论的纳什均衡"></a>GAN 的核心思想来源于博弈论的纳什均衡</h4><h4 id="GAN：由一个生成器-Generator-和一个判别器-Discriminator-构成"><a href="#GAN：由一个生成器-Generator-和一个判别器-Discriminator-构成" class="headerlink" title="GAN：由一个生成器 (Generator)和一个判别器 (Discriminator) 构成"></a>GAN：由一个生成器 (Generator)和一个判别器 (Discriminator) 构成</h4><ul><li><p>生成器的目的是尽量去学习真实的数据分布</p></li><li><p>判别器的目的是尽量正确判别输入数据是来自真实数据还是来自生成器</p></li><li><p>各自提高自己的生成能力和判别能力, 这个学习优化（对抗）过程就是寻找二者之间的一个纳什均衡</p><p>（判别模型和生成模型极大、极小之间的博弈）</p></li></ul><p>最后希望生成器可以获胜从而能够生成一些非常真实的数据</p><br><h4 id="G和D就是两个深度神经网络模型，在训练的过程中可以用BP算法"><a href="#G和D就是两个深度神经网络模型，在训练的过程中可以用BP算法" class="headerlink" title="G和D就是两个深度神经网络模型，在训练的过程中可以用BP算法"></a>G和D就是两个深度神经网络模型，在训练的过程中可以用BP算法</h4><ol><li>把真实数据标识为‘1’(真实分布)，由生成器生成的数据标识为’0‘(生成分布)，反复迭代训练D</li><li>将 G 拼接在 D 的上方，即 G 的输出作为 D 的输入，同时固定 D 的参数，并将进入 G 的噪音样本标签全部改成’1’，为了最小化损失函数，此时就只能改变 G 的每一层权重，反复迭代后 G 的生成能力因此得以改进。</li><li>反复迭代（1）（2），最终 G 就会得到较好的生成能力。</li></ol><img src="/.io//image-20211226223651501.png" alt="image-20211226223651501" style="zoom: 67%;"><br><h4 id="算法步骤："><a href="#算法步骤：" class="headerlink" title="算法步骤："></a>算法步骤：</h4><ul><li>Initialize generator and discriminator</li><li>In each training iteration:<ul><li>固定生成器，训练<strong>判别器</strong>（<u>Discriminator learns to assign high scores to real objects and low scores to generated objects</u>.）</li><li>固定判别器，训练<strong>生成器</strong></li></ul></li><li>注：第一步训练判别器，希望V(G,D)越大越好，所以<strong>加上梯度</strong>，第二步训练生成器，希望V(G,D)越小越好，所以<strong>减去梯度</strong>。整个训练过程交替进行。</li></ul><br><p>数据生成Generation：想要获得真实数据的分布——极大似然估计</p><br><p>定义：<img src="/.io//image-20211227002647531.png" alt="image-20211227002647531" style="zoom:33%;"></p><p>生成器目标：</p><img src="/.io//image-20211227002322145.png" alt="image-20211227002322145" style="zoom:50%;"><p>判别器目标：</p><img src="/.io//image-20211227002304327.png" alt="image-20211227002304327" style="zoom:50%;"><p>![image-20211227003158639](生成式对抗网络 GAN.assets/image-20211227003158639.png)</p><br><h4 id="DCGAN（Deep-Convolutional-GAN）"><a href="#DCGAN（Deep-Convolutional-GAN）" class="headerlink" title="DCGAN（Deep Convolutional GAN）"></a>DCGAN（Deep Convolutional GAN）</h4><p>DCGAN 的判别器和生成器都使用了卷积神经网络（CNN）来替代GAN 中的多层感知机，同时为了使整个网络可微，拿掉了CNN 中的池化层，另外将全连接层以全局池化层替代以减轻计算量。</p><p>DCGAN其实就是一个反向的CNN——创造图片而非过滤</p><br><h2 id="不同类型GAN"><a href="#不同类型GAN" class="headerlink" title="不同类型GAN"></a>不同类型GAN</h2><h3 id="1、Traditional-supervised-approach"><a href="#1、Traditional-supervised-approach" class="headerlink" title="1、Traditional supervised approach"></a>1、Traditional supervised approach</h3><h3 id="2、Conditional-GAN"><a href="#2、Conditional-GAN" class="headerlink" title="2、Conditional GAN"></a>2、Conditional GAN</h3><h3 id="3、Unsupervised-Conditional-Generation"><a href="#3、Unsupervised-Conditional-Generation" class="headerlink" title="3、Unsupervised Conditional Generation"></a>3、Unsupervised Conditional Generation</h3><h4 id="两种实现途径"><a href="#两种实现途径" class="headerlink" title="两种实现途径"></a>两种实现途径</h4><ul><li>Direct Transformation</li><li>Projection to Common Space</li></ul><img src="/.io//image-20211227011527410.png" alt="image-20211227011527410" style="zoom:80%;">]]></content>
    
    
    <categories>
      
      <category>高级AI笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>搜索</title>
    <link href="/2022/01/11/%E9%AB%98%E7%BA%A7AI%E7%AC%94%E8%AE%B0/%E6%90%9C%E7%B4%A2/"/>
    <url>/2022/01/11/%E9%AB%98%E7%BA%A7AI%E7%AC%94%E8%AE%B0/%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><h3 id="搜索问题的构成"><a href="#搜索问题的构成" class="headerlink" title="搜索问题的构成:"></a>搜索问题的构成:</h3><ul><li>状态空间</li><li>后继函数</li><li>初始状态</li><li>目标测试</li></ul><br><h3 id="例子：三个传教士和三个野人："><a href="#例子：三个传教士和三个野人：" class="headerlink" title="例子：三个传教士和三个野人："></a>例子：三个传教士和三个野人：</h3><p>Problem：三个传教士与三个野人渡河，野人在岸上多于传教士会吃了传教士，一条船，只能带两个人，问怎样让传教士安全的度了河</p><p>第一步：先过去两个食人兽，再回来一个；<br>第二步：再过去两个食人兽，再回来一个；<br>第三步：过去两个传教士，再回来一个传教士和一个食人兽；<br>第四步：再过去两个传教士，回来一个食人兽；<br>第五步：过去两个食人兽，再回来一个食人兽；<br>第六步：最后两个食人兽过去。</p><h4 id="形式化表示搜索问题："><a href="#形式化表示搜索问题：" class="headerlink" title="形式化表示搜索问题："></a><strong>形式化表示搜索问题：</strong></h4><p>状态空间：{ (M, C, B) }    M：左岸传教士个数；C：左岸野人个数；B：船的位置（1在左岸0在右岸）</p><p>后继函数：{ P01, P10, P02, P20, P11, Q01, Q10, Q02, Q20, Q11}</p><p>​                    P由左岸到右岸，Q由右岸到左岸；第二位是传教士，第三位是野人</p><p>初始状态：(3, 3, 1)</p><p>目标状态：(0, 0, 0)</p><p>状态空间图: 搜索问题的数学表示</p><br><h3 id="状态空间图"><a href="#状态空间图" class="headerlink" title="状态空间图"></a>状态空间图</h3><p>搜索问题的数学表示 。且在状态空间图中，每个状态只<strong>出现一次</strong>！</p><img src="/.io//image-20211223225158991.png" alt="image-20211223225158991" style="zoom:33%;"><br><h3 id="搜索树"><a href="#搜索树" class="headerlink" title="搜索树"></a>搜索树</h3><ul><li>根节点对应了初始状态 </li><li>子节点对应了父节点的后继 </li><li>节点显示状态，但对应的是到达这些状态的 <strong>行动 / 路径</strong></li><li>对大多数问题，实际上不会构建整个树</li></ul><img src="/.io//image-20211223225932989.png" alt="image-20211223225932989" style="zoom:33%;"><br><h3 id="搜索算法特性（判断搜索算法的好坏）："><a href="#搜索算法特性（判断搜索算法的好坏）：" class="headerlink" title="搜索算法特性（判断搜索算法的好坏）："></a>搜索算法特性（判断搜索算法的好坏）：</h3><ul><li><strong>完备性</strong>——当问题有解时，保证能找到一个解</li><li><strong>最优性</strong>——保证能找到最优解（最小耗散路径）</li><li>时间复杂度</li><li>空间复杂度</li></ul><img src="/.io//image-20211224033114648.png" alt="image-20211224033114648" style="zoom:67%;"><br><h3 id="几种搜索算法："><a href="#几种搜索算法：" class="headerlink" title="几种搜索算法："></a>几种搜索算法：</h3><p><strong>深度优先搜索</strong> (DFS)：有完备性（无环）；无最优性（每次都找最左边的路径），空间复杂度是线性的</p><p><strong>广度优先搜索</strong>(Breadth-First Search)：有完备性；每一步代价/耗散都相同就具有最优性</p><p><strong>迭代深入搜索</strong>(Iterative Deepening)：结合DFS的空间优势与BFS的时间优势，限制搜索深度，每次在限制的深度内进行DFS，限制深度逐次增加，有完备性；每一步耗散都相同就具有最优性，空间复杂度是线性的</p><p><strong>代价敏感搜索</strong>(Cost-Sensitive Search)</p><p><strong>代价一致搜索</strong>(UCS)：先扩展代价小的节点（BFS+优先队列）；有完备性；有最优性；</p><p>​                                    只考虑了之前的信息</p><br><h3 id="搜索的启发策略"><a href="#搜索的启发策略" class="headerlink" title="搜索的启发策略"></a>搜索的启发策略</h3><p>启发策略：估计一个状态到目标距离的函数h</p><p><strong>贪婪搜索</strong>(Greedy Search)：扩展离目标最近的节点，启发函数 f(n)=h(n) 来评价节点（预估离目标距离），可能是不完备的（树是无穷的情况）</p><p><em><em>A</em> 搜索</em><em>：结合 UCS 和 贪婪搜索，A</em> Search orders by the sum: **f(n) = g(n) + h(n)**，</p><p>backward cost g(n)（已消耗的代价）；forward cost h(n)（预估的未来代价）；每次扩展f(n)最小的</p><p>启发函数 <em>h</em> 是 可采纳的：<strong>估计值h小于实际耗散</strong>。</p><p>通常，可采纳启发函数是<strong>松弛问题</strong>的解的耗散</p><p>基于可采纳的启发式函数的 A* 树搜索具有最优性。</p><br><h3 id="图搜索"><a href="#图搜索" class="headerlink" title="图搜索"></a>图搜索</h3><p>不要扩展一个状态两次</p><p>执行：树搜索 + 扩展过的状态集 (“closed set”) / 标记</p><br><h3 id="A-搜索总结"><a href="#A-搜索总结" class="headerlink" title="A* 搜索总结"></a>A* 搜索总结</h3><ul><li><p>A* 使用后向耗散和前向耗散（估计）</p></li><li><p>A* 是完备的、最优的，也是效率最优的</p><p>​    （树搜索：可采纳的启发函数；图搜索：一致的启发函数）</p></li><li><p>启发式函数设计是关键: 常使用松弛问题（简化原问题）</p></li></ul><br><h3 id="多种搜索算法总结"><a href="#多种搜索算法总结" class="headerlink" title="多种搜索算法总结"></a>多种搜索算法总结</h3><p>DFS和BFS都是无启发式的搜索</p><p>f(n) = g(n) + h(n)        （已消耗的代价g，预估的未来代价h）（每次扩展f(n)最小的）</p><p>深度优先搜索：g=0，粗略考虑h</p><p>广度优先搜索：h=0，粗略考虑g</p><p>贪婪搜索：g=0，考虑h</p><p>代价一致搜索：h=0，考虑g</p><p>A*搜索：同时考虑 g 和 h</p>]]></content>
    
    
    <categories>
      
      <category>高级AI笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>强化学习</title>
    <link href="/2022/01/11/%E9%AB%98%E7%BA%A7AI%E7%AC%94%E8%AE%B0/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/01/11/%E9%AB%98%E7%BA%A7AI%E7%AC%94%E8%AE%B0/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h1><p>目标：学习<strong>从环境状态到行为的映射(即策略）</strong>，智能体选择能够获得环境<strong>最大奖赏</strong>的行为，使得外部环境对学习系统在某种意义下的评价为最佳。</p><h3 id="区别于监督学习："><a href="#区别于监督学习：" class="headerlink" title="区别于监督学习："></a>区别于监督学习：</h3><ul><li>监督学习是从<strong>标注</strong>中学习</li><li>强化学习是从<strong>交互</strong>中学习</li></ul><h3 id="两种反馈"><a href="#两种反馈" class="headerlink" title="两种反馈"></a>两种反馈</h3><ul><li>评价性反馈：<ul><li><strong>当智能体采取某个行为时，对该行为给出一个评价</strong>，但并不知道哪个行为是最好的</li><li>强化学习经常面临的是评价性反馈</li></ul></li><li>指导性反馈：<ul><li>直接给出某个状态下的正确或最好行为</li><li><strong>独立于智能体当前采取的行为</strong></li><li>监督学习使用的是指导性反馈</li></ul></li></ul><br><p><img src="/.io//image-20211230225210692.png" alt="image-20211230225210692"></p><br><h3 id="强化学习的两大特性"><a href="#强化学习的两大特性" class="headerlink" title="强化学习的两大特性"></a>强化学习的两大特性</h3><ul><li>试错搜索</li><li>延迟奖励</li></ul><p>(用于判断某一问题是否适用于强化学习求解)</p><br><h3 id="强化学习的要素"><a href="#强化学习的要素" class="headerlink" title="强化学习的要素"></a>强化学习的要素</h3><ul><li>主体：智能体和环境<ul><li>状态、行为和奖励</li></ul></li></ul><img src="/.io//image-20211230225432016.png" alt="image-20211230225432016" style="zoom:50%;"><ul><li><p>要素</p><ul><li><p>策略 policy：状态到行为的映射，包括确定策略和随机策略两种</p></li><li><p>奖励 reward：关于状态和行为的函数，通常具有一定的不确定性</p></li><li><p>价值 value：累积奖励或长期目标</p></li><li><p>环境模型：刻画环境对行为的反馈</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>高级AI笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>循环神经网络 RNN</title>
    <link href="/2022/01/11/%E9%AB%98%E7%BA%A7AI%E7%AC%94%E8%AE%B0/%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/01/11/%E9%AB%98%E7%BA%A7AI%E7%AC%94%E8%AE%B0/%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="循环神经网络-RNN"><a href="#循环神经网络-RNN" class="headerlink" title="循环神经网络 RNN"></a>循环神经网络 RNN</h2><h4 id="（Recurrent-Neural-Networks）"><a href="#（Recurrent-Neural-Networks）" class="headerlink" title="（Recurrent Neural Networks）"></a>（Recurrent Neural Networks）</h4><p>Hidden Layer会有连向下一时间Hidden Layer的边</p><p>一般来说，RNN每一时间的输入和输出是不一样的</p><h4 id="时序展开"><a href="#时序展开" class="headerlink" title="时序展开"></a>时序展开</h4><p>在RNN中每一个时间步骤用到的参数都是一样的</p><img src="/.io//image-20211225223910182.png" alt="image-20211225223910182" style="zoom:33%;"><h4 id="权值一致的BP算法"><a href="#权值一致的BP算法" class="headerlink" title="权值一致的BP算法"></a>权值一致的BP算法</h4><p>BP算法容易实现权值间的线性约束</p><p>同样计算梯度，然后改变梯度以满足约束</p><p>如果权值开始时满足约束，那就会一直满足约束</p><h4 id="RNN可看作权值共享的多层、前向网络"><a href="#RNN可看作权值共享的多层、前向网络" class="headerlink" title="RNN可看作权值共享的多层、前向网络"></a>RNN可看作权值共享的多层、前向网络</h4><p>训练权值约束的前向网络</p><h4 id="BPTT（back-propagation-through-time）算法是常用的训练RNN的方法"><a href="#BPTT（back-propagation-through-time）算法是常用的训练RNN的方法" class="headerlink" title="BPTT（back-propagation through time）算法是常用的训练RNN的方法"></a>BPTT（back-propagation through time）算法是常用的训练RNN的方法</h4><p>RNN处理时间序列数据，所以要基于<strong>时间</strong>反向传播，故叫随时间反向传播</p><img src="/.io//image-20211225233154761.png" alt="image-20211225233154761" style="zoom:80%;"><br><h3 id="RNN示例：语言模型"><a href="#RNN示例：语言模型" class="headerlink" title="RNN示例：语言模型"></a>RNN示例：语言模型</h3><h4 id="新序列采样"><a href="#新序列采样" class="headerlink" title="新序列采样:"></a>新序列采样:</h4><img src="/.io//image-20211225234714705.png" alt="image-20211225234714705" style="zoom:67%;"><br><h2 id="长序列循环神经网络"><a href="#长序列循环神经网络" class="headerlink" title="长序列循环神经网络"></a>长序列循环神经网络</h2><h4 id="BP的困难"><a href="#BP的困难" class="headerlink" title="BP的困难"></a>BP的困难</h4><ul><li>The backward pass is linear</li><li>梯度爆炸 —— 梯度修剪</li><li>梯度消失 —— GRU or LSTM</li></ul><br><h3 id="GRU单元（Gated-Recurrent-Unit）"><a href="#GRU单元（Gated-Recurrent-Unit）" class="headerlink" title="GRU单元（Gated Recurrent Unit）"></a>GRU单元（Gated Recurrent Unit）</h3><p>解决了RNN长期记忆的问题（面对长序列数据的遗忘问题）</p><p>有更新门和重置门</p><br><h3 id="长短时记忆网络Long-Short-Term-Memory-LSTM"><a href="#长短时记忆网络Long-Short-Term-Memory-LSTM" class="headerlink" title="长短时记忆网络Long Short Term Memory, LSTM"></a>长短时记忆网络Long Short Term Memory, LSTM</h3><p>解决了RNN长期(like hundreds of time steps)记忆的问题</p><p>LSTM是一个存储单元，使用logistic和linear单元执行乘法运算</p><br><h3 id="LSTM-vs-GRU"><a href="#LSTM-vs-GRU" class="headerlink" title="LSTM vs GRU"></a>LSTM vs GRU</h3><ul><li>GRU是更加简单的模型，更容易创建一个更大的网络，而且它只有两个门，在计算性上也运行得更快，可以扩大模型的规模</li><li>LSTM更加强大和灵活，有三个门而不是两个</li></ul><br><h3 id="双向循环神经网络（Bidirectional-RNN，BRNN）"><a href="#双向循环神经网络（Bidirectional-RNN，BRNN）" class="headerlink" title="双向循环神经网络（Bidirectional RNN，BRNN）"></a>双向循环神经网络（Bidirectional RNN，BRNN）</h3><h5 id="RNN和LSTM都只能依据之前时刻的时序信息来预测下一时刻的输出，但在有些问题中，当前时刻的输出不仅和之前的状态有关，还可能和未来的状态有关系。"><a href="#RNN和LSTM都只能依据之前时刻的时序信息来预测下一时刻的输出，但在有些问题中，当前时刻的输出不仅和之前的状态有关，还可能和未来的状态有关系。" class="headerlink" title="RNN和LSTM都只能依据之前时刻的时序信息来预测下一时刻的输出，但在有些问题中，当前时刻的输出不仅和之前的状态有关，还可能和未来的状态有关系。"></a>RNN和LSTM都只能依据之前时刻的时序信息来预测下一时刻的输出，但在有些问题中，当前时刻的输出不仅和之前的状态有关，还可能和未来的状态有关系。</h5><p>不足：需要完整的序列才能进行预测。</p><img src="/.io//image-20211226144605843.png" alt="image-20211226144605843" style="zoom:50%;"><br><h3 id="深层循环神经网络（Deep-RNNs）"><a href="#深层循环神经网络（Deep-RNNs）" class="headerlink" title="深层循环神经网络（Deep RNNs）"></a>深层循环神经网络（Deep RNNs）</h3><img src="/.io//image-20211226145620345.png" alt="image-20211226145620345" style="zoom:67%;"><br><h2 id="序列模型-（sequence-to-sequence）"><a href="#序列模型-（sequence-to-sequence）" class="headerlink" title="序列模型 （sequence to sequence）"></a>序列模型 （sequence to sequence）</h2><h3 id="Machine-Translation-机器翻译"><a href="#Machine-Translation-机器翻译" class="headerlink" title="Machine Translation 机器翻译"></a>Machine Translation 机器翻译</h3><img src="/.io//image-20211226152520185.png" alt="image-20211226152520185" style="zoom:50%;"><p>目标是选择最可能的句子：</p><img src="/.io//image-20211226165514510.png" alt="image-20211226165514510" style="zoom: 50%;"><p>训练过程：基于语料进行训练</p><p>预测结果：基于集束搜索</p><br><h3 id="Image-captioning-图像描述生成"><a href="#Image-captioning-图像描述生成" class="headerlink" title="Image captioning 图像描述生成"></a>Image captioning 图像描述生成</h3><img src="/.io//image-20211226151321159.png" alt="image-20211226151321159" style="zoom:50%;"><br><h3 id="集束搜索（Beam-search-algorithm）"><a href="#集束搜索（Beam-search-algorithm）" class="headerlink" title="集束搜索（Beam search algorithm）"></a>集束搜索（Beam search algorithm）</h3><p>beam search是对greedy search的一个改进算法。相对greedy search扩大了搜索空间，但远远不及穷举搜索指数级的搜索空间，是二者的一个折中方案。</p><img src="/.io//image-20211226162736243.png" alt="image-20211226162736243" style="zoom:67%;"><ul><li>beam search不保证全局最优，但是比greedy search搜索空间更大，一般结果比greedy search要好</li><li>greedy search 可以看做是 beam size = 1时的 beam search</li></ul><img src="/.io//image-20211226162922054.png" alt="image-20211226162922054" style="zoom:67%;"><h4 id="改进集束搜索"><a href="#改进集束搜索" class="headerlink" title="改进集束搜索"></a>改进集束搜索</h4><ul><li><p>长度归一化(Length normalization)</p><img src="/.io//image-20211226204330331.png" alt="image-20211226204330331" style="zoom:50%;"><p>归一化的对数似然目标函数：</p><img src="/.io//image-20211226170336824.png" alt="image-20211226170336824" style="zoom:33%;"></li><li><p>集束宽度</p></li><li><p>误差分析</p></li></ul><img src="/.io//image-20211226204414235.png" alt="image-20211226204414235" style="zoom: 50%;"><br><h3 id="注意力模型-Attention-model"><a href="#注意力模型-Attention-model" class="headerlink" title="注意力模型 Attention model"></a>注意力模型 Attention model</h3><p>面对一个长序列，集中考虑其中的一部分（解决长序列的记忆问题）</p><p><a href="https://zhuanlan.zhihu.com/p/37601161">https://zhuanlan.zhihu.com/p/37601161</a></p><img src="/.io//image-20211226171846834.png" alt="image-20211226171846834" style="zoom: 67%;"><img src="/.io//image-20211226173926707.png" alt="image-20211226173926707" style="zoom:67%;"><h5 id="计算注意力权值α"><a href="#计算注意力权值α" class="headerlink" title="计算注意力权值α"></a>计算注意力权值α</h5><img src="/.io//image-20211226172231595.png" alt="image-20211226172231595" style="zoom: 50%;"><img src="/.io//image-20211226172247747.png" alt="image-20211226172247747" style="zoom: 50%;"><p><img src="/.io//image-20211226210348032.png" alt="image-20211226210348032"></p>]]></content>
    
    
    <categories>
      
      <category>高级AI笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>图卷积神经网络</title>
    <link href="/2022/01/11/%E9%AB%98%E7%BA%A7AI%E7%AC%94%E8%AE%B0/%E5%9B%BE%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2022/01/11/%E9%AB%98%E7%BA%A7AI%E7%AC%94%E8%AE%B0/%E5%9B%BE%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h4 id="图卷积神经网络：Graph-Convolutional-Network-GCN"><a href="#图卷积神经网络：Graph-Convolutional-Network-GCN" class="headerlink" title="图卷积神经网络：Graph Convolutional Network, GCN"></a>图卷积神经网络：Graph Convolutional Network, GCN</h4><h4 id="图神经网络：Graph-Neural-Network，GNN"><a href="#图神经网络：Graph-Neural-Network，GNN" class="headerlink" title="图神经网络：Graph Neural Network，GNN"></a>图神经网络：Graph Neural Network，GNN</h4><br><h2 id="Convolutional-Neural-Network"><a href="#Convolutional-Neural-Network" class="headerlink" title="Convolutional Neural Network"></a>Convolutional Neural Network</h2><p>The power of CNN lies in its ability to learn local stationary structures, via localized  convolution filter, and compose them to form multi-scale hierarchical patterns.</p><h4 id="从-CNN-到-graph-CNN需要解决的问题："><a href="#从-CNN-到-graph-CNN需要解决的问题：" class="headerlink" title="从 CNN 到 graph CNN需要解决的问题："></a>从 CNN 到 graph CNN需要解决的问题：</h4><p>（在不规则的图graph上定义<strong>卷积算子</strong>）</p><h4 id="how-to-generalize-convolution-to-non-Euclidean-domain"><a href="#how-to-generalize-convolution-to-non-Euclidean-domain" class="headerlink" title="how to generalize convolution to non-Euclidean domain"></a>how to generalize convolution to non-Euclidean domain</h4><img src="/.io//image-20220102213125373.png" alt="image-20220102213125373" style="zoom:50%;"><br><h2 id="在图上定义卷积运算"><a href="#在图上定义卷积运算" class="headerlink" title="在图上定义卷积运算"></a>在图上定义卷积运算</h2><h3 id="1-Spectral-methods-谱方法"><a href="#1-Spectral-methods-谱方法" class="headerlink" title="1. Spectral methods 谱方法"></a>1. Spectral methods 谱方法</h3><p><strong>原理：在图上做傅里叶变换</strong></p><img src="/.io//image-20220102222905061.png" alt="image-20220102222905061" style="zoom:67%;"><p><strong>缺点</strong></p><ul><li>需要拉普拉斯矩阵的特征分解</li><li>高计算成本</li><li>不是局部化的（是全局变化的）</li></ul><p>**解决上述问题：ChebyNet **</p><br><h3 id="2-Spatial-methods-空间方法"><a href="#2-Spatial-methods-空间方法" class="headerlink" title="2. Spatial methods 空间方法"></a>2. Spatial methods 空间方法</h3><img src="/.io//image-20220102230814980.png" alt="image-20220102230814980" style="zoom:67%;"><br><h4 id="方法示例：GraphSAGE"><a href="#方法示例：GraphSAGE" class="headerlink" title="方法示例：GraphSAGE"></a>方法示例：GraphSAGE</h4><img src="/.io//image-20220102231853465.png" alt="image-20220102231853465" style="zoom:67%;"><br><p><img src="/.io//image-20220102233409177.png" alt="image-20220102233409177"></p><br><h4 id="加入注意力机制："><a href="#加入注意力机制：" class="headerlink" title="加入注意力机制："></a>加入<u>注意力</u>机制：</h4><img src="/.io//image-20220102233614588.png" alt="image-20220102233614588" style="zoom:67%;"><br><h4 id="MoNet定义了一个一般方法"><a href="#MoNet定义了一个一般方法" class="headerlink" title="MoNet定义了一个一般方法"></a>MoNet定义了一个一般方法</h4><img src="/.io//image-20220102234137961.png" alt="image-20220102234137961" style="zoom:67%;"><br><h4 id="谱方法是空间方法的特殊情况"><a href="#谱方法是空间方法的特殊情况" class="headerlink" title="谱方法是空间方法的特殊情况"></a>谱方法是空间方法的特殊情况</h4><p><strong>谱方法</strong>：在原空间不好定义卷积运算，就在新空间定义卷积运算，再变换到原空间（傅里叶变换、小波变换等）</p><p>（将原来的图从节点域里变化到谱域里 (利用卷积定理和傅里叶变换实现)，在谱域里再定义卷积核。）</p><p>（面临的挑战：其卷积再也不局部化，会带来网络特征较大范围的改变。）</p><ul><li><strong>把信号x变换到谱域中（这一步须要傅里叶变换or小波变换），</strong></li><li><strong>在谱域中，定义一个卷积核（设初始值，反向传播进行调整），与信号x在谱域中的表达作点积。</strong></li><li><strong>最后进行逆变换，把谱域中的卷积转换到空间域或者说节点域中</strong></li></ul><p><strong>空间方法</strong>：直接在原空间进行定义（可能不是卷积）</p><img src="/.io//image-20220102235424719.png" alt="image-20220102235424719" style="zoom:67%;"><br><h2 id="Graph-Pooling-图的池化"><a href="#Graph-Pooling-图的池化" class="headerlink" title="Graph Pooling 图的池化"></a>Graph Pooling 图的池化</h2><p>1、粗化（对图中多个结点进行聚合）</p><p>2、选择图中的部分结点</p><img src="/.io//image-20220103015125388.png" alt="image-20220103015125388" style="zoom:67%;"><img src="/.io//image-20220103015211589.png" alt="image-20220103015211589" style="zoom:67%;"><br><h2 id="图神经网络的表达能力"><a href="#图神经网络的表达能力" class="headerlink" title="图神经网络的表达能力"></a>图神经网络的表达能力</h2><p>表达能力介绍：</p><p>神经网络主要考虑<strong>近似能力 Approximation capability</strong></p><img src="/.io//image-20220103020040731.png" alt="image-20220103020040731" style="zoom:67%;"><br><h3 id="GNN表达能力的有限性示例："><a href="#GNN表达能力的有限性示例：" class="headerlink" title="GNN表达能力的有限性示例："></a>GNN表达能力的有限性示例：</h3><p>无法区分以下两个网络：（图中每个节点的特征相同）</p><img src="/.io//image-20220103020510949.png" alt="image-20220103020510949" style="zoom:67%;"><br><h3 id="GNN表达能力的上限"><a href="#GNN表达能力的上限" class="headerlink" title="GNN表达能力的上限"></a>GNN表达能力的上限</h3><p>WL测试——判断两张图是否是同构的</p><img src="/.io//image-20220103020700164.png" alt="image-20220103020700164" style="zoom:67%;"><ul><li>测出不同构一定不同构</li><li>测出同构也可能是不同构的（迭代次数不够）</li></ul>]]></content>
    
    
    <categories>
      
      <category>高级AI笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>卷积神经网络CNN</title>
    <link href="/2022/01/11/%E9%AB%98%E7%BA%A7AI%E7%AC%94%E8%AE%B0/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9CCNN/"/>
    <url>/2022/01/11/%E9%AB%98%E7%BA%A7AI%E7%AC%94%E8%AE%B0/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9CCNN/</url>
    
    <content type="html"><![CDATA[<h1 id="卷积神经网络CNN"><a href="#卷积神经网络CNN" class="headerlink" title="卷积神经网络CNN"></a>卷积神经网络CNN</h1><h3 id="深度神经网络-Deep-Neural-Networks，DNN"><a href="#深度神经网络-Deep-Neural-Networks，DNN" class="headerlink" title="深度神经网络(Deep Neural Networks，DNN)"></a>深度神经网络(Deep Neural Networks，DNN)</h3><p>神经网络是基于感知机的扩展，而DNN可以理解为有很<strong>多隐藏层</strong>的神经网络。多层神经网络和深度神经网络DNN其实也是指的一个东西，DNN有时也叫做多层感知机。</p><br><h3 id="卷积神经网络是一种特殊的深层神经网络模型"><a href="#卷积神经网络是一种特殊的深层神经网络模型" class="headerlink" title="卷积神经网络是一种特殊的深层神经网络模型"></a>卷积神经网络是一种特殊的深层神经网络模型</h3><ul><li>它的神经元间的连接是非全连接的 —— 减少参数的数量<ul><li>表达能力不如全连接网络，但是更好训练</li></ul></li><li>同一层中某些神经元之间的连接的权重是共享的（即相同的） —— 减少参数的数量</li></ul><br><h4 id="权值共享（参数共享）："><a href="#权值共享（参数共享）：" class="headerlink" title="权值共享（参数共享）："></a>权值共享（参数共享）：</h4><p>给一张输入图片，用一个卷积核去扫这张图，卷积核里面的数就叫<strong>权重</strong>，这张图每个位置是被同样的卷积核扫的，所以权重是一样的，也就是共享。</p><h5 id="学的是卷积核的参数（权重）（卷积核——特征提取器）"><a href="#学的是卷积核的参数（权重）（卷积核——特征提取器）" class="headerlink" title="学的是卷积核的参数（权重）（卷积核——特征提取器）"></a>学的是卷积核的参数（权重）（卷积核——特征提取器）</h5><br><h3 id="局部连接（也被称为-稀疏连接-）"><a href="#局部连接（也被称为-稀疏连接-）" class="headerlink" title="局部连接（也被称为 稀疏连接 ）"></a>局部连接（也被称为 稀疏连接 ）</h3><ul><li><h5 id="局部感知野"><a href="#局部感知野" class="headerlink" title="局部感知野"></a>局部感知野</h5><ul><li>图像的空间联系也是<strong>局部的像素联系较为紧密，距离较远的像素相关性则较弱</strong></li><li>减少了需要训练的权值数目</li></ul><img src="/.io//image-20211225150243913.png" alt="image-20211225150243913" style="zoom:33%;"></li><li><h5 id="参数共享"><a href="#参数共享" class="headerlink" title="参数共享"></a>参数共享</h5><ul><li>图像的一部分的统计特性与其他部分是一样的</li><li>在输入的不同位置检测同一种特征</li><li>平移不变性</li></ul></li></ul><br><h3 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h3><h5 id="卷积层的作用：特征提取"><a href="#卷积层的作用：特征提取" class="headerlink" title="卷积层的作用：特征提取"></a>卷积层的作用：特征提取</h5><h4 id="一维卷积"><a href="#一维卷积" class="headerlink" title="一维卷积"></a>一维卷积</h4><img src="/.io//image-20211225152940893.png" alt="image-20211225152940893" style="zoom:25%;"><h4 id="二维卷积"><a href="#二维卷积" class="headerlink" title="二维卷积"></a>二维卷积</h4><img src="/.io//image-20211225152959692.png" alt="image-20211225152959692" style="zoom:33%;"><h4 id="三维卷积"><a href="#三维卷积" class="headerlink" title="三维卷积"></a>三维卷积</h4><img src="/.io//image-20211225153021012.png" alt="image-20211225153021012" style="zoom:33%;"><p>假设输入数据的大小为a1×a2×a3，过滤器大小为f，即过滤器维度为f×f×f</p><p>三维卷积最终的输出为**(a1−f+1)×(a2−f+1)×(a3−f+1)**</p><img src="/.io//image-20211225153318203.png" alt="image-20211225153318203" style="zoom: 50%;"><h4 id="多卷积核：每个卷积核都会将图像生成为另一幅图像"><a href="#多卷积核：每个卷积核都会将图像生成为另一幅图像" class="headerlink" title="多卷积核：每个卷积核都会将图像生成为另一幅图像"></a>多卷积核：每个卷积核都会将图像生成为另一幅图像</h4><ul><li>两个卷积核就可以生成两幅图像，这两幅图像可以看做是一张图像的不同的通道</li><li>卷积运算是输入图像与<strong>过滤器（也叫核）</strong>进行的运算，得到输出图像</li></ul><h4 id="输入与输出的尺寸关系"><a href="#输入与输出的尺寸关系" class="headerlink" title="输入与输出的尺寸关系"></a>输入与输出的尺寸关系</h4><p>输入图片n×n，卷积核大小f×f，填充Padding为p，步长为s</p><img src="/.io//image-20211225192928332.png" alt="image-20211225192928332" style="zoom:50%;"><br><h3 id="Pooling池化"><a href="#Pooling池化" class="headerlink" title="Pooling池化"></a>Pooling池化</h3><p>通过卷积获得了特征之后，下一步利用这些特征去做分类。 </p><p>使用卷积时是利用了图像的“静态”特征 ，Pooling对不同位置的特征进行聚合统计。</p><p>池化层：压缩数据和参数的量，减少过拟合。</p><p>池化层中没有需要学习的参数，所以通常不把池化层当做独立的一层来看。</p><p>池化层是一般不会设置padding，即一般padding为0。</p><p>CNN的池化层为下采样。</p><h4 id="子采样"><a href="#子采样" class="headerlink" title="子采样"></a>子采样</h4><ul><li>Average pool</li></ul><img src="/.io//image-20211225193901623.png" alt="image-20211225193901623" style="zoom:33%;"><ul><li>Max pool</li></ul><img src="/.io//image-20211225193941319.png" alt="image-20211225193941319" style="zoom:33%;"><ul><li>L2 pool</li></ul><br><h3 id="CNN基本结构"><a href="#CNN基本结构" class="headerlink" title="CNN基本结构"></a>CNN基本结构</h3><img src="/.io//image-20211225194907410.png" alt="image-20211225194907410" style="zoom:50%;"><h4 id="卷积神经网络是一个多层的神经网络"><a href="#卷积神经网络是一个多层的神经网络" class="headerlink" title="卷积神经网络是一个多层的神经网络"></a>卷积神经网络是一个多层的神经网络</h4><ul><li>每层由多个二维平面组成</li><li>每个平面由多个独立神经元组成</li></ul><br><h3 id="CNN训练过程"><a href="#CNN训练过程" class="headerlink" title="CNN训练过程"></a>CNN训练过程</h3><h4 id="监督训练"><a href="#监督训练" class="headerlink" title="监督训练"></a>监督训练</h4><h4 id="BP算法"><a href="#BP算法" class="headerlink" title="BP算法"></a>BP算法</h4><ul><li>向前传播：从样本集中取一个样本，将数据输入网络，计算相应的实际输出</li><li>向后传播：计算实际输出与期望输出的差，按极小化误差的方法反向传播调整权矩阵</li></ul><h4 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h4><ul><li>最小化平方误差(MSE)</li><li>最小化相对熵(Relative Entropy) </li></ul><h4 id="反向传播主要考虑三个方面"><a href="#反向传播主要考虑三个方面" class="headerlink" title="反向传播主要考虑三个方面"></a>反向传播主要考虑三个方面</h4><ul><li>输出层，代价函数的确定及求导</li><li>Pooling，数据的下采样及残差的上采样</li><li>卷积层，数据的卷积运算及残差的反卷积运算（前向卷积，后向反卷积）</li></ul><br><p><img src="/.io//image-20211225200108983.png" alt="image-20211225200108983"></p><br><h3 id="CNN的改进"><a href="#CNN的改进" class="headerlink" title="CNN的改进"></a>CNN的改进</h3><ul><li>Rectified linear function（ReLU激活函数）<ul><li>加速收敛</li><li>稀疏化</li></ul></li><li>dropout：将隐层节点以一定概率清0 —— 防止过拟合</li><li>图像的对比度归一化</li><li>非线性变换、池化</li></ul><br><h3 id="卷积神经网络实例"><a href="#卷积神经网络实例" class="headerlink" title="卷积神经网络实例"></a>卷积神经网络实例</h3><h4 id="ImageNet-CNN-AlexNet"><a href="#ImageNet-CNN-AlexNet" class="headerlink" title="ImageNet CNN (AlexNet)"></a>ImageNet CNN (AlexNet)</h4><p>结构：卷积层 + ReLU激活函数 + maxpool + 归一化 + dropout</p><br><h4 id="残差网络（Residual-Networks，简称-ResNets）"><a href="#残差网络（Residual-Networks，简称-ResNets）" class="headerlink" title="残差网络（Residual Networks，简称 ResNets）"></a>残差网络（Residual Networks，简称 ResNets）</h4><p>网络结构：<img src="/.io//image-20211225201756361.png" alt="image-20211225201756361" style="zoom:33%;"></p><p>因为残差网络很容易学习<strong>恒等式函数</strong>，所以随着网络加深，至少不会让网络变差</p><p>学习结果对<strong>网络权重的波动变化</strong>更敏感</p><p>其内部的残差块使用了跳跃连接，缓解了增加深度带来的<strong>梯度消失</strong>问题</p><br><h4 id="Inception-网络"><a href="#Inception-网络" class="headerlink" title="Inception 网络"></a>Inception 网络</h4><p>Inception网络又叫做GoogLeNet —— Very Deep</p><img src="/.io//image-20211225203235177.png" alt="image-20211225203235177" style="zoom:67%;"><br><h3 id="图像数据应用"><a href="#图像数据应用" class="headerlink" title="图像数据应用"></a>图像数据应用</h3><h5 id="（目标定位、特征点检测、目标检测、人脸识别）"><a href="#（目标定位、特征点检测、目标检测、人脸识别）" class="headerlink" title="（目标定位、特征点检测、目标检测、人脸识别）"></a>（目标定位、特征点检测、目标检测、人脸识别）</h5><h4 id="目标定位"><a href="#目标定位" class="headerlink" title="目标定位"></a>目标定位</h4><img src="/.io//image-20211225203914424.png" alt="image-20211225203914424" style="zoom:33%;"><br><h4 id="特征点检测"><a href="#特征点检测" class="headerlink" title="特征点检测"></a>特征点检测</h4><img src="/.io//image-20211225203933466.png" alt="image-20211225203933466" style="zoom: 33%;"><br><h4 id="目标检测"><a href="#目标检测" class="headerlink" title="目标检测"></a>目标检测</h4><img src="/.io//image-20211225204005876.png" alt="image-20211225204005876" style="zoom:33%;"><br><h4 id="R-CNN"><a href="#R-CNN" class="headerlink" title="R-CNN"></a>R-CNN</h4><p>Region-CNN，是第一个成功将深度学习应用到目标检测上的算法</p><p>首先使用传统图像分割的方法，对图像进行分割，然后提取出2000个可能有对象的<strong>候选框</strong>，这样相对于最开始提到的滑动框的方式减少了非常多的框，然后送入网络 </p><img src="/.io//image-20211225204237233.png" alt="image-20211225204237233" style="zoom: 33%;"><img src="/.io//image-20211225204320813.png" alt="image-20211225204320813" style="zoom: 33%;"><br><h4 id="人脸识别"><a href="#人脸识别" class="headerlink" title="人脸识别"></a>人脸识别</h4><ul><li>人脸验证（face verification）: 1对1，输入一个照片，名字或者ID，然后判断这个人是否是本人</li><li>人脸识别（face recognition）: 1对多，判断这个人是否是系统中的某一个人</li></ul><img src="/.io//image-20211225204707561.png" alt="image-20211225204707561" style="zoom: 50%;"><p>Siamese网络实现差异度函数：</p><p>Siamese的输出不经过softmax激活函数做分类，直接就是输出一个向量，相当于把每个人映射成一个向量，然后判断两张图片是否是同一个人时只需要分别输入这同一个网络，然后输出向量差的范数</p><p>用二分类的思想来训练Siamese网络</p>]]></content>
    
    
    <categories>
      
      <category>高级AI笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>博弈</title>
    <link href="/2022/01/11/%E9%AB%98%E7%BA%A7AI%E7%AC%94%E8%AE%B0/%E5%8D%9A%E5%BC%88/"/>
    <url>/2022/01/11/%E9%AB%98%E7%BA%A7AI%E7%AC%94%E8%AE%B0/%E5%8D%9A%E5%BC%88/</url>
    
    <content type="html"><![CDATA[<p><img src="/.io//image-20220102142918247.png" alt="image-20220102142918247"></p><p><img src="/.io//image-20220102142931331.png" alt="image-20220102142931331"></p><p><img src="/.io//image-20220102142950535.png" alt="image-20220102142950535"><img src="/.io//image-20220102142959832.png" alt="image-20220102142959832"></p><p><img src="/.io//image-20220102143011055.png" alt="image-20220102143011055"></p><p><img src="/.io//image-20220102143028949.png" alt="image-20220102143028949"></p><p><img src="/.io//image-20220102143047951.png" alt="image-20220102143047951"></p><p><img src="/.io//image-20220102143106846.png" alt="image-20220102143106846"></p><p><img src="/.io//image-20220102143116413.png" alt="image-20220102143116413"></p><p><img src="/.io//image-20220102143126600.png" alt="image-20220102143126600"></p><p><img src="/.io//image-20220102143143389.png" alt="image-20220102143143389"></p><p><img src="/.io//image-20220102143154192.png" alt="image-20220102143154192"></p><p><img src="/.io//image-20220102143227435.png" alt="image-20220102143227435"></p><p><img src="/.io//image-20220102143239400.png" alt="image-20220102143239400"></p><p><img src="/.io//image-20220102143255135.png" alt="image-20220102143255135"></p><p><img src="/.io//image-20220102143331380.png" alt="image-20220102143331380"></p><p><img src="/.io//image-20220102143352830.png" alt="image-20220102143352830"></p><p><img src="/.io//image-20220102143419116.png" alt="image-20220102143419116"></p><p><img src="/.io//image-20220102143434545.png" alt="image-20220102143434545"></p><p><img src="/.io//image-20220102143719782.png" alt="image-20220102143719782"></p><p><img src="/.io//image-20220102143743116.png" alt="image-20220102143743116"></p><p><img src="/.io//image-20220102143506246.png" alt="image-20220102143506246"></p><p><img src="/.io//image-20220102143603441.png" alt="image-20220102143603441"></p><p><img src="/.io//image-20220102143610694.png" alt="image-20220102143610694"></p><br><br><p><img src="/.io//image-20220102143910879.png" alt="image-20220102143910879"></p><p><img src="/.io//image-20220102143925013.png" alt="image-20220102143925013"></p><p><img src="/.io//image-20220102143934829.png" alt="image-20220102143934829"></p><p><img src="/.io//image-20220102143952317.png" alt="image-20220102143952317"></p><p><img src="/.io//image-20220102144005341.png" alt="image-20220102144005341"></p><p><img src="/.io//image-20220102144027716.png" alt="image-20220102144027716"></p><p><img src="/.io//image-20220102144034906.png" alt="image-20220102144034906"></p><p><img src="/.io//image-20220102144111763.png" alt="image-20220102144111763"></p><p><img src="/.io//image-20220102144122161.png" alt="image-20220102144122161"></p><p><img src="/.io//image-20220102144142145.png" alt="image-20220102144142145"></p><p><img src="/.io//image-20220102144150939.png" alt="image-20220102144150939"></p><p><img src="/.io//image-20220102144201672.png" alt="image-20220102144201672"></p><p><img src="/.io//image-20220102144222439.png" alt="image-20220102144222439"></p><p><img src="/.io//image-20220102144234742.png" alt="image-20220102144234742"></p><p><img src="/.io//image-20220102144331271.png" alt="image-20220102144331271"></p><p><img src="/.io//image-20220102144341817.png" alt="image-20220102144341817"></p><p><img src="/.io//image-20220102144422113.png" alt="image-20220102144422113"></p><p><img src="/.io//image-20220102144447095.png" alt="image-20220102144447095"></p><p><img src="/.io//image-20220102144528136.png" alt="image-20220102144528136"></p><p><img src="/.io//image-20220102145714923.png" alt="image-20220102145714923"></p><p><img src="/.io//image-20220102145758788.png" alt="image-20220102145758788"></p><p><img src="/.io//image-20220102145924451.png" alt="image-20220102145924451"></p><p><img src="/.io//image-20220102145938819.png" alt="image-20220102145938819"></p><p><img src="/.io//image-20220102150001634.png" alt="image-20220102150001634"></p><p><img src="/.io//image-20220102150012814.png" alt="image-20220102150012814"></p><p><img src="/.io//image-20220102150044895.png" alt="image-20220102150044895"></p><p><img src="/.io//image-20220102150111828.png" alt="image-20220102150111828"></p><p><img src="/.io//image-20220102150327999.png" alt="image-20220102150327999"></p><p><img src="/.io//image-20220102150412393.png" alt="image-20220102150412393"></p><p><img src="/.io//image-20220102150811973.png" alt="image-20220102150811973"></p><p><img src="/.io//image-20220102150934469.png" alt="image-20220102150934469"></p><p><img src="/.io//image-20220102151137013.png" alt="image-20220102151137013"></p><p><img src="/.io//image-20220102151305980.png" alt="image-20220102151305980"></p><p><img src="/.io//image-20220102152023381.png" alt="image-20220102152023381"></p><p><img src="/.io//image-20220102152955223.png" alt="image-20220102152955223"></p>]]></content>
    
    
    <categories>
      
      <category>高级AI笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>人工神经网络 ANN</title>
    <link href="/2022/01/11/%E9%AB%98%E7%BA%A7AI%E7%AC%94%E8%AE%B0/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9CANN/"/>
    <url>/2022/01/11/%E9%AB%98%E7%BA%A7AI%E7%AC%94%E8%AE%B0/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9CANN/</url>
    
    <content type="html"><![CDATA[<h1 id="人工神经网络-ANN"><a href="#人工神经网络-ANN" class="headerlink" title="人工神经网络 ANN"></a>人工神经网络 ANN</h1><p>联结主义学派：又称仿生学派，认为人的思维基元是神经元，而不是符号处理过程</p><p>核心：智能的本质是联接机制</p><p>原理：神经网络及神经网络间的连接机制和学习算法</p><p>人工神经网络：基于模仿生物大脑的结构和功能而构成的一种信息处理系统</p><p>自底向上，起源于生物神经系统 ，从 <strong>结构模拟</strong> 到 <strong>功能模拟</strong> </p><p>生物里的神经元：</p><ul><li>兴奋状态：对输入信息整合后使细胞膜电位升高，当高于动作电位的阈值时，产生神经冲动，并由轴突输出。</li><li>抑制状态：对输入信息整合后使细胞膜电位降低，当低于动作电位的阈值时，无神经冲动产生。</li></ul><p>神经元之间的<strong>柔性连接</strong>：突触的信息传递特性是可变的——<u>学习记忆的基础</u></p><br><h3 id="神经元模型"><a href="#神经元模型" class="headerlink" title="神经元模型"></a>神经元模型</h3><ul><li>二值神经元模型——MP模型（组合函数：加权和函数；激活函数：阈值函数）</li><li>模拟神经元模型（组合函数：加权和函数；激活函数：Sigmod函数等）</li></ul><br><h3 id="M-P模型"><a href="#M-P模型" class="headerlink" title="M-P模型"></a>M-P模型</h3><img src="/.io//image-20211224151148765.png" alt="image-20211224151148765" style="zoom:50%;"><p>神经网络学的是 <strong>连接权</strong> 和 <strong>阈值</strong></p><p>多个人工神经元按照特定的网络结构联接在一起，就构成了一个人工神经网络。 </p><p>神经网络的目标就是将输入转换成有意义的输出。</p><br><h3 id="ANN的学习规则"><a href="#ANN的学习规则" class="headerlink" title="ANN的学习规则"></a>ANN的学习规则</h3><p><strong>基于能量最小原则</strong>：保持突触强度需要能量，所以在需要的地方保持，在不需要的地方不保持。</p><p>ENERGY = measure of task performance error    （可以用性能评价作能量的函数定义）</p><br><h3 id="ANN的2种结构"><a href="#ANN的2种结构" class="headerlink" title="ANN的2种结构"></a>ANN的2种结构</h3><ul><li><strong>前馈结构</strong>(Feedforward Architecture) ：无环、静态</li></ul><img src="/.io//image-20211224153651949.png" alt="image-20211224153651949" style="zoom:33%;"><p>​                                            （前馈无需考虑时间因素）</p><ul><li><strong>反馈/循环结构</strong>(Feedback/Recurrent Architecture) ：有环、动态</li></ul><img src="/.io//image-20211224153606713.png" alt="image-20211224153606713" style="zoom:33%;"><p>​                                            （反馈输出会变成输入）</p><br><h3 id="ANN的学习方法"><a href="#ANN的学习方法" class="headerlink" title="ANN的学习方法"></a>ANN的学习方法</h3><p>通过神经网络所在环境的模拟过程，调整网络中的自由参数（通过数据集的数据进行学习）</p><h5 id="学习策略-Error-Correction（错误纠正）"><a href="#学习策略-Error-Correction（错误纠正）" class="headerlink" title="学习策略: Error Correction（错误纠正）"></a>学习策略: Error Correction（错误纠正）</h5><p>最小化实际输出与期望输出之间的误差(Supervised)</p><p>常用的错误纠正策略：Delta Rule 、BP学习算法</p><br><h2 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a>感知机</h2><p>感知机由两层神经元构成：输入层 + 输出层，输出层是M-P神经元，只有输出层进行激活函数处理</p><p>主要针对<u>监督学习</u>，感知机是最简单的前馈网络</p><p>Loss function 损失函数：预测值和实际值之间的差距度量（一般学习目标是最小化损失函数）</p><p>感知机实质上是一种<strong>神经元模型</strong>，与M-P模型的区别：感知机组合函数里的权值w是可变的</p><img src="/.io//image-20211225232625756.png" alt="image-20211225232625756" style="zoom: 67%;"><img src="/.io//image-20211224161330406.png" alt="image-20211224161330406" style="zoom: 50%;"><h5 id="感知机特性："><a href="#感知机特性：" class="headerlink" title="感知机特性："></a>感知机特性：</h5><p>通过感知机可以实现与、或、非，但是不能实现<strong>异或</strong></p><p><strong>感知机收敛性：</strong></p><p>感知机收敛定理 ：<strong>若训练数据集是线性可分的，则感知机模型收敛</strong>。</p><img src="/.io//image-20211224163214044.png" alt="image-20211224163214044" style="zoom:50%;"><h5 id="感知机存在的问题"><a href="#感知机存在的问题" class="headerlink" title="感知机存在的问题"></a>感知机存在的问题</h5><ul><li><strong>噪声</strong>（不可分情况）:数据集不可分，感知机无法收敛（无法求得最终解）</li><li><strong>泛化性</strong>：无法找到性能最好的超平面</li></ul><br><h5 id="改进感知机：加入隐层可实现异或操作"><a href="#改进感知机：加入隐层可实现异或操作" class="headerlink" title="改进感知机：加入隐层可实现异或操作"></a>改进感知机：加入隐层可实现异或操作</h5><img src="/.io//image-20211224165606171.png" alt="image-20211224165606171" style="zoom:50%;"><br><h2 id="多层感知机-MLP"><a href="#多层感知机-MLP" class="headerlink" title="多层感知机 (MLP)"></a>多层感知机 (MLP)</h2><p>由 输入层、隐层、输出层 构成</p><p>层间神经元<strong>全连接</strong>，采用<u>模拟神经元模型</u></p><p>多层感知机就是一个<strong>多个隐层</strong>的全连接神经网络</p><img src="/.io//image-20211225232723901.png" alt="image-20211225232723901" style="zoom:50%;"><h5 id="MLP的表达能力"><a href="#MLP的表达能力" class="headerlink" title="MLP的表达能力"></a>MLP的表达能力</h5><ul><li>3 layers: 可以模拟所有的连续函数</li><li>4 layers: all functions</li></ul><h5 id="BP网络：BP算法训练的多层前馈神经网络（多层感知机），采用-Sigmoid-激活函数"><a href="#BP网络：BP算法训练的多层前馈神经网络（多层感知机），采用-Sigmoid-激活函数" class="headerlink" title="BP网络：BP算法训练的多层前馈神经网络（多层感知机），采用 Sigmoid 激活函数"></a>BP网络：BP算法训练的多层前馈神经网络（多层感知机），采用 Sigmoid 激活函数</h5><h4 id="多层感知机的学习算法：BP学习算法"><a href="#多层感知机的学习算法：BP学习算法" class="headerlink" title="多层感知机的学习算法：BP学习算法"></a>多层感知机的学习算法：<strong>BP学习算法</strong></h4><img src="/.io//image-20211224180622770.png" alt="image-20211224180622770" style="zoom:50%;"><h5 id="BP算法步骤："><a href="#BP算法步骤：" class="headerlink" title="BP算法步骤："></a>BP算法步骤：</h5><p>Step1. Select a pattern from the training set and present it to the network. </p><p>Step2. Compute activation of input, hidden and output neurons in that sequence. </p><p>Step3. Compute the error over the output neurons by comparing the generated outputs with the             desired outputs. </p><p>Step4. Use the calculated error to update all weights in the network, such that a global error             measure gets reduced. </p><p>Step5. Repeat Step1 through Step4 until the global error falls below a predefined threshold.</p><h5 id="调整权重的过程采用：梯度下降法"><a href="#调整权重的过程采用：梯度下降法" class="headerlink" title="调整权重的过程采用：梯度下降法"></a>调整权重的过程采用：梯度下降法</h5><h4 id="梯度下降法——寻找最小化均方误差e-w-的权重w-优化方法"><a href="#梯度下降法——寻找最小化均方误差e-w-的权重w-优化方法" class="headerlink" title="梯度下降法——寻找最小化均方误差e(w)的权重w    (优化方法)"></a>梯度下降法——寻找最小化均方误差e(w)的权重w    (优化方法)</h4><img src="/.io//image-20211224181604854.png" alt="image-20211224181604854" style="zoom:50%;"><h4 id="多层感知机的优缺点"><a href="#多层感知机的优缺点" class="headerlink" title="多层感知机的优缺点"></a>多层感知机的优缺点</h4><ul><li><p>优点：很强的表达能力；容易执行</p></li><li><p>缺点：</p><ul><li>收敛速度慢——采用Newton法</li><li>过拟合（Over-fitting）—— 加正则化项，约束权值的平滑性，采用更少（但足够数量）的隐层神经元</li><li>局部极小——尝试不同的初始化增加扰动</li></ul></li></ul><h4 id="深度神经网络中BP算法遇到的问题："><a href="#深度神经网络中BP算法遇到的问题：" class="headerlink" title="深度神经网络中BP算法遇到的问题："></a>深度神经网络中BP算法遇到的问题：</h4><p><img src="/.io//image-20211224223759973.png" alt="image-20211224223759973"></p><br><h4 id="深度神经网络训练"><a href="#深度神经网络训练" class="headerlink" title="深度神经网络训练"></a>深度神经网络训练</h4><ul><li>自下向上的非监督学习（贪婪预训练获得网络良好的初始化 ）</li><li>自顶向下的监督学习<ul><li>通过带标签的数据去训练，误差自顶向下传输，对网络进行微调</li><li>微调特征（中间层），使得与问题更相关</li></ul></li></ul><br><h2 id="Deep-Learning-的常用模型"><a href="#Deep-Learning-的常用模型" class="headerlink" title="Deep Learning 的常用模型"></a>Deep Learning 的常用模型</h2><h3 id="AutoEncoder自动编码器"><a href="#AutoEncoder自动编码器" class="headerlink" title="AutoEncoder自动编码器"></a>AutoEncoder自动编码器</h3><p>学习过程：</p><ul><li>无标签数据，用非监督学习学习特征</li><li>监督学习：Deep结构，有监督微调</li></ul><p>三层结构：输入层，隐藏层，输出层</p><img src="/.io//image-20211225011344712.png" alt="image-20211225011344712" style="zoom:33%;"><ul><li><p>输入层神经元数=输出层神经元数 </p></li><li><p>隐层神经元数量&lt;输入层神经元数量     意义：迫使隐藏层节点学习得到输入数据的<strong>压缩</strong>表示方法</p></li></ul><h4 id="两隐层自编码网络MNIST手写数字识别"><a href="#两隐层自编码网络MNIST手写数字识别" class="headerlink" title="两隐层自编码网络MNIST手写数字识别"></a>两隐层自编码网络MNIST手写数字识别</h4><ol><li>用原始输入x(k)训练第一个自编码器，学习得到原始输入的一阶特征表示h(1)(k)</li><li>把上一层的一阶特征作为另一个稀疏自编码器的输入，使用它们来学习二阶特征h(2)(k)</li><li>将二阶特征作为softmax分类器的输入，训练得到一个能将二阶特征映射到数字标签的模型</li><li>将这三层结合起来构成一个<strong>栈式自编码网络</strong>，通过反向传播算法(BP)同时调整所有层的参数以改善学习结果(称为整体细调fine- tuning)</li></ol><h4 id="栈式自编码器神经网络"><a href="#栈式自编码器神经网络" class="headerlink" title="栈式自编码器神经网络"></a>栈式自编码器神经网络</h4><img src="/.io//image-20211225140257874.png" alt="image-20211225140257874" style="zoom:50%;"><p><strong>学习方式</strong>：前层的输出作为下一层输入的方式依次训练</p><p>如果网络的输入数据是图像，网络的第一层会学习如何去识别边，第二层一般会学习如何去组合边，从而构成轮廓、角等。更高层会学习如何去组合更形象且有意义的特征。</p><p>如果输入数据集包含人脸图像，更高层会学习如何识别或组合眼睛、鼻子、嘴等人脸器官。</p><br><h3 id="Hopfield-Network"><a href="#Hopfield-Network" class="headerlink" title="Hopfield Network"></a>Hopfield Network</h3><img src="/.io//image-20211225014201846.png" alt="image-20211225014201846" style="zoom: 33%;"><p>单层全互连、对称权值的<strong>反馈</strong>网络</p><p>网络演化：从初始状态按能量减小的方向进行演化，直到达到稳定状态。稳定状态即为网络的输出</p><br><h3 id="波尔兹曼机-Boltzmann-Machine"><a href="#波尔兹曼机-Boltzmann-Machine" class="headerlink" title="波尔兹曼机 Boltzmann Machine"></a>波尔兹曼机 Boltzmann Machine</h3><h5 id="属于反馈神经网络"><a href="#属于反馈神经网络" class="headerlink" title="属于反馈神经网络"></a>属于反馈神经网络</h5><img src="/.io//image-20211225014807818.png" alt="image-20211225014807818" style="zoom:50%;"><h5 id="BM基本原理："><a href="#BM基本原理：" class="headerlink" title="BM基本原理："></a>BM基本原理：</h5><ul><li>BM中一部分神经元与外部相连，可以起到网络的输入、输出功能，或者严格地说可以受到外部条件的约束。另一部分神经元则不与外部相连，因而属于隐单元</li><li>每个神经元只取1或0这两种状态：状态1代表该神经元处于接通状态，状态0代表该神经元处于断开状态</li></ul><br><h3 id="受限波尔兹曼机-Restricted-Boltzmann-Machines（RBM）"><a href="#受限波尔兹曼机-Restricted-Boltzmann-Machines（RBM）" class="headerlink" title="受限波尔兹曼机 Restricted Boltzmann Machines（RBM）"></a>受限波尔兹曼机 Restricted Boltzmann Machines（RBM）</h3><h5 id="属于反馈神经网络-1"><a href="#属于反馈神经网络-1" class="headerlink" title="属于反馈神经网络"></a>属于反馈神经网络</h5><img src="/.io//image-20211225015105785.png" alt="image-20211225015105785" style="zoom: 50%;"><ul><li>一个可见层</li><li>一个隐层</li><li>层内无连接</li><li>学习目标：极大似然</li></ul><br><h3 id="Deep-Belief-Networks-DBN-深度置信网络"><a href="#Deep-Belief-Networks-DBN-深度置信网络" class="headerlink" title="Deep Belief Networks(DBN) 深度置信网络"></a>Deep Belief Networks(DBN) 深度置信网络</h3><p>概率生成模型，由多个RBM堆积而成（栈式叠加）</p><p>深层结构——多层</p><p>非监督的预学习提供了网络好的初始化</p><p>监督微调(fine-tuning)</p><h4 id="DBN-网络结构："><a href="#DBN-网络结构：" class="headerlink" title="DBN 网络结构："></a>DBN 网络结构：</h4><img src="/.io//image-20211225021303050.png" alt="image-20211225021303050" style="zoom:50%;"><img src="/.io//image-20211225021918911.png" alt="image-20211225021918911" style="zoom:50%;"><h4 id="DBN-学习算法："><a href="#DBN-学习算法：" class="headerlink" title="DBN 学习算法："></a>DBN 学习算法：</h4><ul><li>非监督的预学习+监督微调</li><li>训练的时候采用逐层贪婪训练使得网络层数堆积</li></ul><br><h3 id="Deep-Boltzmann-Machines-深度玻尔兹曼机"><a href="#Deep-Boltzmann-Machines-深度玻尔兹曼机" class="headerlink" title="Deep Boltzmann Machines 深度玻尔兹曼机"></a>Deep Boltzmann Machines 深度玻尔兹曼机</h3><p>所有层间无向连接  （同层神经元间无连接）</p><p>高层表示由无标注数据建立</p><p>标注数据仅用来微调网络</p><h4 id="DBM-网络结构："><a href="#DBM-网络结构：" class="headerlink" title="DBM 网络结构："></a>DBM 网络结构：</h4><img src="/.io//image-20211225023720489.png" alt="image-20211225023720489" style="zoom:50%;"><h4 id="DBM-学习算法："><a href="#DBM-学习算法：" class="headerlink" title="DBM 学习算法："></a>DBM 学习算法：</h4><ul><li>非监督的预学习+监督微调</li><li>训练时采用双方向，在训练单层时需要同时考虑两个或者多个隐层</li></ul>]]></content>
    
    
    <categories>
      
      <category>高级AI笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>双指针-最接近的三数之和</title>
    <link href="/2022/01/11/LeetCode/16.%20%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2022/01/11/LeetCode/16.%20%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/3sum-closest/">https://leetcode-cn.com/problems/3sum-closest/</a></p><p>题意：给你一个长度为 n 的整数数组 nums 和 一个目标值 target。请你从 nums 中选出三个整数，使它们的和与 target 最接近。返回这三个数的和。</p><br><p>样例：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：nums = [<span class="hljs-string">-1</span>,2,1,<span class="hljs-string">-4</span>], target = 1<br>输出：2<br>解释：与 target 最接近的和是 2 (<span class="hljs-string">-1</span> + 2 + 1 = 2) 。<br></code></pre></td></tr></table></figure><br><p>首先考虑枚举第一个元素 a，对于剩下的两个元素 b 和 c，我们希望它们的和最接近 target - a。对于 b 和 c，如果它们在原数组中枚举的范围（既包括下标的范围，也包括元素值的范围）没有任何规律可言，那么我们还是只能使用两重循环来枚举所有的可能情况。因此，我们可以考虑对整个数组进行升序排序，这样一来：</p><p>假设数组的长度为 n，我们先枚举 a，它在数组中的位置为 i；</p><p>为了防止重复枚举，我们在位置 [i+1, n) 的范围内枚举 b 和 c。</p><p>借助<strong>双指针</strong>，我们就可以对枚举的过程进行优化。<br>用 p  和 q  分别表示指向 b 和 c 的指针，初始时，p  指向位置 i+1 即左边界；q  指向位置 n-1 即右边界。在每一步枚举的过程中，我们用 a+b+c 来更新答案 :</p><ul><li><p>a*+<em>b</em>+*c &gt; target，那么就将 q 向左移动一个位置</p></li><li><p>a*+<em>b</em>+*c &lt; target，那么就将 p 向右移动一个位置</p></li></ul><br><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> r;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">threeSumClosest</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> len=nums.<span class="hljs-built_in">size</span>();<br>        <br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">int</span> r=nums[<span class="hljs-number">0</span>]+nums[<span class="hljs-number">1</span>]+nums[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;len;k++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> num=nums[k];<br>            <span class="hljs-keyword">int</span> ta=target-num;<br>            <span class="hljs-keyword">int</span> p=<span class="hljs-number">0</span>,q=len<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">if</span>(p==k)<br>                p++;<br>            <span class="hljs-keyword">if</span>(q==k)<br>                q--;<br>            <span class="hljs-keyword">while</span>(p&lt;q)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(nums[p]+nums[q]+num-target)&lt;<span class="hljs-built_in">abs</span>(r-target))<br>                &#123;<br>                    <span class="hljs-comment">// cout&lt;&lt;p&lt;&lt;&#x27; &#x27;&lt;&lt;q&lt;&lt;&#x27; &#x27;&lt;&lt;r&lt;&lt;endl;</span><br>                    r=nums[p]+nums[q]+num;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(nums[p]+nums[q]&gt;ta)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(q<span class="hljs-number">-1</span>==k)<br>                        q-=<span class="hljs-number">2</span>;<br>                    <span class="hljs-keyword">else</span><br>                        q--;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[p]+nums[q]&lt;ta)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(p+<span class="hljs-number">1</span>==k)<br>                        p+=<span class="hljs-number">2</span>;<br>                    <span class="hljs-keyword">else</span><br>                        p++;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-keyword">return</span> target;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>异步请求即时响应</title>
    <link href="/2021/11/26/Vue.js/%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E5%8D%B3%E6%97%B6%E5%93%8D%E5%BA%94/"/>
    <url>/2021/11/26/Vue.js/%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E5%8D%B3%E6%97%B6%E5%93%8D%E5%BA%94/</url>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>发送 axios AJAX 请求后，.then回调函数的执行有时间间隔（另一个线程），之后的代码即时执行会出Bug</p><br><h3 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h3><p>将之后的代码都放到 .then =&gt; <strong>{}</strong> 内执行即可</p><br><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">methods: &#123;<br>    <span class="hljs-attr">query</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> that = <span class="hljs-built_in">this</span><br>      axios<br>        .get(<br>          <span class="hljs-string">&#x27;http://47.94.129.13:8081/college/&#x27;</span> + <span class="hljs-built_in">this</span>.button1 + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-built_in">this</span>.currentPage<br>        )<br>        .then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>          that.info = response<br>          that.isShow = <span class="hljs-literal">true</span><br>          that.total = <span class="hljs-number">0</span><br>          that.data1 = []<br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; that.info.data.data.length; i++) &#123;<br>            <span class="hljs-keyword">var</span> item = &#123;<span class="hljs-attr">name</span>: that.info.data.data[i].name,<br>              <span class="hljs-attr">icon</span>: that.info.data.data[i].icon,<br>              <span class="hljs-attr">city</span>: that.info.data.data[i].city,<br>              <span class="hljs-attr">department</span>: that.info.data.data[i].department,<br>              <span class="hljs-attr">charact</span>: that.info.data.data[i].charact,<br>              <span class="hljs-attr">url</span>: that.info.data.data[i].url&#125;<br>            that.data1.unshift(item)<br>          &#125;<br>          that.total = that.info.data.total<br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>页面加载后自动加载自定义函数</title>
    <link href="/2021/11/26/Vue.js/%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E5%90%8E%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0/"/>
    <url>/2021/11/26/Vue.js/%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E5%90%8E%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="created："><a href="#created：" class="headerlink" title="created："></a>created：</h3><p><strong>在模板渲染成 html 前调用</strong>，即通常初始化某些属性值，然后再渲染成视图。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">methods: &#123;<br>            <span class="hljs-attr">indexs</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-built_in">this</span>.$http.post(<span class="hljs-string">&#x27;&#123;:url(&quot;Index/fun&quot;)&#125;&#x27;</span>)<br>                    .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)</span>&#123;<br>                        <span class="hljs-built_in">this</span>.items=res.data;<br>                        <span class="hljs-built_in">console</span>.log(res.data);<br>                    &#125;)<br>                    .catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>)</span>&#123;<br>                        <span class="hljs-built_in">console</span>.log(error);<br>                    &#125;);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-comment">//自动加载indexs方法</span><br>            <span class="hljs-built_in">this</span>.indexs();<br>        &#125;<br><br></code></pre></td></tr></table></figure><br><h3 id="mounted："><a href="#mounted：" class="headerlink" title="mounted："></a>mounted：</h3><p>（多用于页面初始化）</p><p><strong>在模板渲染成 html 后调用</strong>，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">methods: &#123;<br>            <span class="hljs-attr">indexs</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-built_in">this</span>.$http.post(<span class="hljs-string">&#x27;&#123;:url(&quot;Index/fun&quot;)&#125;&#x27;</span>)<br>                    .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)</span>&#123;<br>                        <span class="hljs-built_in">this</span>.items=res.data;<br>                        <span class="hljs-built_in">console</span>.log(res.data);<br>                    &#125;)<br>                    .catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>)</span>&#123;<br>                        <span class="hljs-built_in">console</span>.log(error);<br>                    &#125;);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-comment">//自动加载indexs方法</span><br>            <span class="hljs-built_in">this</span>.indexs();<br>        &#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>浏览器协同前端开发</title>
    <link href="/2021/11/20/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8D%8F%E5%90%8C%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <url>/2021/11/20/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8D%8F%E5%90%8C%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p>打开网页，右键选中<strong>检查</strong>，即可在 Elements 中查看网页各个组件所在的 HTML 标签。</p><p>使用该方法可进行精确定位（选中<strong>左上角鼠标定位功能</strong>）。</p><p>也可以看到该元素的 <strong>css 样式</strong></p><p>同时还可以<strong>在网页上直接修改代码进行调试</strong>。</p><img src="/images/image-20211123025537312.png" alt="image-20211123025537312" style="zoom: 33%;"><p>→ accelerate 网页开发</p>]]></content>
    
    
    <categories>
      
      <category>前端杂记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ECharts数据可视化图表库</title>
    <link href="/2021/11/17/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/ECharts/"/>
    <url>/2021/11/17/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/ECharts/</url>
    
    <content type="html"><![CDATA[<p>ECharts 是一个使用 JavaScript 实现的<strong>开源可视化库</strong>，涵盖各行业<strong>图表</strong>，满足各种需求。</p><p>ECharts 遵循 Apache-2.0 开源协议，免费商用。</p><p>ECharts 兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等）及兼容多种设备，可随时随地任性展示。</p><h4 id="教程：https-www-runoob-com-echarts-echarts-tutorial-html"><a href="#教程：https-www-runoob-com-echarts-echarts-tutorial-html" class="headerlink" title="教程：https://www.runoob.com/echarts/echarts-tutorial.html"></a>教程：<a href="https://www.runoob.com/echarts/echarts-tutorial.html">https://www.runoob.com/echarts/echarts-tutorial.html</a></h4><h4 id="实例演示："><a href="#实例演示：" class="headerlink" title="实例演示："></a>实例演示：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>第一个 ECharts 实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入 echarts.js --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/echarts/4.3.0/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 为ECharts准备一个具备大小（宽高）的Dom --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height:400px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> myChart = echarts.init(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;main&#x27;</span>));</span><br><span class="javascript"> </span><br><span class="javascript">        <span class="hljs-comment">// 指定图表的配置项和数据</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> option = &#123;</span><br><span class="javascript">            <span class="hljs-attr">title</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;第一个 ECharts 实例&#x27;</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">tooltip</span>: &#123;&#125;,</span><br><span class="javascript">            <span class="hljs-attr">legend</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">data</span>:[<span class="hljs-string">&#x27;销量&#x27;</span>]</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">xAxis</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">data</span>: [<span class="hljs-string">&quot;衬衫&quot;</span>,<span class="hljs-string">&quot;羊毛衫&quot;</span>,<span class="hljs-string">&quot;雪纺衫&quot;</span>,<span class="hljs-string">&quot;裤子&quot;</span>,<span class="hljs-string">&quot;高跟鞋&quot;</span>,<span class="hljs-string">&quot;袜子&quot;</span>]</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">yAxis</span>: &#123;&#125;,</span><br><span class="javascript">            <span class="hljs-attr">series</span>: [&#123;</span><br><span class="javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;销量&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">data</span>: [<span class="hljs-number">5</span>, <span class="hljs-number">20</span>, <span class="hljs-number">36</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>]</span><br><span class="javascript">            &#125;]</span><br><span class="javascript">        &#125;;</span><br><span class="javascript"> </span><br><span class="javascript">        <span class="hljs-comment">// 使用刚指定的配置项和数据显示图表。</span></span><br><span class="javascript">        myChart.setOption(option);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端杂记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1249. 移除无效的括号</title>
    <link href="/2021/11/09/LeetCode/1249.%20%E7%A7%BB%E9%99%A4%E6%97%A0%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <url>/2021/11/09/LeetCode/1249.%20%E7%A7%BB%E9%99%A4%E6%97%A0%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/minimum-remove-to-make-valid-parentheses/">https://leetcode-cn.com/problems/minimum-remove-to-make-valid-parentheses/</a></p><p>题意：</p><p>给你一个由 ‘(‘、’)’ 和小写字母组成的字符串 s。</p><p>你需要从字符串中删除最少数目的 ‘(‘ 或者 ‘)’ （可以删除任意位置的括号)，使得剩下的括号字符串有效。</p><p>请返回任意一个合法字符串。</p><p>有效「括号字符串」应当符合以下 任意一条 要求：</p><p>空字符串或只包含小写字母的字符串<br>可以被写作 AB（A 连接 B）的字符串，其中 A 和 B 都是有效「括号字符串」<br>可以被写作 (A) 的字符串，其中 A 是一个有效的「括号字符串」</p><p>样例：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;lee(t(c)o)de)&quot;</span><br>输出：<span class="hljs-string">&quot;lee(t(c)o)de&quot;</span><br>解释：<span class="hljs-string">&quot;lee(t(co)de)&quot;</span> , <span class="hljs-string">&quot;lee(t(c)ode)&quot;</span> 也是一个可行答案。<br></code></pre></td></tr></table></figure><h4 id="Solve"><a href="#Solve" class="headerlink" title="Solve:"></a>Solve:</h4><p>前后各扫一遍，记得最后reverse一下。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">string <span class="hljs-title">minRemoveToMakeValid</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>;<br>        string r=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">int</span> i;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">length</span>();i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;(&#x27;</span>)<br>            &#123;<br>                l++;<br>                r+=s[i];<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;)&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(l)<br>                &#123;<br>                    l--;<br>                    r+=s[i];<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                r+=s[i];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(l==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> r;<br><br><br>        string rr=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">int</span> rnum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(i=r.<span class="hljs-built_in">length</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(r[i]==<span class="hljs-string">&#x27;)&#x27;</span>)<br>            &#123;<br>                rnum++;<br>                rr+=r[i];<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(r[i]==<span class="hljs-string">&#x27;(&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(rnum)<br>                &#123;<br>                    rnum--;<br>                    rr+=r[i];<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                rr+=r[i];<br><br>        &#125;<br><br>        string re=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span>(i=rr.<span class="hljs-built_in">length</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>            re+=rr[i];<br><br>        <span class="hljs-keyword">return</span> re;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CLI 常用指令</title>
    <link href="/2021/11/08/Vue.js/CLI%20%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2021/11/08/Vue.js/CLI%20%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="ViewUI-的安装与引入"><a href="#ViewUI-的安装与引入" class="headerlink" title="ViewUI 的安装与引入"></a>ViewUI 的安装与引入</h3><p><strong>安装</strong></p><p>cnpm install view-design –save</p><p><strong>引入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">import ViewUI from &#x27;view-design&#x27;;<br>import &#x27;view-design/dist/styles/iview.css&#x27;;<br>Vue.use(ViewUI);<br></code></pre></td></tr></table></figure><br><h3 id="ElementUI-的安装与引入"><a href="#ElementUI-的安装与引入" class="headerlink" title="ElementUI 的安装与引入"></a>ElementUI 的安装与引入</h3><p><strong>安装</strong></p><p>cnpm i element-ui -S</p><p><strong>引入</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<br>Vue.use(ElementUI);<br></code></pre></td></tr></table></figure><br><h3 id="less-or-sass-安装"><a href="#less-or-sass-安装" class="headerlink" title="less or sass 安装"></a>less or sass 安装</h3><p>若安装了UI库后，报cass和less错误，则以下安装 ( <strong>见 less 那篇blog</strong> )<br>cnpm install –save sass-loader node-sass<br>cnpm install –save less-loader node-less</p><br><h3 id="vue-cli安装与新建"><a href="#vue-cli安装与新建" class="headerlink" title="vue-cli安装与新建"></a>vue-cli安装与新建</h3><p><strong>cli安装</strong></p><p>cnpm install -g @vue/cli</p><p><strong>cli查看版本</strong></p><p>vue –version</p><p><strong>cli创建一个项目</strong></p><p>vue create hello-world</p><br><h4 id="vue-router安装与使用"><a href="#vue-router安装与使用" class="headerlink" title="vue-router安装与使用"></a>vue-router安装与使用</h4><p><strong>vue-router安装</strong></p><p>cnpm install vue-router</p><p><strong>vue-router使用</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br>Vue.use(VueRouter)<br>&lt;router-<span class="hljs-keyword">view</span>&gt;&lt;/router-<span class="hljs-keyword">view</span>&gt;<br>&lt;router-link&gt;<br></code></pre></td></tr></table></figure><br><h3 id="Vue-项目创建"><a href="#Vue-项目创建" class="headerlink" title="Vue 项目创建"></a>Vue 项目创建</h3><p><strong>创建项目的方式：</strong></p><p>1、<code>vue create hello-world</code></p><p>2、<code>vue ui</code> 进行网页在线项目创建  （以<strong>管理员</strong>身份打开cmd ）</p><br><p>——————————————–项目安装——————————————–</p><h4 id="Project-setup"><a href="#Project-setup" class="headerlink" title="Project setup"></a>Project setup</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cnpm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><h4 id="Compiles-and-hot-reloads-for-development"><a href="#Compiles-and-hot-reloads-for-development" class="headerlink" title="Compiles and hot-reloads for development"></a>Compiles and hot-reloads for development</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cnpm <span class="hljs-builtin-name">run</span> serve<br></code></pre></td></tr></table></figure><h4 id="Compiles-and-minifies-for-production"><a href="#Compiles-and-minifies-for-production" class="headerlink" title="Compiles and minifies for production"></a>Compiles and minifies for production</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cnpm <span class="hljs-builtin-name">run</span> build<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>踩坑汇总</title>
    <link href="/2021/11/08/Vue.js/%E8%B8%A9%E5%9D%91%E6%B1%87%E6%80%BB/"/>
    <url>/2021/11/08/Vue.js/%E8%B8%A9%E5%9D%91%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<ul><li>注意 ElementUI or IView 的 Vue 版本（Vue2.x / 3.x），实在不行就在浏览器定位模板组件，</li></ul><p>​       在使用该组件的文件内重新写一下css样式进行覆盖。</p><br><ul><li><p>POST 请求出现 <code>400 (BAD REQUEST)</code> 报错信息</p><p><strong>Solve：请求体 data 里采用 formData 格式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">methods: &#123;<br>  <span class="hljs-attr">query</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> formData = <span class="hljs-keyword">new</span> FormData()<br>    formData.append(<span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-built_in">this</span>.ques)<br>    axios(&#123;<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://127.0.0.1:5000&#x27;</span>,<br>      <span class="hljs-attr">data</span>: formData<br>    &#125;).then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> (<span class="hljs-built_in">this</span>.ans = response))<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>application/x-www-form-urlencoded</strong> 他能简洁的将key：value的数据进行分割。这一点相比form-data使用长长的字符串作为分割符优势巨大，虽然对于多字节的数据会因为编码造成字节量剧增(可以看到一个中文字符增加了2倍字节量)，但是在单字节或者是少量的数据时，这种方式是划算的。<br><strong>form-data</strong> 是一种重视数据的方式，通常我们在value值中会发送大量的文本信息，或者直接的传送一个文件，数据直接编码为二进制发送，不会产生多余的字节，适合大文本的传输。</p><br><ul><li><p>部署到Nginx之后vue中样式被覆盖</p><p>Solve：<a href="https://www.cnblogs.com/Simple-and-complex/p/11573738.html">https://www.cnblogs.com/Simple-and-complex/p/11573738.html</a></p></li></ul><br><ul><li>报错信息：</li></ul><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">npm ERR! If you believe this might be a permissions issue,please<span class="hljs-built_in"> double-check </span>the<br>npm ERR! permissions of the file<span class="hljs-built_in"> and </span>its containing directories,<span class="hljs-built_in"> or </span>try running<br>npm ERR! the command again as root/Administrator.<br></code></pre></td></tr></table></figure><p>​    try running the command again as root/Administrator</p><p>​    <strong>Solve：以管理员身份打开 cmd 进行操作</strong></p><br><ul><li><p>使用vue ui创建新项目时出现问题:</p><p><strong>Cannot read property ‘indexOf‘ of undefined</strong></p><p><strong>Solve：以管理员身份打开 cmd 进行操作</strong></p></li></ul><br><ul><li><p>使用vue create创建新项目失败:</p><p><strong>Solve：以管理员身份打开 cmd 进行操作</strong></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>View UI</title>
    <link href="/2021/11/07/Vue.js/View%20UI/"/>
    <url>/2021/11/07/Vue.js/View%20UI/</url>
    
    <content type="html"><![CDATA[<p>View UI 是一套基于 Vue.js 的<strong>开源 UI 组件库</strong>，主要服务于 PC 界面的中后台产品。</p><p>相比于 Element UI，View UI 一直在更新和维护。</p><p>官方文档：<a href="http://v1.iviewui.com/docs/introduce">http://v1.iviewui.com/docs/introduce</a></p><br><h3 id="分页功能的实现"><a href="#分页功能的实现" class="headerlink" title="分页功能的实现"></a>分页功能的实现</h3><p><a href="https://blog.csdn.net/j1231230/article/details/113242354?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.no_search_link&amp;spm=1001.2101.3001.4242.1">https://blog.csdn.net/j1231230/article/details/113242354?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.no_search_link&amp;spm=1001.2101.3001.4242.1</a></p><br><h3 id="在-View-UI-的表格-Table-元素中展示图片-img-的方法："><a href="#在-View-UI-的表格-Table-元素中展示图片-img-的方法：" class="headerlink" title="在 View UI 的表格 Table 元素中展示图片 img 的方法："></a>在 View UI 的表格 Table 元素中展示图片 img 的方法：</h3><p>在  <code>&lt;Table :columns=&#39;columns1&#39; :data=&#39;data1&#39; style=&quot;text-align: center;&quot;&gt;&lt;/Table&gt;</code></p><p>的列属性 columns1 中添加 <strong>render</strong> 渲染函数：</p><p>（其中 icon 为待渲染 data1 数组里图片的 key 值，要<strong>注意图片大小设置</strong>）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;图标&#x27;</span>,<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;icon&#x27;</span>,<br>    <span class="hljs-attr">render</span>: <span class="hljs-function">(<span class="hljs-params">h, params</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> h(<span class="hljs-string">&#x27;img&#x27;</span>, &#123;<br>        <span class="hljs-attr">props</span>: &#123;<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;primary&#x27;</span>,<br>          <span class="hljs-attr">size</span>: <span class="hljs-string">&#x27;small&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">attrs</span>: &#123;<br>          <span class="hljs-attr">src</span>: params.row.icon, <span class="hljs-attr">style</span>: <span class="hljs-string">&#x27;width: 90px;height: 90px;border-radius: 2px;&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">style</span>: &#123;<br>        &#125;<br>      &#125;)<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>完整Code：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;table&#x27;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;select&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">RadioGroup</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;button1&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;button&#x27;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&#x27;large&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;RadioGroup&#x27;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Radio</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&#x27;北京&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;pro&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Radio</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">RadioGroup</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;select3&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;primary&#x27;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#x27;ios-search&#x27;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;query()&#x27;</span>&gt;</span>查询<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&#x27;isShow&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Table</span> <span class="hljs-attr">:columns</span>=<span class="hljs-string">&#x27;columns1&#x27;</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&#x27;data1&#x27;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Table</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &lt;/template&gt;<br>  &lt;script&gt;<br>  <span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;axios&#x27;</span>)<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;table&#x27;</span>,<br>    <span class="hljs-attr">components</span>: &#123;&#125;,<br>    data () &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">isShow</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">button1</span>: <span class="hljs-string">&#x27;北京&#x27;</span>,<br>        <span class="hljs-attr">info</span>: <span class="hljs-literal">null</span>,<br>        <span class="hljs-attr">columns1</span>: [<br>          &#123;<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;学校&#x27;</span>,<br>            <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;name&#x27;</span><br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;图标&#x27;</span>,<br>            <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;icon&#x27;</span>,<br>            <span class="hljs-attr">render</span>: <span class="hljs-function">(<span class="hljs-params">h, params</span>) =&gt;</span> &#123;<br>              <span class="hljs-keyword">return</span> h(<span class="hljs-string">&#x27;img&#x27;</span>, &#123;<br>                <span class="hljs-attr">props</span>: &#123;<br>                  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;primary&#x27;</span>,<br>                  <span class="hljs-attr">size</span>: <span class="hljs-string">&#x27;small&#x27;</span><br>                &#125;,<br>                <span class="hljs-attr">attrs</span>: &#123;<br>                  <span class="hljs-attr">src</span>: params.row.icon, <span class="hljs-attr">style</span>: <span class="hljs-string">&#x27;width: 90px;height: 90px;border-radius: 2px;&#x27;</span><br>                &#125;,<br>                <span class="hljs-attr">style</span>: &#123;<br>                &#125;<br>              &#125;)<br>            &#125;<br>          &#125;<br>        ],<br>        <span class="hljs-attr">data1</span>: []<br>      &#125;<br>    &#125;,<br>    <span class="hljs-attr">methods</span>: &#123;<br>      <span class="hljs-attr">query</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        axios<br>          .get(<br>            <span class="hljs-string">&#x27;http://47.94.129.13:8081/college/&#x27;</span> + <span class="hljs-built_in">this</span>.button1<br>          )<br>          .then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> (<span class="hljs-built_in">this</span>.info = response))<br>        <span class="hljs-built_in">this</span>.isShow = <span class="hljs-literal">true</span><br>        <span class="hljs-built_in">this</span>.len = <span class="hljs-built_in">this</span>.info.data.data.length<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.info.data.data.length; i++) &#123;<br>          <span class="hljs-keyword">var</span> item = &#123;<span class="hljs-attr">name</span>: <span class="hljs-built_in">this</span>.info.data.data[i].name,<br>            <span class="hljs-attr">icon</span>: <span class="hljs-built_in">this</span>.info.data.data[i].icon&#125;<br>          <span class="hljs-built_in">this</span>.data1.unshift(item)<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><br><p>同Element UI，一个页面一共有24列</p><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;Row type=&quot;flex&quot; justify=&quot;center&quot;&gt;<br>&lt;Col span=&quot;1&quot;&gt;&lt;h1&gt;666&lt;/h1&gt;&lt;/Col&gt;<br>&lt;/Row&gt;<br></code></pre></td></tr></table></figure><p>设置 type=”flex” 和 justify=”center” 可以使得内部元素<strong>居中</strong>显示</p><br><p><strong>main.js 中的 render 渲染函数指定 import 进的单文件组件进行渲染展示</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> ViewUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;view-design&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;view-design/dist/styles/iview.css&#x27;</span>;<br><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span><span class="hljs-string">&#x27;./app1.vue&#x27;</span><br><span class="hljs-comment">// import App from&#x27;./app2.vue&#x27;</span><br><span class="hljs-comment">// import App from&#x27;./app3.vue&#x27;</span><br><br>Vue.use(ViewUI);<br><br>Vue.config.productionTip = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><br><p>栅格-布局实例：app1.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div style=&quot;background:#eeeeee;&quot;&gt;<br><br>        &lt;Row type=&quot;flex&quot; justify=&quot;center&quot;&gt;<br>            &lt;Col span=&quot;1&quot;&gt;&lt;h1&gt;666&lt;/h1&gt;&lt;/Col&gt;<br>        &lt;/Row&gt;<br><br>        &lt;!-- 头部空位 --&gt;<br>        &lt;Row type=&quot;flex&quot; justify=&quot;center&quot; style=&quot;background:#ee66ee; padding: 10px 0 10px 0;&quot;&gt;<br>            &lt;Col span=&quot;8&quot; style=&quot;height:150px;background:orange;&quot; &gt;&lt;/Col&gt;<br>        &lt;/Row&gt;<br><br>        &lt;!-- 主体部分 --&gt;<br>        &lt;Row type=&quot;flex&quot; justify=&quot;center&quot; style=&quot;background:#7777ee; padding: 10px 0 10px 0;&quot;&gt;<br>            &lt;Col span=&quot;8&quot; &gt;<br>                &lt;Layout&gt;<br>                    &lt;Content style=&quot;display:flex; justify-content:center; background:#eeeeee; padding: 10px 0 10px 0;&quot;&gt;<br>                        &lt;Card class=&quot;Card&quot; style=&quot;border-radius:30px;&quot;&gt;<br>                          &lt;br&gt;<br>                            ----------------------------------------------------------------------<br>                          &lt;br&gt;<br>                            ----------------------------------------------------------------------<br>                          &lt;br&gt;<br>                            ----------------------------------------------------------------------<br>                          &lt;br&gt;<br>                            ----------------------------------------------------------------------<br>                          &lt;br&gt;<br>                            ----------------------------------------------------------------------<br>                          &lt;br&gt;<br>                            ----------------------------------------------------------------------<br>                          &lt;br&gt;<br>                            ----------------------------------------------------------------------<br>                          &lt;br&gt;<br>                            ----------------------------------------------------------------------<br>                          &lt;br&gt;<br>                            ----------------------------------------------------------------------<br>                        &lt;/Card&gt;<br>                    &lt;/Content&gt;<br>                &lt;/Layout&gt;<br>            &lt;/Col&gt;<br>        &lt;/Row&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    export default &#123;<br>        name:&#x27;App&#x27;,<br>        data () &#123;<br>            return &#123;<br>            <br>            &#125;<br>        &#125;,<br>        methods: &#123;<br>          <br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><br><p>登录界面实例：app2.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div style=&quot;background:#eeeeee;&quot;&gt;<br>        &lt;!-- 头部空位 --&gt;<br>        &lt;Row type=&quot;flex&quot; justify=&quot;center&quot;&gt;<br>            &lt;Col span=&quot;8&quot; style=&quot;height:150px;&quot;&gt;&lt;/Col&gt;<br>        &lt;/Row&gt;<br><br>        &lt;!-- 主体部分 --&gt;<br>        &lt;Row type=&quot;flex&quot; justify=&quot;center&quot;&gt;<br>            &lt;Col span=&quot;8&quot; style=&quot;height:600px;&quot;&gt;<br>                &lt;Layout&gt;<br>                    &lt;Content style=&quot;display:flex;justify-content:center;background:#eeeeee&quot;&gt;<br>                        &lt;Card class=&quot;Card&quot;&gt;<br>                            &lt;br&gt;<br>                            &lt;h1 style=&quot;text-align: center;font-size:32px;&quot;&gt;欢迎登陆&lt;/h1&gt;<br>                            &lt;br&gt;<br>                            &lt;div style=&quot;background-color:#dddddd;height:2px;&quot;&gt;&lt;/div&gt;<br>                            &lt;br&gt;<br>                            &lt;Form class=&quot;Form&quot; ref=&quot;formValidate&quot; :model=&quot;formValidate&quot; :rules=&quot;ruleValidate&quot; :label-width=&quot;80&quot;&gt;<br>                                &lt;FormItem label=&quot;用户名&quot; prop=&quot;name&quot; &gt;<br>                                    &lt;Input v-model=&quot;formValidate.name&quot; placeholder=&quot;请输入用户名&quot;&gt;&lt;/Input&gt;<br>                                &lt;/FormItem&gt;<br>                                &lt;FormItem label=&quot;密码&quot; prop=&quot;password&quot;&gt;<br>                                    &lt;Input type=&quot;password&quot; v-model=&quot;formValidate.password&quot; placeholder=&quot;请输入密码&quot;&gt;&lt;/Input&gt;<br>                                &lt;/FormItem&gt;<br><br>                                &lt;FormItem prop=&quot;g&quot;&gt;<br>                                    &lt;RadioGroup v-model=&quot;formValidate.g&quot;&gt;<br>                                        &lt;Radio label=&#x27;a&#x27;&gt;仅前端&lt;/Radio&gt;<br>                                        &lt;Radio label=&#x27;b&#x27;&gt;发送给后端&lt;/Radio&gt;<br>                                    &lt;/RadioGroup&gt;<br>                                &lt;/FormItem&gt;<br><br>                                &lt;FormItem v-show=&quot;formValidate.g===&#x27;b&#x27;&quot; label=&quot;IP地址&quot; prop=&quot;ip&quot;&gt;<br>                                    &lt;Input v-model=&quot;formValidate.ip&quot; &gt;&lt;/Input&gt;<br>                                &lt;/FormItem&gt;<br>                                &lt;FormItem&gt;<br>                                    &lt;Button type=&quot;primary&quot; @click=&quot;handleSubmit(&#x27;formValidate&#x27;)&quot;&gt;Submit&lt;/Button&gt;<br>                                    &lt;Button @click=&quot;handleReset(&#x27;formValidate&#x27;)&quot; style=&quot;margin-left: 8px&quot;&gt;Reset&lt;/Button&gt;<br>                                &lt;/FormItem&gt;<br>                            &lt;/Form&gt;<br>                        &lt;/Card&gt;<br>                    &lt;/Content&gt;<br>                &lt;/Layout&gt;<br>            &lt;/Col&gt;<br>        &lt;/Row&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    export default &#123;<br>        name:&#x27;App&#x27;,<br>        data () &#123;<br>            return &#123;<br>                formValidate: &#123;<br>                    name: &#x27;&#x27;,<br>                    password: &#x27;&#x27;,<br>                    g: &#x27;a&#x27;,<br>                    ip: &#x27;http://192.168.101.55/&#x27;<br>                &#125;,<br>                ruleValidate: &#123;<br>                    name: [<br>                        &#123; required: true, message: &#x27;用户名不能为空&#x27;, trigger: &#x27;blur&#x27; &#125;<br>                    ],<br>                    password: [<br>                        &#123; required: true, message: &#x27;密码不能为空&#x27;, trigger: &#x27;blur&#x27; &#125;,<br>                    ],<br>                    ip: [<br>                        &#123; required: true, message: &#x27;后端IP地址不能为空&#x27;, trigger: &#x27;blur&#x27; &#125;,<br>                    ],<br>                    g: [<br>                        &#123; required: true, message: &#x27;&#x27;, trigger: &#x27;change&#x27; &#125;<br>                    ],<br>                &#125;<br>            &#125;<br>        &#125;,<br>        methods: &#123;<br>            handleSubmit (name) &#123;<br>                this.$refs[name].validate((valid) =&gt; &#123;<br>                    if (valid) &#123;<br>                        this.$Message.success(`用户名：$&#123;this.formValidate.name&#125;，密码：$&#123;this.formValidate.password&#125;`);<br>                    &#125; else &#123;<br>                        this.$Message.error(&#x27;格式错误，请检查！&#x27;);<br>                    &#125;<br>                &#125;)<br>            &#125;,<br>            handleReset (name) &#123;<br>                this.$refs[name].resetFields();<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.Card&#123; // 原生css<br>    border-radius:30px;<br>    width: 370px;<br>    // justify-content: center; // 这样会使得Card里面的元素居中<br>    box-shadow: 5px 5px 5px 5px #cccccc; <br>&#125;<br>.Form&#123;<br>    padding: 5%;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><br><p>主页面实例：app3.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div style=&quot;background:#eeeeee;font-size:20px;&quot;&gt;<br><br>        &lt;!-- -------------头部------------- --&gt;<br>        &lt;Row type=&quot;flex&quot; justify=&quot;center&quot; style=&quot;background:#409eff; font-size:15px; padding: 8px 0 10px 0;&quot;&gt; <br>            &lt;Col span=&quot;15&quot;&gt;<br>                &lt;h1 style=&quot;color:#fff&quot;&gt;&#123;&#123; pj_name &#125;&#125;&lt;/h1&gt;<br>            &lt;/Col&gt;<br>        &lt;/Row&gt;<br><br>        &lt;!-- -------------简介------------- --&gt;<br>        &lt;Row type=&quot;flex&quot; justify=&quot;center&quot; style=&quot;padding: 40px 0 40px 0;&quot;&gt;<br>            &lt;Col span=&quot;15&quot;&gt;<br>                &lt;br&gt;<br>                &lt;h1 style=&quot;font-size:50px&quot; &gt;Hello,&#123;&#123; welcome &#125;&#125;,...&lt;/h1&gt;<br>                &lt;p&gt;This is a template for a simple marketing or informational website. It includes a large callout called a jumbotron and three supporting pieces of content. Use it as a starting point to create something more unique.&lt;/p&gt;<br>                &lt;br&gt;<br>                &lt;Button size=&#x27;large&#x27; type=&quot;primary&quot;&gt;Learn more &gt;&gt;&lt;/Button&gt;<br><br>            &lt;/Col&gt;<br>        &lt;/Row&gt;<br><br>        &lt;!-- -------------主体------------- --&gt;<br>        &lt;Row type=&quot;flex&quot; justify=&quot;center&quot; style=&quot;padding: 0px 0 30px 0;&quot;&gt;<br>            &lt;!-- &lt;Col span=&quot;15&quot; style=&quot;background:#409eff;&quot;&gt; --&gt;<br>            &lt;Col span=&quot;15&quot; &gt;<br>                &lt;Card class=&quot;Card&quot; v-for=&quot;heading in headings&quot; :key=heading&gt;<br>                    &lt;br&gt;<br>                    &lt;h2 &gt;&#123;&#123;heading&#125;&#125;&lt;/h2&gt;<br>                    &lt;br&gt;<br>                    &lt;p style=&quot;font-size:16px;&quot;&gt;Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh.&lt;/p&gt;<br>                    &lt;Button size=&#x27;small&#x27; &gt;View details &gt;&gt;&lt;/Button&gt;<br>                    &lt;br&gt;<br>                    &lt;br&gt;<br>                &lt;/Card&gt;<br>            &lt;/Col&gt;<br>        &lt;/Row&gt;<br><br>        &lt;!-- -------------结尾------------- --&gt;<br>        &lt;Row type=&quot;flex&quot; justify=&quot;center&quot; style=&quot;padding: 20px 0 20px 0;&quot;&gt;<br>        &lt;!-- &lt;Col span=&quot;15&quot; style=&quot;background:#409eff;&quot;&gt; --&gt;<br>            &lt;Col span=&quot;15&quot; &gt;<br>                &lt;div style=&quot;background-color:#bbbbbb;height:2px;&quot;&gt;&lt;/div&gt;<br>                &lt;br&gt;<br>                &lt;p&gt;© 2021 UCAS, Inc.&lt;/p&gt;<br>            &lt;/Col&gt;<br>        &lt;/Row&gt;<br><br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    export default &#123;<br>        name:&quot;App&quot;,<br>        data () &#123;<br>            return &#123;<br>                headings:[&#x27;1Heading&#x27;,&#x27;2Heading&#x27;,&#x27;3Heading&#x27;, &#x27;4Heading&#x27;,&#x27;5Heading&#x27;,&#x27;6Heading&#x27;],<br>                welcome: &#x27;Vue.js,Element-UI&#x27;,<br>                pj_name: &#x27;Project Name&#x27;<br>            &#125;<br>        &#125;,<br>        methods: &#123;<br>  <br>            &#125;,<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.Card&#123; // 原生css<br>    background:#fbfbfb;<br>    width: 305px;<br>    // height: 300px;<br>    display: inline-block;<br>    margin: 0.3em;<br>    border-radius:20px;<br>    // justify-content: center; // 这样会使得Card里面的元素居中<br>    box-shadow: 5px 5px 5px 5px #cccccc; <br>&#125;<br>.Form&#123;<br>    padding: 5%;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><br>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Element UI</title>
    <link href="/2021/11/07/Vue.js/Element%20UI/"/>
    <url>/2021/11/07/Vue.js/Element%20UI/</url>
    
    <content type="html"><![CDATA[<p>Element UI 是一套采用 Vue 2.0 作为基础框架实现的<strong>组件库</strong></p><p>官方文档：<a href="https://element.eleme.cn/#/zh-CN/component/installation">https://element.eleme.cn/#/zh-CN/component/installation</a></p><p>项目案例：<a href="https://github.com/oinsd/Vue.js-Learning-Example">https://github.com/oinsd/Vue.js-Learning-Example</a> </p><p>​                （NO.15_简介_简单组合效果_布局与容器）</p><p>（样例的项目不包含 node_modules，需要 <code>npm install</code> 进行导包）</p><br><p>样例项目中几个单文件组件的介绍：</p><ul><li>App_Layout_Container.vue：一共24列，偏移4列开始，使用16列</li></ul><img src="/images/布局_容器.png" alt="布局_容器" style="zoom: 33%;"><img src="/images/容器.png" alt="容器" style="zoom: 33%;"><ul><li>App_form_2.vue：一共24列，偏移8列开始，使用8列</li></ul><p>注：想要在某个方法里通过 this 寻找某个 data 属性值，可以先用 <strong>console.log(this)</strong> 在控制台输出组件对象信息，再寻找该 data 属性，进而完成 this 的访问</p><br>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue-CLI</title>
    <link href="/2021/11/07/Vue.js/Vue-CLI/"/>
    <url>/2021/11/07/Vue.js/Vue-CLI/</url>
    
    <content type="html"><![CDATA[<p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，简单来说就是 Vue 搭建的架子。</p><p>教程：<a href="https://cli.vuejs.org/zh/guide/">https://cli.vuejs.org/zh/guide/</a></p><p>通过 <code>vue create</code> 创建项目后不要修改里面文件的名称，以免之后的自动导包出错。</p><ul><li><p>本地运行使用 <code>npm run serve</code>  （见<strong>README</strong>）</p></li><li><p>安装依赖包使用 <code>npm install</code></p></li></ul><h3 id="项目文件介绍"><a href="#项目文件介绍" class="headerlink" title="项目文件介绍"></a>项目文件介绍</h3><ul><li><p>main.js 是 Vue 项目的<strong>入口文件</strong></p></li><li><p>App.vue 是 <strong>root 根组件</strong></p></li><li><p>components 里的 vue 是<strong>单文件组件</strong></p></li><li><p>单文件组建中用 <strong>export default</strong> 暴露该组件的 name，在另一个组件文件中用 <strong>import</strong> 进行引用</p><p>( 注：如果只有一个export default，将默认被认为一个名字，在main.js里面导入无论什么名字都行）</p></li></ul><p>main.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>表示 <strong>root 根组件 App</strong> 挂载到 app 上</p><br><h3 id="使用-vue-ui-创建项目"><a href="#使用-vue-ui-创建项目" class="headerlink" title="使用 vue-ui 创建项目"></a>使用 vue-ui 创建项目</h3><p><strong>创建项目的方式：</strong></p><p>1、<code>vue create hello-world</code></p><p>2、<code>vue ui</code> 进行网页在线项目创建  （以<strong>管理员</strong>身份打开cmd ）</p><p>创建具体步骤见：<a href="https://www.bilibili.com/video/BV1dk4y167bS?p=8">https://www.bilibili.com/video/BV1dk4y167bS?p=8</a></p><br><h3 id="项目打包-amp-Nginx-发布"><a href="#项目打包-amp-Nginx-发布" class="headerlink" title="项目打包 &amp; Nginx 发布"></a>项目打包 &amp; Nginx 发布</h3><p>在 VSCode 终端键入 <code>npm run build</code> 进行项目的打包</p><p>配置 nginx.conf 文件进行 Nginx 发布</p><p>具体操作见：<a href="https://www.bilibili.com/video/BV1dk4y167bS?p=10">https://www.bilibili.com/video/BV1dk4y167bS?p=10</a></p><p>项目代码见：<a href="https://github.com/oinsd/Vue.js-Learning-Example">https://github.com/oinsd/Vue.js-Learning-Example</a> </p><p>（NO.14_vue-cli_vue-ui创建项目_多个但组件_less_项目打包_nginx发布）</p><p>（<strong>不包含 node_modules，需要 <code>npm install</code> 进行导包</strong>）</p><br>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Less (依赖包加载)</title>
    <link href="/2021/11/07/Vue.js/Less/"/>
    <url>/2021/11/07/Vue.js/Less/</url>
    
    <content type="html"><![CDATA[<h4 id="Less简介"><a href="#Less简介" class="headerlink" title="Less简介"></a>Less简介</h4><p>Less 是一门 CSS 预处理语言，它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充。Less 可以运行在 Node 或浏览器端。</p><br><h4 id="Less加载"><a href="#Less加载" class="headerlink" title="Less加载"></a>Less加载</h4><p>注：安装依赖包 less 时需要注意 less 和 less-loader 的版本</p><p><strong><code>npm install less@3.0.4 less-loader@5.0.0 --save-dev</code></strong></p><p>–save-dev 表示会把依赖包名称添加到 package.json 文件 devDependencies 键下。</p><p>其中devDependencies是开发时的依赖，即devDependencies 下列出的模块，是我们开发时用的。</p><br>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue的v-指令</title>
    <link href="/2021/11/07/Vue.js/Vue%E7%9A%84v-%E6%8C%87%E4%BB%A4/"/>
    <url>/2021/11/07/Vue.js/Vue%E7%9A%84v-%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="v-text-指令"><a href="#v-text-指令" class="headerlink" title="v-text 指令"></a>v-text 指令</h2><ul><li><p>v-text 指令的作用：设置标签的内容（textContent）</p></li><li><p>默认写法会替换标签内部内容，使用<strong>插值表达式<code>&#123;&#123;&#125;&#125;</code>可以替换指定内容</strong></p></li><li><p>内部支持写表达式（如字符串拼接）</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-tetx指令<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;message+&#x27;  !!  覆盖标签内部内容&#x27;&quot;</span>&gt;</span>Coding<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123;message+&quot;  !!  &quot;&#125;&#125;Coding<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span> <span class="hljs-comment">&lt;!-- 使用差值表达式&#123;&#123;&#125;&#125;可避免覆盖 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  </span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;万事万物皆对象&quot;</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="v-html-指令"><a href="#v-html-指令" class="headerlink" title="v-html 指令"></a>v-html 指令</h2><ul><li><p>v-html 指令的作用是：设置元素的<strong>innerHTML</strong></p></li><li><p>内容中有<strong>html结构会被解析为标签</strong></p></li><li><p>v-text指令无论内容是什么，只会解析为文本</p></li><li><p><strong>解析文本使用v-text，需要解析html结构使用v-html</strong></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-html指令<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-comment">//message:&quot;百度一下&quot;</span></span><br><span class="javascript">                <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;&lt;a href=&#x27;https://www.baidu.com/&#x27;&gt;百度一下&lt;/a&gt;&quot;</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="v-on-指令"><a href="#v-on-指令" class="headerlink" title="v-on 指令"></a>v-on 指令</h2><ul><li><p>v-on 指令的作用是：<strong>为元素绑定事件</strong></p></li><li><p>事件名不需要写on</p></li><li><p>指令可以简写为**@**</p></li><li><p>绑定的方法定义在 Vue 实例的<strong>methods</strong>属性中</p></li><li><p>方法内部通过<strong>this</strong>关键字可以<strong>访问定义在data中数据</strong></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-on指令<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;v-on指令&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;doIt&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;v-on简写&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;doIt&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;v-on双击&quot;</span> @<span class="hljs-attr">dblclick</span>=<span class="hljs-string">&quot;doIt&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeFood&quot;</span>&gt;</span>&#123;&#123;food&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 创建Vue实例</span></span><br><span class="javascript">        <span class="hljs-comment">//el(挂载点),data(数据),methods(方法)</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">food</span>:<span class="hljs-string">&quot;热干面&quot;</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">doIt</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    alert(<span class="hljs-string">&quot;篮网总冠军！&quot;</span>)</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">changeFood</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.food += <span class="hljs-string">&quot; 真香！&quot;</span></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>补充:</p><ul><li><p>事件绑定的方法写成<strong>函数调用</strong>的形式，可以传入自定义参数</p></li><li><p>定义方法时需要定义形参来接收传入的实参</p></li><li><p>事件的后面跟上 . 修饰符可以对事件进行限制</p></li><li><p><strong>.enter</strong>可以限制触发的按键为回车</p></li><li><p>事件修饰符有多种，见</p><p><a href="https://cn.vuejs.org/v2/api/#v-on">https://cn.vuejs.org/v2/api/#v-on</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-on指令补充<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;doIt(&#x27;老铁&#x27;,666)&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;sayHi&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">doIt</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">p1,p2</span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;点击！！！&quot;</span>);</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(p1);</span><br><span class="javascript">                    alert(p2);</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">sayHi</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    alert(<span class="hljs-string">&quot;输入完毕！！！&quot;</span>)</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><br><h2 id="v-show-指令"><a href="#v-show-指令" class="headerlink" title="v-show 指令"></a>v-show 指令</h2><ul><li><p>v-show 指令 → <strong>根据真假切换元素的显示状态</strong></p></li><li><p>原理是修改元素的<strong>display</strong>，实现元素的显示 or 隐藏</p></li><li><p>指令后面的内容最终都会解析为<strong>布尔值</strong></p></li><li><p>值为true元素显示，值为false元素隐藏</p></li><li><p>改变之后，对应元素的显示状态会<strong>同步更新</strong></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-show指令<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span>&gt;</span>测试是否显示内容<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeIsShow&quot;</span>&gt;</span>点击切换显示状态<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;age&gt;=18&quot;</span>&gt;</span>测试是否大于等于18<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeAge&quot;</span>&gt;</span>增加年龄进行显示<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeAge2&quot;</span>&gt;</span>回到17<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">isShow</span>:<span class="hljs-literal">false</span>,</span><br><span class="javascript">                <span class="hljs-attr">age</span>:<span class="hljs-number">17</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">changeIsShow</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.isShow = !<span class="hljs-built_in">this</span>.isShow</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">changeAge</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.age++</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">changeAge2</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.age=<span class="hljs-number">17</span></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="v-if、v-else-if、v-else-指令"><a href="#v-if、v-else-if、v-else-指令" class="headerlink" title="v-if、v-else-if、v-else 指令"></a>v-if、v-else-if、v-else 指令</h2><ul><li><p>v-if 指令 → <strong>根据表达式的真假切换元素的显示状态</strong></p></li><li><p>本质是通过操纵<strong>dom</strong>元素来切换显示状态</p></li><li><p><strong>表达式的值为true,元素存在于dom树中；为false,从dom树中移除</strong></p></li><li><p>需要频繁的切换就用v-show，反之使用v-if，<strong>v-show的切换消耗小</strong></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-if指令<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeIsShow&quot;</span>&gt;</span>点击切换显示<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isShow&quot;</span>&gt;</span>天下武功，唯快不破！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeTemperature&quot;</span>&gt;</span>点击隐藏温度<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeTemperature2&quot;</span>&gt;</span>点击显示温度<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;temperature&gt;30&quot;</span>&gt;</span>热死了！！！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">isShow</span>:<span class="hljs-literal">false</span>,</span><br><span class="javascript">                <span class="hljs-attr">temperature</span>:<span class="hljs-number">20</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">changeIsShow</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.isShow = !<span class="hljs-built_in">this</span>.isShow</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">changeTemperature</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.temperature = <span class="hljs-number">20</span></span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">changeTemperature2</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.temperature = <span class="hljs-number">35</span></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：v-else 、v-else-if 必须跟在 v-if 或者 v-else-if之后。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-if/v-else<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span><br>            A<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span><br>            B<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span><br>            C<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span><br>            Not A/B/C<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;D&#x27;</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="v-bind-指令"><a href="#v-bind-指令" class="headerlink" title="v-bind 指令"></a>v-bind 指令</h2><ul><li><p>v-bind 指令的作用是：<strong>为元素绑定属性 / 动态修改元素属性</strong></p></li><li><p>完整写法是 v-bind: 属性名 = 表达式</p></li><li><p>简写的话可以直接省略v-bind，只保留 <strong>: 属性名 = 表达式</strong></p></li><li><p>需要<strong>动态的增删class</strong>建议使用<strong>对象</strong>的方式</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-bind指令<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.active</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">border</span>:<span class="hljs-number">5px</span>  solid orange;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> 篮网总冠军！<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;isActive?&#x27;active&#x27;:&#x27;&#x27;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeActive&quot;</span>&gt;</span>篮网总冠军！<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;active:isActive&#125;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeActive&quot;</span>&gt;</span>篮网总冠军！<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 使用对象方式，省略v-bind --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">isActive</span>:<span class="hljs-literal">false</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">changeActive</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.isActive = !<span class="hljs-built_in">this</span>.isActive</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="v-for-指令"><a href="#v-for-指令" class="headerlink" title="v-for 指令"></a>v-for 指令</h2><ul><li><p>v-for 指令的作用是：根据数据生成<strong>列表结构</strong></p></li><li><p><strong>数组</strong>经常和 <strong>v-for</strong> 结合使用</p></li><li><p>语法是**( item,index ) in 数据**   </p><p>( <strong>item 代表每一项，index 代表索引</strong> )</p></li><li><p>item和index可以结合其他指令一起使用</p></li><li><p>数组长度的<strong>更新</strong>会<strong>同步</strong>到页面上，是<strong>响应式</strong>的</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-for指令<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in arr&quot;</span>&gt;</span><br>                &#123;&#123;index+1&#125;&#125;四大神兽：&#123;&#123;item&#125;&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>添加蔬菜<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;remove&quot;</span>&gt;</span>减少蔬菜<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in vegetables&quot;</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;item.name&quot;</span>&gt;</span><br>            &#123;&#123;item.name&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">arr</span>: [<span class="hljs-string">&quot;青龙&quot;</span>, <span class="hljs-string">&quot;白虎&quot;</span>, <span class="hljs-string">&quot;朱雀&quot;</span>, <span class="hljs-string">&quot;玄武&quot;</span>],</span><br><span class="javascript">                <span class="hljs-attr">vegetables</span>: [</span><br><span class="javascript">                    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;青菜&quot;</span> &#125;,</span><br><span class="javascript">                    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;番茄&quot;</span> &#125;</span><br><span class="javascript">                ]</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">add</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.vegetables.push(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;生菜&quot;</span> &#125;);</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">remove</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.vegetables.shift();<span class="hljs-comment">//移除第一项内容</span></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><ul><li>v-model → 便捷的<strong>获取和设置表单元素的值</strong></li><li>绑定的 <strong>数据</strong> 会和 <strong>表单元素值</strong> <strong>相关联</strong></li><li>绑定的数据←→表单元素的值 ( <strong>双向数据绑定</strong> )</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;设置message&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;setMessage&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;getMessage&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 同步显示 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;你好&quot;</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">getMessage</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    alert(<span class="hljs-built_in">this</span>.message)</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">setMessage</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.message=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-comment">//方法内部通过this可以访问定义在data中的数据</span></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue组件</title>
    <link href="/2021/11/07/Vue.js/Vue%E7%BB%84%E4%BB%B6/"/>
    <url>/2021/11/07/Vue.js/Vue%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><p>组件是可复用的 Vue 实例，且带有一个名字。在这个例子中定义了一个组件 <code>&lt;button-counter&gt;</code>。我们可以在一个通过 <code>new Vue</code> 创建的 **Vue 根实例(根组件)**中，把这个组件作为自定义元素来使用。</p><p><strong>组件</strong>可以理解为一个新的 <strong>元素 / 节点</strong>——提高代码复用率。</p><p>利用 <strong>Vue.component</strong> 方法创建组件。</p><p>详情见：<a href="https://cn.vuejs.org/v2/guide/components.html">https://cn.vuejs.org/v2/guide/components.html</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue组件<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;components-demo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        </span><br><span class="javascript">        Vue.component</span><br><span class="javascript">        (</span><br><span class="javascript">            <span class="hljs-string">&#x27;button-counter&#x27;</span>, <span class="hljs-comment">// 定义一个名为 button-counter 的新组件</span></span><br><span class="javascript">            &#123;</span><br><span class="javascript">                <span class="hljs-attr">template</span>: <span class="hljs-comment">// HTML代码</span></span><br><span class="javascript">                    <span class="hljs-string">&#x27;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">data</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) // <span class="hljs-title">data</span>要写成函数返回形式</span></span><br><span class="hljs-function"><span class="javascript">                </span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        )</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123; <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#components-demo&#x27;</span> &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>组件注意事项：</p><ul><li><p>必须有一个<strong>根节点</strong>（<strong>new Vue</strong>），只要与内部标签不冲突。</p></li><li><p>组件间可通过 <strong>props</strong> 进行通讯</p></li><li><p>组件可以有多个属性，但是 <strong>data <strong>属性的写法必须是</strong>方法+返回值</strong></p></li></ul><br><h2 id="子组件和父组件实例"><a href="#子组件和父组件实例" class="headerlink" title="子组件和父组件实例"></a>子组件和父组件实例</h2><ul><li><h3 id="new-Vue-是-root-根组件，是-abar、bbar-的父组件"><a href="#new-Vue-是-root-根组件，是-abar、bbar-的父组件" class="headerlink" title="new Vue 是 root 根组件，是 abar、bbar 的父组件"></a>new Vue 是 root 根组件，是 abar、bbar 的父组件</h3></li><li><strong>非单一文件组件</strong>的 CSS 样式只能放在标签属性里</li><li>child 为<strong>公共子组件</strong>，与 abar、bbar 同级</li><li>abar 里的 abar_child 是 abar <strong>私有的子组件</strong>，只能被 abar 使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">abar</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">abar</span>&gt;</span> <br>        <span class="hljs-comment">&lt;!-- &lt;abar&gt;&lt;/abar&gt;放在根组件的child中，就是根组件的child --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bbar</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bbar</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 全局定义组件</span></span><br><span class="javascript">        Vue.component</span><br><span class="javascript">        (   </span><br><span class="javascript">            <span class="hljs-string">&#x27;abar&#x27;</span>,</span><br><span class="javascript">            &#123;</span><br><span class="javascript">                <span class="hljs-comment">// 非单一文件组件的CSS样式只能放在标签属性里</span></span><br><span class="javascript">                <span class="hljs-comment">// div为有且仅有一个的根节点</span></span><br><span class="javascript">                <span class="hljs-attr">template</span>:<span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="javascript">                    &lt;div style=&#x27;background:orange&#x27;&gt;</span></span><br><span class="hljs-string"><span class="javascript">                        【公共root组件的child组件：abar组件】</span></span><br><span class="hljs-string"><span class="javascript">                        &lt;button @click=&#x27;ccc&#x27;&gt;确定&lt;/button&gt;</span></span><br><span class="hljs-string"><span class="javascript">                        &lt;child&gt;&lt;/child&gt;</span></span><br><span class="hljs-string"><span class="javascript">                        &lt;abar_child&gt;&lt;/abar_child&gt;</span></span><br><span class="hljs-string"><span class="javascript">                    &lt;/div&gt;`</span>,</span><br><span class="javascript">                <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span></span><br><span class="javascript">                &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">abarname</span>:<span class="hljs-string">&quot;abarname&quot;</span>&#125;</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">methods</span>: </span><br><span class="javascript">                &#123;</span><br><span class="javascript">                    <span class="hljs-function"><span class="hljs-title">ccc</span>(<span class="hljs-params"></span>)</span></span><br><span class="javascript">                    &#123;</span><br><span class="javascript">                        alert(<span class="hljs-string">&#x27;abar 事件&#x27;</span>);</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                </span><br><span class="javascript">                <span class="hljs-attr">components</span>: <span class="hljs-comment">// abar私有的子组件，只能被abar使用</span></span><br><span class="javascript">                &#123;</span><br><span class="javascript">                    <span class="hljs-attr">abar_child</span>:</span><br><span class="javascript">                    &#123;</span><br><span class="javascript">                        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;【abar_child组件，只能在abar组件中使用】&lt;/div&gt;&#x27;</span></span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        );</span><br><span class="javascript"></span><br><span class="javascript">        Vue.component <span class="hljs-comment">// 公共儿子组件，与abar、bbar同级</span></span><br><span class="javascript">        (   </span><br><span class="javascript">            <span class="hljs-string">&#x27;child&#x27;</span>,</span><br><span class="javascript">            &#123;</span><br><span class="javascript">                <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;【公共child组件】&lt;/div&gt;&#x27;</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        );</span><br><span class="javascript"></span><br><span class="javascript">        Vue.component</span><br><span class="javascript">        (   </span><br><span class="javascript">            <span class="hljs-string">&#x27;bbar&#x27;</span>,</span><br><span class="javascript">            &#123;</span><br><span class="javascript">                <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="javascript">                        &lt;div&gt;</span></span><br><span class="hljs-string"><span class="javascript">                            【与abar的同级兄弟组件：bbar组件】</span></span><br><span class="hljs-string"><span class="javascript">                            &lt;child&gt;&lt;/child&gt;</span></span><br><span class="hljs-string"><span class="javascript">                        &lt;/div&gt;`</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        )</span><br><span class="javascript">        </span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue <span class="hljs-comment">// 这里new实例后，就自动创建root组件（根组件）</span></span><br><span class="javascript">        (</span><br><span class="javascript">            &#123;</span><br><span class="javascript">                <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>, </span><br><span class="javascript">            &#125;</span><br><span class="javascript">        )</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h2><ul><li><p>通过 <strong>props</strong> 进行通讯</p></li><li><p>props：接受父组件传进来的属性</p></li><li><p>父组件传参给子组件使用bind绑定</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">bbar</span> <span class="hljs-attr">thename</span>=<span class="hljs-string">&#x27;主页&#x27;</span> <span class="hljs-attr">:show</span>=<span class="hljs-string">&#x27;false&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bbar</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bbar</span> <span class="hljs-attr">thename</span>=<span class="hljs-string">&#x27;简介&#x27;</span> <span class="hljs-attr">:show</span>=<span class="hljs-string">&#x27;true&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bbar</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bbar</span> <span class="hljs-attr">thename</span>=<span class="hljs-string">&#x27;产品&#x27;</span> <span class="hljs-attr">:show</span>=<span class="hljs-string">&#x27;true&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bbar</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        ---------------------------<br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bbar</span> <span class="hljs-attr">:thename</span>=<span class="hljs-string">&#x27;p_name&#x27;</span> <span class="hljs-attr">:show</span>=<span class="hljs-string">&#x27;show&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bbar</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        Vue.component</span><br><span class="javascript">        (   </span><br><span class="javascript">            <span class="hljs-string">&#x27;bbar&#x27;</span>,</span><br><span class="javascript">            &#123;</span><br><span class="javascript">                <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="javascript">                        &lt;div&gt;</span></span><br><span class="hljs-string"><span class="javascript">                            &lt;button v-show=&#x27;show&#x27; @click=&#x27;c&#x27;&gt;首页&lt;/button&gt;</span></span><br><span class="hljs-string"><span class="javascript">                            【root的child组件：bbar组件】【&#123;&#123; thename &#125;&#125;】</span></span><br><span class="hljs-string"><span class="javascript">                        &lt;/div&gt;`</span>,</span><br><span class="javascript">                <span class="hljs-comment">// props: [&#x27;thename&#x27;,&#x27;show&#x27;]  // 接受父组件传进来的属性</span></span><br><span class="javascript">                <span class="hljs-attr">props</span>: <span class="hljs-comment">// 接受父组件传进来的属性</span></span><br><span class="javascript">                &#123;</span><br><span class="javascript">                    <span class="hljs-attr">thename</span>:<span class="hljs-built_in">String</span>, <span class="hljs-comment">// 写成对象形式可以进行类型检查</span></span><br><span class="javascript">                    <span class="hljs-attr">show</span>:<span class="hljs-built_in">Boolean</span>,</span><br><span class="javascript">                    <span class="hljs-comment">// show:String, // 这样会有问题</span></span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">                    <span class="hljs-function"><span class="hljs-title">c</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                        alert(<span class="hljs-string">&#x27;首页&#x27;</span>);</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        )</span><br><span class="javascript">        </span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue <span class="hljs-comment">// 这里new实例后，就自动创建root组件（根组件）</span></span><br><span class="javascript">        (</span><br><span class="javascript">            &#123;</span><br><span class="javascript">                <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">data</span>:</span><br><span class="javascript">                &#123;</span><br><span class="javascript">                    <span class="hljs-comment">// 即父组件传参给子组件使用bind绑定</span></span><br><span class="javascript">                    <span class="hljs-attr">p_name</span>: <span class="hljs-string">&#x27;root组件的p_name属性&#x27;</span>,</span><br><span class="javascript">                    <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span></span><br><span class="javascript">                    <span class="hljs-comment">// show: false</span></span><br><span class="javascript">                &#125; ,</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        )</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h2><p>使用 <strong>this.$emit</strong> 进行子传父</p><p>注意几个传递接口的 <strong>$</strong></p><p>实例：bbar 组件传给 root 组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">bbar</span> @<span class="hljs-attr">b_event</span>=<span class="hljs-string">&#x27;receive($event)&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bbar</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        &#123;&#123; show &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        Vue.component</span><br><span class="javascript">        (   </span><br><span class="javascript">            <span class="hljs-string">&#x27;bbar&#x27;</span>,</span><br><span class="javascript">            &#123;</span><br><span class="javascript">                <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="javascript">                        &lt;div&gt;</span></span><br><span class="hljs-string"><span class="javascript">                            【root的child组件：bbar组件】</span></span><br><span class="hljs-string"><span class="javascript">                            &lt;button @click=&#x27;sendd()&#x27;&gt;点这发送给父组件&lt;/button&gt;</span></span><br><span class="hljs-string"><span class="javascript">                        &lt;/div&gt;`</span>,</span><br><span class="javascript">                <span class="hljs-attr">methods</span>: </span><br><span class="javascript">                &#123;</span><br><span class="javascript">                    <span class="hljs-function"><span class="hljs-title">sendd</span>(<span class="hljs-params"></span>)</span></span><br><span class="javascript">                    &#123;</span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;b_event&#x27;</span>,<span class="hljs-string">&#x27;666&#x27;</span>) <span class="hljs-comment">// 将&#x27;666&#x27;传给 b_event</span></span><br><span class="javascript">                        <span class="hljs-comment">// this.$emit(&#x27;b_event&#x27;,this.xxxxx) </span></span><br><span class="javascript">                        <span class="hljs-comment">// // 这里也可以传data的属性</span></span><br><span class="javascript">                    &#125;  </span><br><span class="javascript">                &#125;,</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        )</span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue <span class="hljs-comment">// 这里new实例后，就自动创建root组件（根组件）</span></span><br><span class="javascript">        (</span><br><span class="javascript">            &#123;</span><br><span class="javascript">                <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">data</span>:</span><br><span class="javascript">                &#123;</span><br><span class="javascript">                    <span class="hljs-attr">p_name</span>:<span class="hljs-string">&#x27;root组件的p_name属性（使用bind绑定）&#x27;</span>,</span><br><span class="javascript">                    <span class="hljs-attr">show</span>: []</span><br><span class="javascript">                &#125; ,</span><br><span class="javascript">                <span class="hljs-attr">methods</span>: </span><br><span class="javascript">                &#123;</span><br><span class="javascript">                    <span class="hljs-function"><span class="hljs-title">receive</span>(<span class="hljs-params">e</span>)</span>&#123;<span class="hljs-built_in">this</span>.show.push(<span class="hljs-string">`【父组件收到消息：<span class="hljs-subst">$&#123;e&#125;</span>】`</span>)&#125;   </span><br><span class="javascript">                &#125;,</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        )</span><br><span class="javascript">        <span class="hljs-comment">// 举例说明子传父的应用</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="ref-注册引用信息"><a href="#ref-注册引用信息" class="headerlink" title="ref 注册引用信息"></a>ref 注册引用信息</h2><ul><li><p><strong>ref 放标签上，拿到原生节点（元素）</strong></p></li><li><p><strong>ref 放组件上，拿到组件对象</strong></p></li><li><p>通过 <strong>$refs</strong> 进行访问</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#x27;input_ref&#x27;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;click_a&#x27;</span>&gt;</span>点这<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bbar</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#x27;bbar_ref&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bbar</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        Vue.component</span><br><span class="javascript">        (   </span><br><span class="javascript">            <span class="hljs-string">&#x27;bbar&#x27;</span>,</span><br><span class="javascript">            &#123;</span><br><span class="javascript">                <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="javascript">                        &lt;div&gt;</span></span><br><span class="hljs-string"><span class="javascript">                            【root的child组件：bbar组件】</span></span><br><span class="hljs-string"><span class="javascript">                        &lt;/div&gt;`</span>,</span><br><span class="javascript">                <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">bbar_name</span>:<span class="hljs-string">&#x27;我叫bbar&#x27;</span>&#125;</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">methods</span>: </span><br><span class="javascript">                &#123;</span><br><span class="javascript">                    <span class="hljs-function"><span class="hljs-title">f</span>(<span class="hljs-params">data</span>)</span>&#123;</span><br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这是bbar的方法&#x27;</span>,data);</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    </span><br><span class="javascript">                &#125;,</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        )</span><br><span class="javascript">        </span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue <span class="hljs-comment">// 这里new实例后，就自动创建root组件（根组件）</span></span><br><span class="javascript">        (</span><br><span class="javascript">            &#123;</span><br><span class="javascript">                <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">data</span>:</span><br><span class="javascript">                &#123;</span><br><span class="javascript">                   </span><br><span class="javascript">                &#125; ,</span><br><span class="javascript">                <span class="hljs-attr">methods</span>: </span><br><span class="javascript">                &#123;</span><br><span class="javascript">                    <span class="hljs-function"><span class="hljs-title">click_a</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$refs.input_ref.value); <span class="hljs-comment">// 通过 $refs 进行访问</span></span><br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$refs.bbar_ref.bbar_name); <span class="hljs-comment">//访问数据</span></span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.$refs.bbar_ref.f(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">//调用方法</span></span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.$refs.bbar_ref.f(<span class="hljs-string">&#x27;父传子消息&#x27;</span>);</span><br><span class="javascript">                        <span class="hljs-comment">// ref放标签上，拿到原生节点（元素）</span></span><br><span class="javascript">                        <span class="hljs-comment">// ref放组件上，拿到组件对象</span></span><br><span class="javascript">                    &#125;  </span><br><span class="javascript">                &#125;,</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        )</span><br><span class="javascript">        <span class="hljs-comment">// 举例说明子传父的应用</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h2><p>使用 <strong>$emit</strong> 进行发送，**$on** 进行监听</p><p><strong>空 Vue 实例</strong>，默认为<strong>中央事件总线</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这是View  现在就是templet模板--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注意：未来学习的状态管理（vuex）可完成本节内容 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">bbar</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bbar</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">cbar</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cbar</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        Vue.component</span><br><span class="javascript">        (   </span><br><span class="javascript">            <span class="hljs-string">&#x27;bbar&#x27;</span>,</span><br><span class="javascript">            &#123;</span><br><span class="javascript">                <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="javascript">                        &lt;div&gt;</span></span><br><span class="hljs-string"><span class="javascript">                            【bbar组件 希望发送给cbar】</span></span><br><span class="hljs-string"><span class="javascript">                            &lt;input type=&quot;text&quot; ref=&#x27;b_text&#x27; /&gt;</span></span><br><span class="hljs-string"><span class="javascript">                            &lt;button @click=&#x27;send()&#x27;&gt;点这发送cbar&lt;/button&gt;</span></span><br><span class="hljs-string"><span class="javascript">                        &lt;/div&gt;`</span>,</span><br><span class="javascript">                <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">                    <span class="hljs-function"><span class="hljs-title">send</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                        bus.$emit(<span class="hljs-string">&#x27;c_message&#x27;</span>,<span class="hljs-built_in">this</span>.$refs.b_text.value)</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        );</span><br><span class="javascript">        Vue.component</span><br><span class="javascript">        (   </span><br><span class="javascript">            <span class="hljs-string">&#x27;cbar&#x27;</span>, <span class="hljs-comment">// 这个负责监听</span></span><br><span class="javascript">            &#123;</span><br><span class="javascript">                <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="javascript">                        &lt;div&gt;</span></span><br><span class="hljs-string"><span class="javascript">                            【我是cbar】</span></span><br><span class="hljs-string"><span class="javascript">                        &lt;/div&gt;`</span>,</span><br><span class="javascript">                mounted() <span class="hljs-comment">// 当前组件DOM创建后的钩子函数mounted，系统自动调用</span></span><br><span class="javascript">                &#123;</span><br><span class="javascript">                    bus.$on(<span class="hljs-string">&#x27;c_message&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;已收到bbar的消息&#x27;</span>,data);&#125;);<span class="hljs-comment">//通过回调函数进行监听</span></span><br><span class="javascript">                &#125;,            </span><br><span class="javascript">            &#125;</span><br><span class="javascript">        );</span><br><span class="javascript">        <span class="hljs-keyword">var</span> bus = <span class="hljs-keyword">new</span> Vue(); <span class="hljs-comment">// 空Vue实例，即中央事件总线</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue <span class="hljs-comment">// 这里new实例后，就自动创建root组件（根组件）</span></span><br><span class="javascript">        (</span><br><span class="javascript">            &#123;</span><br><span class="javascript">                <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">data</span>:&#123;&#125; ,</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        )</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p>动态组件就是<strong>几个组件放在一个挂载点</strong>下，然后根据父组件的某个变量来实现<strong>组件的动态切换</strong>。</p><p>固定用法：<code>&lt;component :is=&quot;xxx&quot;&gt;&lt;/component&gt;</code> ( <strong>common</strong> 和 <strong>is</strong> 都是官方定义 )</p><p>使用 <strong>keep-alive</strong> 包裹可以<strong>保持切换之前的各种状态</strong>（切换组件是直接<strong>删掉和创建</strong>）</p><p>样例中，由于 components 的父组件是 root，所以绑定的 who 就是 root 的 data 里的 who</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;who&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span> <br>            <span class="hljs-comment">&lt;!-- 注意这里的切换组件，是直接删掉和创建 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 如果需要保持home组件的input状态，需要keep-alive包裹 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;who=&#x27;home&#x27;&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <span class="hljs-comment">&lt;!-- 一行代码就不用methods实现了 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;who=&#x27;news&#x27;&quot;</span>&gt;</span>新闻<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;who=&#x27;blog&#x27;&quot;</span>&gt;</span>博客<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue <span class="hljs-comment">// 这里new实例后，就自动创建root组件（根组件）</span></span><br><span class="javascript">        (</span><br><span class="javascript">            &#123;</span><br><span class="javascript">                <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>, </span><br><span class="javascript">                <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                    <span class="hljs-attr">who</span>:<span class="hljs-string">&#x27;home&#x27;</span></span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">components</span>:&#123;</span><br><span class="javascript">                    <span class="hljs-string">&quot;home&quot;</span>:&#123;</span><br><span class="javascript">                        <span class="hljs-attr">template</span>:</span><br><span class="javascript">                        <span class="hljs-string">`&lt;div&gt;</span></span><br><span class="hljs-string"><span class="javascript">                            home</span></span><br><span class="hljs-string"><span class="javascript">                            &lt;input type=&quot;text&quot;&gt;</span></span><br><span class="hljs-string"><span class="javascript">                        &lt;/div&gt;`</span></span><br><span class="javascript">                    &#125;,</span><br><span class="javascript">                    <span class="hljs-string">&quot;news&quot;</span>:&#123;</span><br><span class="javascript">                        <span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;div&gt;news&lt;/div&gt;`</span></span><br><span class="javascript">                    &#125;,</span><br><span class="javascript">                    <span class="hljs-string">&quot;blog&quot;</span>:&#123;</span><br><span class="javascript">                        <span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;div&gt;blog&lt;/div&gt;`</span></span><br><span class="javascript">                    &#125;,</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        )</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue基础</title>
    <link href="/2021/11/07/Vue.js/Vue%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/11/07/Vue.js/Vue%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>可以根据网页模板 + F12 查看 Elements 中的 HTML 源码分析模板中各个组件的布局情况，从而更好的进行前端页面开发。</p><h2 id="一、Vue简介"><a href="#一、Vue简介" class="headerlink" title="一、Vue简介"></a>一、Vue简介</h2><ul><li>javascript框架</li><li>简化Dom操作</li><li>响应式数据驱动</li><li>参考文档：<a href="https://cn.vuejs.org/v2/guide/">https://cn.vuejs.org/v2/guide/</a></li><li>参考教程：<a href="https://space.bilibili.com/396891097/channel/detail?cid=129772&amp;ctype=0">https://space.bilibili.com/396891097/channel/detail?cid=129772&amp;ctype=0</a></li></ul><br><h2 id="二、第一个简易的Vue程序"><a href="#二、第一个简易的Vue程序" class="headerlink" title="二、第一个简易的Vue程序"></a>二、第一个简易的Vue程序</h2><p>步骤：</p><p>（1）导入开发版本的Vue.js；</p><p>（2）创建Vue实例对象，设置el属性和data属性；</p><p>（3）使用简洁的模板语法把数据渲染到页面上</p><p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统。</p><br><h2 id="三、el挂载点"><a href="#三、el挂载点" class="headerlink" title="三、el挂载点"></a>三、el挂载点</h2><ul><li><p>el → 设置Vue实例 挂载/管理 的元素</p></li><li><p>Vue实例的作用范围：Vue会管理el选项<strong>命中的元素</strong>及其**<u>内部的后代元素</u>**</p></li><li><p>可以使用其他的选择器，但是<strong>建议使用ID选择器</strong>（ID唯一，避免语义不清晰）</p></li><li><p>可以使用其他的<strong>双标签</strong>（如p、h标签等），但是<strong>不能使用HTML和BODY</strong></p></li></ul><p>eg：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>el挂载点<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    &#123;&#123;message&#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;message&#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,<span class="hljs-comment">//ID选择器</span></span><br><span class="javascript">            <span class="hljs-comment">// el:&quot;.app&quot;,</span></span><br><span class="javascript">            <span class="hljs-comment">// el:&quot;div&quot;,</span></span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;篮网总冠军！&quot;</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="四、data数据对象"><a href="#四、data数据对象" class="headerlink" title="四、data数据对象"></a>四、data数据对象</h2><p>1.Vue中用到的数据定义在<strong>data</strong>中</p><p>2.data中可以定义<strong>复杂类型</strong>的数据</p><p>3.<strong>方法内部</strong>通过 <strong>this</strong> 关键字可以<strong>访问定义在 data 中的数据</strong></p><p>（<strong>methods</strong>中定义的<strong>方法内部</strong>，可以通过<strong>this关键字点出其他的方法</strong>）</p><p>4.渲染复杂类型数据时，遵循js的语法即可(如对象的 . 语法；数组的索引语法)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>data数据对象<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;player.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123;player.name&#125;&#125;  &#123;&#123;player.final&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;num[0]&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;num[1]&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>长大了一岁<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">  </span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;篮网总冠军&quot;</span>,</span><br><span class="javascript">                <span class="hljs-attr">player</span>:&#123;</span><br><span class="javascript">                    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;kd&quot;</span>,</span><br><span class="javascript">                    <span class="hljs-attr">final</span>:<span class="hljs-string">&quot;MVP&quot;</span>,</span><br><span class="javascript">                    <span class="hljs-attr">age</span>:<span class="hljs-number">18</span></span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">num</span>:[<span class="hljs-string">&quot;one&quot;</span>,<span class="hljs-string">&quot;two&quot;</span>,<span class="hljs-string">&quot;three&quot;</span>,<span class="hljs-string">&quot;four&quot;</span>]</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">add</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.player.age+=<span class="hljs-number">1</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="五、函数的-return-应用"><a href="#五、函数的-return-应用" class="headerlink" title="五、函数的 return 应用"></a>五、函数的 return 应用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue函数的 return 应用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>原始字符串: &#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>使用方法后反转字符串: &#123;&#123; reversedMessage2() &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;123456789&#x27;</span></span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">reversedMessage2</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.message.split(<span class="hljs-string">&#x27;&#x27;</span>).reverse().join(<span class="hljs-string">&#x27;&#x27;</span>)</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="六、过滤器"><a href="#六、过滤器" class="headerlink" title="六、过滤器"></a>六、过滤器</h2><p>Vue.js 允许你自定义过滤器，被用作一些常见的<strong>文本格式化</strong>。</p><p>过滤器函数接受表达式的值作为第一个参数。</p><p>以下实例对输入的字符串第一个字母转为大写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue过滤器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123; message | capitalize &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;abcdef&#x27;</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">filters</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">capitalize</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (!value) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">                    value = value.toString()</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> value.charAt(<span class="hljs-number">0</span>).toUpperCase() + value.slice(<span class="hljs-number">1</span>)</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以利用<strong>函数 methods</strong> 实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue过滤器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123; capitalize() &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;abcdef&#x27;</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">capitalize</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    value = <span class="hljs-built_in">this</span>.message;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (!value) </span><br><span class="javascript">                        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript">                    value = value.toString();</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> value.charAt(<span class="hljs-number">0</span>).toUpperCase() + value.slice(<span class="hljs-number">1</span>);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue简单网络应用--axios</title>
    <link href="/2021/11/07/Vue.js/Vue%E7%AE%80%E5%8D%95%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8--axios/"/>
    <url>/2021/11/07/Vue.js/Vue%E7%AE%80%E5%8D%95%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8--axios/</url>
    
    <content type="html"><![CDATA[<h2 id="axios基本使用"><a href="#axios基本使用" class="headerlink" title="axios基本使用"></a>axios基本使用</h2><ul><li>axios：功能强大的网络请求库（AJAX）</li><li>axios 必须先导入才可以使用</li><li>使用 get 或 post 方法即可发送对应的请求</li><li><strong>then 方法中的回调函数会在请求成功或失败时触发</strong></li><li>通过回调函数的形参可以获取<strong>响应内容</strong>或<strong>错误信息</strong></li></ul><p>axios请求模板：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.get(地址?key=value&amp;key2=values).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;&#125;)<br>axios.post(地址,&#123;<span class="hljs-attr">key</span>:value&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;&#125;)<br></code></pre></td></tr></table></figure><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;axios:get请求&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;axios:post请求&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.21.1/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="javascript">            测试接口1:随机笑话</span></span><br><span class="hljs-comment"><span class="javascript">            请求地址:https://autumnfish.cn/api/joke/list</span></span><br><span class="hljs-comment"><span class="javascript">            请求方法:get</span></span><br><span class="hljs-comment"><span class="javascript">            请求参数:num(笑话条数,数字)</span></span><br><span class="hljs-comment"><span class="javascript">            响应内容:随机笑话</span></span><br><span class="hljs-comment"><span class="javascript">        */</span></span><br><span class="javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.get&quot;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            axios.get(<span class="hljs-string">&quot;https://autumnfish.cn/api/joke/list?num=4&quot;</span>)</span><br><span class="javascript">            .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(response);</span><br><span class="javascript">              &#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;</span><br><span class="javascript">                  <span class="hljs-built_in">console</span>.log(err);</span><br><span class="javascript">              &#125;)</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="javascript">             测试接口2:用户注册</span></span><br><span class="hljs-comment"><span class="javascript">             请求地址:https://autumnfish.cn/api/user/reg</span></span><br><span class="hljs-comment"><span class="javascript">             请求方法:post</span></span><br><span class="hljs-comment"><span class="javascript">             请求参数:username(用户名,字符串)</span></span><br><span class="hljs-comment"><span class="javascript">             响应内容:注册成功或失败</span></span><br><span class="hljs-comment"><span class="javascript">         */</span></span><br><span class="javascript">         <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.post&quot;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            axios.post(<span class="hljs-string">&quot;https://autumnfish.cn/api/user/reg&quot;</span>,&#123;<span class="hljs-attr">username</span>:<span class="hljs-string">&quot;asgdyufgq&quot;</span>&#125;)</span><br><span class="javascript">            .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(response);</span><br><span class="javascript">            &#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(err);</span><br><span class="javascript">            &#125;)</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="axios与Vue结合使用"><a href="#axios与Vue结合使用" class="headerlink" title="axios与Vue结合使用"></a>axios与Vue结合使用</h2><ul><li><p>axios 回调函数中的 this 已经改变，无法访问到 data 中数据</p></li><li><p><strong>把 this 保存起来，回调函数中直接使用保存的 this 即可</strong></p></li><li><p>和本地应用的最大区别就是改变了数据来源</p></li></ul><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue结合axios<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取笑话&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;getJoke&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;joke&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="javascript">            测试接口:随机获取一条笑话</span></span><br><span class="hljs-comment"><span class="javascript">            请求地址:https://autumnfish.cn/api/joke</span></span><br><span class="hljs-comment"><span class="javascript">            请求方法:get</span></span><br><span class="hljs-comment"><span class="javascript">            请求参数:无</span></span><br><span class="hljs-comment"><span class="javascript">            响应内容:随机笑话</span></span><br><span class="hljs-comment"><span class="javascript">        */</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">joke</span>:<span class="hljs-string">&quot;笑话真好笑hhh&quot;</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">getJoke</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> that = <span class="hljs-built_in">this</span>; <span class="hljs-comment">// 保存this避免无法访问</span></span><br><span class="javascript">                    axios.get(<span class="hljs-string">&quot;https://autumnfish.cn/api/joke&quot;</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;</span><br><span class="javascript">                        that.joke = response.data</span><br><span class="javascript">                    &#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;&#125;)</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="网络应用实例"><a href="#网络应用实例" class="headerlink" title="网络应用实例"></a>网络应用实例</h2><p>应用的逻辑代码建议和页面分离，使用单独的js文件编写</p><p>HTML页面部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>天知道<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/reset.css&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/index.css&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search_form&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;logo&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/logo.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;logo&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form_group&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input_txt&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入查询的天气&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;city&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;getWeather&quot;</span>/&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input_sub&quot;</span>&gt;</span><br>            搜 索<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hotkey&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;queryWeather(&#x27;北京&#x27;)&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;queryWeather(&#x27;上海&#x27;)&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;queryWeather(&#x27;广州&#x27;)&quot;</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;queryWeather(&#x27;深圳&#x27;)&quot;</span>&gt;</span>深圳<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;weather_list&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in weatherList&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info_type&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont&quot;</span>&gt;</span>&#123;&#123;item.type&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info_temp&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>&#123;&#123;item.low&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>            ~<br>            <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>&#123;&#123;item.high&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info_date&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;item.date&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 官网提供的 axios 在线地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 自己的js --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>JS代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">city</span>:<span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-attr">weatherList</span>:[]<br>    &#125;,<br>    <span class="hljs-attr">methods</span>:&#123;<br>        <span class="hljs-attr">getWeather</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">var</span> that = <span class="hljs-built_in">this</span>;<br>            axios.get(<span class="hljs-string">&quot;http://wthrcdn.etouch.cn/weather_mini?city=&quot;</span>+<span class="hljs-built_in">this</span>.city)<br>            .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;<br>                that.weatherList = response.data.data.forecast;<br>            &#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;&#125;)<br>        &#125;,<br>        <span class="hljs-attr">queryWeather</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">city</span>)</span>&#123;<br>            <span class="hljs-built_in">this</span>.city = city;<br>            <span class="hljs-built_in">this</span>.getWeather();<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><br>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue简单本地应用--记事本</title>
    <link href="/2021/11/07/Vue.js/Vue%E7%AE%80%E5%8D%95%E6%9C%AC%E5%9C%B0%E5%BA%94%E7%94%A8--%E8%AE%B0%E4%BA%8B%E6%9C%AC/"/>
    <url>/2021/11/07/Vue.js/Vue%E7%AE%80%E5%8D%95%E6%9C%AC%E5%9C%B0%E5%BA%94%E7%94%A8--%E8%AE%B0%E4%BA%8B%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>可以根据网页模板 + F12 查看 Elements 中的 HTML 源码分析模板中各个组件的布局情况，从而更好的进行前端页面开发。</p><p><strong>Summarize</strong></p><ul><li><p>列表结构可以通过 v-for 指令结合数据生成</p></li><li><p>v-on 结合事件修饰符可以对事件进行限制,比如 .enter</p></li><li><p>v-on 在绑定事件时可以传递自定义参数</p></li><li><p>通过 v-model 可以快速的设置和获取表单元素的值</p></li><li><p>基于数据的开发方式</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Mini记事本<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;robots&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;noindex, nofollow&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;googlebot&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;noindex, nofollow&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 主体区域 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;todoapp&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 输入框 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Mini记事本<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">autofocus</span>=<span class="hljs-string">&quot;autofocus&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入任务&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;new-todo&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;addValue&quot;</span></span><br><span class="hljs-tag">                @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;add()&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 列表区域 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-list&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in list&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;view&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>&#123;&#123;index+1&#125;&#125;.<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;destroy&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;remove(index)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 统计和清空 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-count&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;list.length!=0&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;&#123;list.length&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> items left <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clear-completed&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;clear&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;list.length!=0&quot;</span>&gt;</span><br>                Clear<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#todoapp&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">list</span>: [<span class="hljs-string">&quot;吃饭&quot;</span>, <span class="hljs-string">&quot;睡觉&quot;</span>, <span class="hljs-string">&quot;学习&quot;</span>],</span><br><span class="javascript">                <span class="hljs-attr">addValue</span>: <span class="hljs-string">&quot;打篮球&quot;</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">add</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.list.push(<span class="hljs-built_in">this</span>.addValue)</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">remove</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.list.splice(index, <span class="hljs-number">1</span>)<span class="hljs-comment">// 根据索引删除对应元素</span></span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">clear</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.list = []</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DP-1218. 最长定差子序列</title>
    <link href="/2021/11/05/LeetCode/1218.%20%E6%9C%80%E9%95%BF%E5%AE%9A%E5%B7%AE%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <url>/2021/11/05/LeetCode/1218.%20%E6%9C%80%E9%95%BF%E5%AE%9A%E5%B7%AE%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference/">https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference/</a></p><p>题意：给你一个整数数组 arr 和一个整数 difference，请你找出并返回 arr 中最长等差子序列的长度，该子序列中相邻元素之间的差等于 difference 。</p><p>子序列 是指在不改变其余元素顺序的情况下，通过删除一些元素或不删除任何元素而从 arr 派生出来的序列</p><p>样例：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：arr = [<span class="hljs-number">1,5,7,8</span>,<span class="hljs-number">5,3,4,2</span>,<span class="hljs-number">1</span>], difference = -<span class="hljs-number">2</span><br>输出：<span class="hljs-number">4</span><br>解释：最长的等差子序列是 [<span class="hljs-number">7,5,3,1</span>]。<br></code></pre></td></tr></table></figure><p>用 dp[v] 表示以 v 为结尾的最长的等差子序列的长度，这样 dp[v−d] 就是我们要找的左侧元素对应的最长的等差子序列的长度</p><p>转移方程可以改为</p><p><code>dp[v] = dp[v - d] + 1;</code></p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">longestSubsequence</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;arr, <span class="hljs-keyword">int</span> difference)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; dp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-built_in">size</span>();i++) <br>    &#123;<br>    <span class="hljs-keyword">int</span> v=arr[i];<br>    dp[v] = dp[v - difference] + <span class="hljs-number">1</span>;<br>    ans = <span class="hljs-built_in">max</span>(ans, dp[v]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue Router</title>
    <link href="/2021/10/31/Vue.js/Vue_Router/"/>
    <url>/2021/10/31/Vue.js/Vue_Router/</url>
    
    <content type="html"><![CDATA[<h2 id="Vue-Router-项目应用实例："><a href="#Vue-Router-项目应用实例：" class="headerlink" title="Vue Router 项目应用实例："></a>Vue Router 项目应用实例：</h2><p><strong>源码地址</strong>：<a href="https://github.com/oinsd/Vue.js-Learning-Example">https://github.com/oinsd/Vue.js-Learning-Example</a></p><h3 id="实例①-NO-27-29-项目安装与使用-Cli脚手架项目路由"><a href="#实例①-NO-27-29-项目安装与使用-Cli脚手架项目路由" class="headerlink" title="实例① NO.27-29 项目安装与使用 + Cli脚手架项目路由"></a>实例① NO.27-29 项目安装与使用 + Cli脚手架项目路由</h3><ul><li><p>view 文件夹下存放单页面应用</p></li><li><p>components 文件夹下存放共用性组件</p></li><li><p>router.js 里定义路由之后要进行 export 导出 <code>export default router</code></p></li></ul><p>注：路由对应的<strong>组件最终渲染的位置：<code>&lt;router-view&gt;&lt;/router-view&gt;</code></strong></p><p>eg：下述样例中，进入指定路由显示组件后，<u>h1标签的内容（666）仍会显示</u></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;App&quot;&gt;<br>    &lt;h1&gt;666&lt;/h1&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p><strong>路由跳转的实现：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">this.$router.push(&quot;/elm_index&quot;)<br></code></pre></td></tr></table></figure><p><u>寻找 router.js 里的匹配项并进行主动跳转</u></p><br><p>可以通过 <code>this.$route</code> 访问当前路由</p><p>如：<strong>退回</strong>上一个路由</p><p><code>window.history.length &gt; 1 ? this.$router.go(-1) : this.$router.push(&#39;/&#39;)</code></p><br><h3 id="实例②-NO-30-32-编程式导航-动态路由-嵌套路由-路由重定向"><a href="#实例②-NO-30-32-编程式导航-动态路由-嵌套路由-路由重定向" class="headerlink" title="实例② NO.30-32 编程式导航 + 动态路由 + 嵌套路由 + 路由重定向"></a>实例② NO.30-32 编程式导航 + 动态路由 + 嵌套路由 + 路由重定向</h3><h4 id="动态路由匹配："><a href="#动态路由匹配：" class="headerlink" title="动态路由匹配："></a>动态路由匹配：</h4><p>我们经常需要把某种模式匹配到的所有路由，全都映射到同一个组件。例如，我们有一个 <code>User</code> 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 <code>vue-router</code> 的路由路径中使用 <strong>动态路径参数</strong> 来达到这个效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> User = &#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;User&lt;/div&gt;&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    <span class="hljs-comment">// 动态路径参数 以冒号开头</span><br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:id&#x27;</span>, <span class="hljs-attr">component</span>: User &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><p><u>此时，形如 <code>/user/foo</code> 和 <code>/user/bar</code> 都将映射到相同的路由，都使用 <code>User</code> 组件进行渲染。</u></p><ul><li>通过 <code>$route.params.id</code> 能获取 path 参数</li><li>最理想的路由监听方法：<strong>watch</strong> —— 可对路由变化作出响应</li></ul><p>详情见：<a href="https://router.vuejs.org/zh/guide/essentials/dynamic-matching.html">https://router.vuejs.org/zh/guide/essentials/dynamic-matching.html</a></p><h4 id="编程式导航："><a href="#编程式导航：" class="headerlink" title="编程式导航："></a>编程式导航：</h4><p><code>this.$router.push(&quot;/elm_index&quot;)</code> —— 路由跳转</p><p>寻找 router.js 里的匹配项并进行主动跳转</p><p>详情见：<a href="https://router.vuejs.org/zh/guide/essentials/navigation.html">https://router.vuejs.org/zh/guide/essentials/navigation.html</a></p><h4 id="嵌套路由："><a href="#嵌套路由：" class="headerlink" title="嵌套路由："></a>嵌套路由：</h4><p>嵌套路由就是在一个被路由过来的页面下可以继续使用路由，嵌套也就是路由中的路由的意思。</p><p>使用方法见文档：<a href="https://router.vuejs.org/zh/guide/essentials/nested-routes.html">https://router.vuejs.org/zh/guide/essentials/nested-routes.html</a></p><h4 id="路由重定向："><a href="#路由重定向：" class="headerlink" title="路由重定向："></a>路由重定向：</h4><p>输入未知路由，自动匹配进行路由跳转</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//router.js的new Router()的routes:[]内</span><br>&#123;<br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>,<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;any&#x27;</span>,  <span class="hljs-comment">// 名字在“命名路由”中使用，但是不介绍</span><br><span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/iview_login&#x27;</span> <span class="hljs-comment">//路由重定向到/iview_login位置</span><br>&#125;,<br></code></pre></td></tr></table></figure><br><h3 id="实例③-NO-33-36-参数传递-路由导航守卫-获取数据"><a href="#实例③-NO-33-36-参数传递-路由导航守卫-获取数据" class="headerlink" title="实例③ NO.33-36 参数传递 + 路由导航守卫 + 获取数据"></a>实例③ NO.33-36 参数传递 + 路由导航守卫 + 获取数据</h3><h4 id="参数传递："><a href="#参数传递：" class="headerlink" title="参数传递："></a>参数传递：</h4><ul><li>方式1：$route.params.xx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//router.js:</span><br>&#123; <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/contentBar/:id&#x27;</span>, <br><span class="hljs-attr">component</span>: contentBar,<br>&#125;,<br><br><span class="hljs-comment">//contentBar.vue组件内——显示url里的id内容</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123; $route.params.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>方式2：通过 props 进行传递</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//router.js:</span><br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/iview_router/:name&#x27;</span>,<br><span class="hljs-attr">component</span>:Iview_router_1,<br><span class="hljs-attr">props</span>:&#123;<span class="hljs-attr">news</span>:<span class="hljs-string">&#x27;NEWS&#x27;</span>&#125;,<br>&#125;,<br><br><span class="hljs-comment">//Iview_router_1.vue 的 export default 内</span><br><span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;news&#x27;</span>],<br></code></pre></td></tr></table></figure><br><h4 id="路由导航守卫："><a href="#路由导航守卫：" class="headerlink" title="路由导航守卫："></a>路由导航守卫：</h4><p>官方文档：<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html">https://router.vuejs.org/zh/guide/advanced/navigation-guards.html</a></p><p>导航：表示路由正在发生改变。</p><p><code>vue-router</code> 提供的导航守卫主要用来通过<u>跳转或取消</u>的方式守卫导航。</p><p>有多种机会植入路由导航过程中：全局的, 单个路由独享的, 或者组件级的。</p><ul><li><strong>全局前置守卫</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123; ... &#125;)<br><br>router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (to.name !== <span class="hljs-string">&#x27;Login&#x27;</span> &amp;&amp; !isAuthenticated) next(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Login&#x27;</span> &#125;)<br>  <span class="hljs-keyword">else</span> next()<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><p><strong>全局解析守卫</strong></p></li><li><p><strong>路由独享的守卫</strong></p></li><li><p><strong>组件内的守卫</strong></p></li><li><p><em>完整的导航解析流程</em>*:</p></li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">1</span>.导航被触发。<br><span class="hljs-number">2</span>.在失活的组件里调用 <span class="hljs-keyword">beforeRouteLeave </span>守卫。<br><span class="hljs-number">3</span>.调用全局的 <span class="hljs-keyword">beforeEach </span>守卫。<br><span class="hljs-number">4</span>.在重用的组件里调用 <span class="hljs-keyword">beforeRouteUpdate </span>守卫 (<span class="hljs-number">2</span>.<span class="hljs-number">2</span>+)。<br><span class="hljs-number">5</span>.在路由配置里调用 <span class="hljs-keyword">beforeEnter。</span><br><span class="hljs-keyword"></span><span class="hljs-number">6</span>.解析异步路由组件。<br><span class="hljs-number">7</span>.在被激活的组件里调用 <span class="hljs-keyword">beforeRouteEnter。</span><br><span class="hljs-keyword"></span><span class="hljs-number">8</span>.调用全局的 <span class="hljs-keyword">beforeResolve </span>守卫 (<span class="hljs-number">2</span>.<span class="hljs-number">5</span>+)。<br><span class="hljs-number">9</span>.导航被确认。<br><span class="hljs-number">10</span>.调用全局的 afterEach 钩子。<br><span class="hljs-number">11</span>.触发 DOM 更新。<br><span class="hljs-number">12</span>.调用 <span class="hljs-keyword">beforeRouteEnter </span>守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。<br></code></pre></td></tr></table></figure><br><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据:"></a>获取数据:</h4><p>官方文档：<a href="https://router.vuejs.org/zh/guide/advanced/data-fetching.html">https://router.vuejs.org/zh/guide/advanced/data-fetching.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>869.重新排序得到2的幂--打表+转换字符串比较</title>
    <link href="/2021/10/28/LeetCode/869.%20%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F%E5%BE%97%E5%88%B0%202%20%E7%9A%84%E5%B9%82/"/>
    <url>/2021/10/28/LeetCode/869.%20%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F%E5%BE%97%E5%88%B0%202%20%E7%9A%84%E5%B9%82/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/reordered-power-of-2/">https://leetcode-cn.com/problems/reordered-power-of-2/</a></p><p>题意：给定正整数 N ，我们按任何顺序（包括原始顺序）将数字重新排序，注意其前导数字不能为零。</p><p>如果我们可以通过上述方式得到 2 的幂，返回 true；否则，返回 false。</p><p>样例：(转换成64)</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">输入：<span class="hljs-number">46</span><br>输出：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="Solve"><a href="#Solve" class="headerlink" title="Solve:"></a>Solve:</h4><p>由于<code>1 &lt;= N &lt;= 10^9</code>，可以先<strong>打表</strong>全部计算出来，对于给出的数字判断转换成<strong>字符串排序</strong>之后是否是2幂次中的排序后的string字符串。</p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_table</span><span class="hljs-params">(<span class="hljs-keyword">int</span> table[])</span></span><br><span class="hljs-function"></span>&#123;<br>    table[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">30</span>; i++)<br>        table[i] = table[i - <span class="hljs-number">1</span>] * <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    string a = <span class="hljs-built_in">to_string</span>(n);<br>    string b = <span class="hljs-built_in">to_string</span>(t);<br>    <span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">sort</span>(b.<span class="hljs-built_in">begin</span>(), b.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> a == b;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">reorderedPowerOf2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> table[<span class="hljs-number">35</span>];<br>    <span class="hljs-built_in">print_table</span>(table);<br>    <span class="hljs-keyword">int</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">judge</span>(n, table[i]) == <span class="hljs-number">1</span>)<br>        &#123;<br>            f = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> f;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript与HTML-DOM</title>
    <link href="/2021/10/26/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/JavaScript%E4%B8%8EHTML-DOM/"/>
    <url>/2021/10/26/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/JavaScript%E4%B8%8EHTML-DOM/</url>
    
    <content type="html"><![CDATA[<h1 id="一、JavaScript-HTML-DOM概述"><a href="#一、JavaScript-HTML-DOM概述" class="headerlink" title="一、JavaScript HTML DOM概述"></a>一、JavaScript HTML DOM概述</h1><p>通过 HTML DOM， JavaScript可访问 HTML 文档的所有元素。</p><br><h3 id="HTML-DOM-文档对象模型"><a href="#HTML-DOM-文档对象模型" class="headerlink" title="HTML DOM (文档对象模型)"></a>HTML DOM (文档对象模型)</h3><p>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。</p><p><strong>HTML DOM</strong> 模型被构造为<strong>对象</strong>的树：</p><img src="/images/image-20211026180200651.png" alt="image-20211026180200651" style="zoom:33%;"><p>通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML。</p><ul><li><p>JavaScript 能够改变页面中的所有 HTML 元素</p></li><li><p>JavaScript 能够改变页面中的所有 HTML 属性</p></li><li><p>JavaScript 能够改变页面中的所有 CSS 样式</p></li><li><p>JavaScript 能够对页面中的所有事件做出反应</p><br></li></ul><h3 id="查找-HTML-元素"><a href="#查找-HTML-元素" class="headerlink" title="查找 HTML 元素"></a>查找 HTML 元素</h3><h4 id="（1）通过-id-查找-HTML-元素"><a href="#（1）通过-id-查找-HTML-元素" class="headerlink" title="（1）通过 id 查找 HTML 元素"></a>（1）通过 id 查找 HTML 元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">x=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;intro&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="（2）通过标签名查找-HTML-元素"><a href="#（2）通过标签名查找-HTML-元素" class="headerlink" title="（2）通过标签名查找 HTML 元素"></a>（2）通过标签名查找 HTML 元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> y=x.getElementsByTagName(<span class="hljs-string">&quot;p&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="（3）通过类名找到-HTML-元素"><a href="#（3）通过类名找到-HTML-元素" class="headerlink" title="（3）通过类名找到 HTML 元素"></a>（3）通过类名找到 HTML 元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x=<span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;intro&quot;</span>);<br></code></pre></td></tr></table></figure><p>注：getElementsByTagName 和 getElementsByClassName 这两个方法查找多个 dom 元素，返回的是 htmlcollection 类型，<strong>是伪数组而不是真数组</strong>，故不能使用数组的方法。 我们可以使用数组原型配合 slice 方法，利用 <strong>call，apply，bind 方法将伪数组转为真数组</strong>。</p><p>（见第7部分）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;main&quot;</span>);<br><span class="hljs-keyword">var</span> y=x.getElementsByTagName(<span class="hljs-string">&quot;p&quot;</span>);<br><span class="hljs-built_in">console</span>.log(y)<span class="hljs-comment">//在控制台我们可以看到原型proto为htmlcollection，是伪数组</span><br><br><span class="hljs-comment">//伪数组转为真数组方法1</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.prototype.slice.call(y))<span class="hljs-comment">//在控制台我们可以看到原型proto为Array(0)，是真数组</span><br><br><span class="hljs-comment">//伪数组转为真数组方法2</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.prototype.slice.apply(y))<span class="hljs-comment">//在控制台我们可以看到原型proto为Array(0)，是真数组</span><br><br><span class="hljs-comment">//伪数组转为真数组方法3</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.prototype.slice.bind(y)())<span class="hljs-comment">//在控制台我们可以看到原型proto为Array(0)，是真数组</span><br></code></pre></td></tr></table></figure><br><h2 id="二、JavaScript-HTML-DOM-改变-HTML"><a href="#二、JavaScript-HTML-DOM-改变-HTML" class="headerlink" title="二、JavaScript HTML DOM - 改变 HTML"></a>二、JavaScript HTML DOM - 改变 HTML</h2><h4 id="（1）改变-HTML-输出流"><a href="#（1）改变-HTML-输出流" class="headerlink" title="（1）改变 HTML 输出流"></a>（1）改变 HTML 输出流</h4><p><strong>document.write()</strong> 可用于直接向 HTML 输出流写内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-built_in">Date</span>());<br></code></pre></td></tr></table></figure><p>注：不要在文档(DOM)加载完成之后使用 document.write()，这会<strong>覆盖</strong>该文档。</p><h4 id="（2）改变-HTML-内容"><a href="#（2）改变-HTML-内容" class="headerlink" title="（2）改变 HTML 内容"></a>（2）改变 HTML 内容</h4><p>使用 <strong>innerHTML</strong> 属性进行修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;p1&quot;</span>).innerHTML=<span class="hljs-string">&quot;新文本!&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="（3）改变-HTML-属性"><a href="#（3）改变-HTML-属性" class="headerlink" title="（3）改变 HTML 属性"></a>（3）改变 HTML 属性</h4><p>语法：document.getElementById(<em>id</em>).<em>attribute=新属性值</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;image&quot;</span>).src=<span class="hljs-string">&quot;landscape.jpg&quot;</span>;<br><span class="hljs-comment">//改变了&lt;img&gt;元素的 src 属性</span><br></code></pre></td></tr></table></figure><br><h1 id="三、JavaScript-HTML-DOM-改变CSS"><a href="#三、JavaScript-HTML-DOM-改变CSS" class="headerlink" title="三、JavaScript HTML DOM - 改变CSS"></a>三、JavaScript HTML DOM - 改变CSS</h1><h4 id="（1）改变-HTML-样式"><a href="#（1）改变-HTML-样式" class="headerlink" title="（1）改变 HTML 样式"></a>（1）改变 HTML 样式</h4><p>语法：document.getElementById(<em>id</em>).style.<em>property</em>=<em>新样式</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;p2&quot;</span>).style.color=<span class="hljs-string">&quot;orange&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="（2）使用事件"><a href="#（2）使用事件" class="headerlink" title="（2）使用事件"></a>（2）使用事件</h4><p>HTML DOM 允许我们通过触发事件来执行代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button type=<span class="hljs-string">&quot;button&quot;</span> onclick=<span class="hljs-string">&quot;document.getElementById(&#x27;id1&#x27;).style.color=&#x27;red&#x27;&quot;</span>&gt;<br>点我!&lt;/button&gt;<br><span class="hljs-comment">//也可另写函数实现</span><br></code></pre></td></tr></table></figure><br><h1 id="四、JavaScript-HTML-DOM-事件"><a href="#四、JavaScript-HTML-DOM-事件" class="headerlink" title="四、JavaScript HTML DOM 事件"></a>四、JavaScript HTML DOM 事件</h1><p>HTML DOM 使 JavaScript 有能力对 HTML 事件做出反应。</p><p>HTML 事件的例子：</p><ul><li><p>当用户触发按键时——<code>&lt;h1 onclick=&quot;this.innerHTML=&#39;Ooops!&#39;&quot;&gt;点击文本!&lt;/h1&gt; </code></p></li><li><p>当网页已加载时——<code>&lt;body onload=&quot;checkCookies()&quot;&gt;</code></p></li><li><p>当鼠标移动到元素上时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div onmouseover=<span class="hljs-string">&quot;mOver(this)&quot;</span> onmouseout=<span class="hljs-string">&quot;mOut(this)&quot;</span>&gt;Mouse Over Me&lt;/div&gt;<br></code></pre></td></tr></table></figure></li><li><p>当输入字段被改变时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入你的名字: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fname&quot;</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;myFunction()&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>当你离开输入框后，函数将被触发，将小写字母转为大写字母。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>当提交 HTML 表单时</p></li><li><p>当用户点击鼠标时</p></li></ul><br><h1 id="五、JavaScript-HTML-DOM-EventListener"><a href="#五、JavaScript-HTML-DOM-EventListener" class="headerlink" title="五、JavaScript HTML DOM EventListener"></a>五、JavaScript HTML DOM EventListener</h1><h4 id="addEventListener-方法：向指定元素添加事件句柄"><a href="#addEventListener-方法：向指定元素添加事件句柄" class="headerlink" title="addEventListener()方法：向指定元素添加事件句柄"></a>addEventListener()方法：向指定元素添加事件句柄</h4><p><strong>语法:</strong></p><p><code>element.addEventListener(event, function, useCapture);</code></p><p>第一个参数是事件的类型 (如 “click” 或 “mousedown”).</p><p>第二个参数是事件触发后调用的函数。</p><p>第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的。</p><p>eg:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>该实例使用 addEventListener() 方法在按钮中添加点击事件。 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBtn&quot;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;myBtn&quot;</span>).addEventListener(<span class="hljs-string">&quot;click&quot;</span>, displayDate);</span></span><br><span class="javascript"><span class="xml"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">displayDate</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>).innerHTML = <span class="hljs-string">&quot;当前时间：&quot;</span> + <span class="hljs-built_in">Date</span>();</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="removeEventListener-方法：移除由-addEventListener-方法添加的事件句柄"><a href="#removeEventListener-方法：移除由-addEventListener-方法添加的事件句柄" class="headerlink" title="removeEventListener() 方法：移除由 addEventListener() 方法添加的事件句柄"></a>removeEventListener() 方法：移除由 addEventListener() 方法添加的事件句柄</h4><p>eg:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">element.removeEventListener(<span class="hljs-string">&quot;mousemove&quot;</span>, myFunction);<br></code></pre></td></tr></table></figure><br><h1 id="六、JavaScript-HTML-DOM-元素-节点"><a href="#六、JavaScript-HTML-DOM-元素-节点" class="headerlink" title="六、JavaScript HTML DOM 元素 (节点)"></a>六、JavaScript HTML DOM 元素 (节点)</h1><h3 id="创建新的-HTML-元素-节点"><a href="#创建新的-HTML-元素-节点" class="headerlink" title="创建新的 HTML 元素 (节点)"></a>创建新的 HTML 元素 (节点)</h3><h4 id="（1）appendChild-添加新元素到尾部"><a href="#（1）appendChild-添加新元素到尾部" class="headerlink" title="（1）appendChild() 添加新元素到尾部"></a>（1）appendChild() 添加新元素到尾部</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>111<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> para = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;p&quot;</span>);<span class="hljs-comment">//创建 &lt;p&gt; 元素</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> node = <span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string">&quot;666&quot;</span>);<span class="hljs-comment">//为&lt;p&gt;元素创建一个新的文本节点</span></span><br><span class="javascript">para.appendChild(node);<span class="hljs-comment">//将文本节点添加到 &lt;p&gt; 元素中：</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> element = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;div1&quot;</span>);<span class="hljs-comment">//在一个已存在的元素中添加 p 元素</span></span><br><span class="javascript">element.appendChild(para);<span class="hljs-comment">//添加到已存在的元素中</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（2）insertBefore-将新元素添加到开始位置"><a href="#（2）insertBefore-将新元素添加到开始位置" class="headerlink" title="（2）insertBefore() 将新元素添加到开始位置"></a>（2）insertBefore() 将新元素添加到开始位置</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> para = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;p&quot;</span>);</span><br><span class="javascript"><span class="hljs-keyword">var</span> node = <span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string">&quot;000&quot;</span>);</span><br><span class="javascript">para.appendChild(node);</span><br><span class="javascript"> </span><br><span class="javascript"><span class="hljs-keyword">var</span> element = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;div1&quot;</span>);</span><br><span class="javascript"><span class="hljs-keyword">var</span> child = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;p1&quot;</span>);</span><br><span class="javascript">element.insertBefore(para, child);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="移除已存在的元素"><a href="#移除已存在的元素" class="headerlink" title="移除已存在的元素"></a>移除已存在的元素</h3><p>注：要移除一个元素，你需要知道该元素的父元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>这是一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span>这是另外一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> parent = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;div1&quot;</span>);</span><br><span class="javascript"><span class="hljs-keyword">var</span> child = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;p1&quot;</span>);</span><br><span class="javascript">parent.removeChild(child);<span class="hljs-comment">//要移除一个元素，你需要知道该元素的父元素。</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="替换-HTML-元素-replaceChild"><a href="#替换-HTML-元素-replaceChild" class="headerlink" title="替换 HTML 元素 - replaceChild()"></a>替换 HTML 元素 - replaceChild()</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>这是一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span>这是另外一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> para = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;p&quot;</span>);</span><br><span class="javascript"><span class="hljs-keyword">var</span> node = <span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string">&quot;666&quot;</span>);<span class="hljs-comment">//替换 p1 标签</span></span><br><span class="javascript">para.appendChild(node);</span><br><span class="javascript"> </span><br><span class="javascript"><span class="hljs-keyword">var</span> parent = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;div1&quot;</span>);</span><br><span class="javascript"><span class="hljs-keyword">var</span> child = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;p1&quot;</span>);</span><br><span class="javascript">parent.replaceChild(para, child);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h1 id="七、JavaScript-HTMLCollection-对象"><a href="#七、JavaScript-HTMLCollection-对象" class="headerlink" title="七、JavaScript  HTMLCollection 对象"></a>七、JavaScript  HTMLCollection 对象</h1><p><strong>HTMLCollection</strong> 表示 HTML 元素的集合。</p><p>getElementsByTagName() 方法返回 HTMLCollection 对象。 </p><p>HTMLCollection 对象类似于一个包含 HTML 元素的（伪）数组。</p><p>使用示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTMLCollection<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>JavaScript HTML DOM<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello Runoob!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>点击按钮修改 p 元素的背景颜色。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;myFunction()&quot;</span>&gt;</span>修改颜色<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> myCollection = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;p&quot;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">var</span> i;</span><br><span class="javascript">    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; myCollection.length; i++) &#123;</span><br><span class="javascript">        myCollection[i].style.color = <span class="hljs-string">&quot;orange&quot;</span>;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li><p><strong>HTMLCollection 不是真正的数组！</strong></p></li><li><p>HTMLCollection 看起来可能是一个数组，但其实不是。</p></li><li><p>你可以像数组一样，使用<strong>索引</strong>(以0为起始)来获取元素。</p></li><li><p>HTMLCollection 无法使用数组的方法： valueOf(), pop(), push(), 或 join() 。</p></li></ul><br><h1 id="八、JavaScript-NodeList-对象"><a href="#八、JavaScript-NodeList-对象" class="headerlink" title="八、JavaScript NodeList 对象"></a>八、JavaScript <strong>NodeList</strong> 对象</h1><p><strong>NodeList</strong> 对象是一个从文档中获取的节点列表 (集合) 。</p><p>使用示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myNodelist = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;p&quot;</span>);<br><span class="hljs-keyword">var</span> i;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; myNodelist.length; i++) &#123;<br>    myNodelist[i].style.backgroundColor = <span class="hljs-string">&quot;red&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="HTMLCollection-与-NodeList-的对比"><a href="#HTMLCollection-与-NodeList-的对比" class="headerlink" title="HTMLCollection 与 NodeList 的对比"></a>HTMLCollection 与 NodeList 的对比</h4><p>HTMLCollection是 HTML 元素的集合。</p><p>NodeList 是一个文档节点的集合（非数组）。</p><p>NodeList 与 HTMLCollection 有很多类似的地方。</p><p>NodeList 与 HTMLCollection 都与数组对象有点类似，可以使用索引 (0, 1, 2, 3, 4, …) 来获取元素。</p><p>NodeList 与 HTMLCollection 都有 length 属性。</p><p>HTMLCollection 元素可以通过 name，id 或索引来获取。</p><p>NodeList 只能通过索引来获取。</p><p>只有 NodeList 对象有包含属性节点和文本节点。</p><p>都无法使用数组的方法： valueOf(), pop(), push(), 或 join() 。</p>]]></content>
    
    
    <categories>
      
      <category>前端杂记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 异步编程</title>
    <link href="/2021/10/26/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/JavaScript%20%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    <url>/2021/10/26/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/JavaScript%20%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-异步编程"><a href="#JavaScript-异步编程" class="headerlink" title="JavaScript 异步编程"></a>JavaScript 异步编程</h1><p>同步按你的代码顺序执行，异步不按照代码顺序执行，异步的执行效率更高。</p><p>异步就是从主线程发射一个<strong>子线程</strong>来完成任务。</p><img src="/images/image-20211026103149833.png" alt="image-20211026103149833" style="zoom:33%;"><p>异步编程：</p><p>我们常常用子线程来完成一些可能消耗时间足够长以至于被用户察觉的事情，比如读取一个大文件或者发出一个网络请求。因为子线程独立于主线程，所以即使出现阻塞也不会影响主线程的运行。但是子线程有一个局限：一旦发射了以后就会与主线程失去同步，我们无法确定它的结束，如果结束之后需要处理一些事情，比如处理来自服务器的信息，我们是无法将它合并到主线程中去的。</p><p>为了解决这个问题，JavaScript 中的异步操作函数往往通过<strong>回调函数</strong>来实现<strong>异步任务的结果处理</strong>。</p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>回调函数就是一个函数，它是在我们启动一个异步任务的时候就告诉它：等你完成了这个任务之后要干什么。这样一来主线程几乎不用关心异步任务的状态了，他自己会善始善终。</p><br><p>eg1: 这段程序中的 setTimeout 就是一个消耗时间较长（3 秒）的过程，它的第一个参数是个回调函数，第二个参数是毫秒数，这个函数执行之后会产生一个子线程，子线程会等待 3 秒，然后执行回调函数 “print”。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>回调函数等待 3 秒后执行。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">print</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>).innerHTML=<span class="hljs-string">&quot;RUNOOB!&quot;</span>;</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-built_in">setTimeout</span>(print, <span class="hljs-number">3000</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>eg2: setTimeout 会在子线程中等待 3 秒，在 setTimeout 函数执行之后主线程并没有停止，所以：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>回调函数等待 3 秒后执行。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo1&quot;</span>).innerHTML=<span class="hljs-string">&quot;RUNOOB-1!&quot;</span>;</span><br><span class="javascript">&#125;, <span class="hljs-number">3000</span>);</span><br><span class="javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo2&quot;</span>).innerHTML=<span class="hljs-string">&quot;RUNOOB-2!&quot;</span>;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>输出情况：</p><p>先出现：<img src="/images/image-20211026104045507.png" alt="image-20211026104045507" style="zoom:33%;"></p><p>经过3秒：<img src="/images/image-20211026104105754.png" alt="image-20211026104105754" style="zoom:33%;"></p>]]></content>
    
    
    <categories>
      
      <category>前端杂记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>document.write覆盖问题</title>
    <link href="/2021/10/23/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/document.write%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98/"/>
    <url>/2021/10/23/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/document.write%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>建议使用 document.write() 仅仅向文档输出写内容。</p><p>如果在<strong>文档已完成加载</strong>后执行 document.write（如<u>函数调用</u>），<strong>整个 HTML 页面将被覆盖</strong>。</p><p>eg：</p><p>无覆盖的情况：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的第一个 Web 页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我的第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-built_in">Date</span>());</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>发生覆盖的情况：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的第一个 Web 页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我的第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;myFunction()&quot;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params"></span>) </span></span><br><span class="hljs-function"><span class="javascript"></span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.write(<span class="hljs-built_in">Date</span>());</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>解决覆盖问题——利用innerHTML修改元素的 HTML 内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的第一个 Web 页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我的第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-comment">&lt;!--日期--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;myFunction()&quot;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params"></span>) </span></span><br><span class="hljs-function"><span class="javascript"></span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;data&quot;</span>).innerHTML = <span class="hljs-built_in">Date</span>();</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端杂记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>响应式Web设计框架-Minimalist-Bootstrap</title>
    <link href="/2021/10/22/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/%E5%93%8D%E5%BA%94%E5%BC%8FWeb%E8%AE%BE%E8%AE%A1%E6%A1%86%E6%9E%B6-Minimalist-Bootstrap/"/>
    <url>/2021/10/22/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/%E5%93%8D%E5%BA%94%E5%BC%8FWeb%E8%AE%BE%E8%AE%A1%E6%A1%86%E6%9E%B6-Minimalist-Bootstrap/</url>
    
    <content type="html"><![CDATA[<h3 id="响应式网页设计"><a href="#响应式网页设计" class="headerlink" title="响应式网页设计"></a><strong>响应式网页设计</strong></h3><p>页面的设计与开发根据用户行为以及设备环境(系统平台、屏幕尺寸、屏幕定向等)进行相应的响应和调整称之为响应式 Web 设计。</p><ul><li><p>响应式 Web 设计让你的网页能在所有设备上有好显示。</p></li><li><p>响应式 Web 设计只使用 HTML 和 CSS。</p></li><li><p>响应式 Web 设计不是一个程序或Javascript脚本。</p></li><li><p>友好的用户体验是网页可以在任何设备上展示和操作，设备包括桌面系统设备，平板电脑，iPhone等手机等。网页应该根据设备的大小自动调整内容。</p><p>参考网址</p><p><a href="https://www.runoob.com/css/css-rwd-intro.html">https://www.runoob.com/css/css-rwd-intro.html</a></p></li></ul><img src="/images/image-20211022022029729.png" alt="image-20211022022029729" style="zoom: 50%;"><br><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://apps.bdimg.com/libs/bootstrap/3.3.4/css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://apps.bdimg.com/libs/bootstrap/3.3.4/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;jumbotron&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的第一个 Bootstrap 页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><br>      第一列<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><br>      第二列<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><br>      第三列<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端杂记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>前缀和-面试题 17.05-字母与数字</title>
    <link href="/2021/10/19/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98%2017.05-%E5%AD%97%E6%AF%8D%E4%B8%8E%E6%95%B0%E5%AD%97/"/>
    <url>/2021/10/19/LeetCode/%E9%9D%A2%E8%AF%95%E9%A2%98%2017.05-%E5%AD%97%E6%AF%8D%E4%B8%8E%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/find-longest-subarray-lcci/">https://leetcode-cn.com/problems/find-longest-subarray-lcci/</a></p><p>题意：给定一个放有字母和数字的数组，找到最长的子数组，且包含的字母和数字的个数相同。</p><p>返回该子数组，若存在多个最长子数组，返回左端点下标值最小的子数组。若不存在这样的数组，返回一个空数组。</p><p>样例：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less">输入: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;F&quot;</span>,<span class="hljs-string">&quot;G&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;H&quot;</span>,<span class="hljs-string">&quot;I&quot;</span>,<span class="hljs-string">&quot;J&quot;</span>,<span class="hljs-string">&quot;K&quot;</span>,<span class="hljs-string">&quot;L&quot;</span>,<span class="hljs-string">&quot;M&quot;</span>]</span><br><br>输出: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;F&quot;</span>,<span class="hljs-string">&quot;G&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;7&quot;</span>]</span><br></code></pre></td></tr></table></figure><h4 id="Solve"><a href="#Solve" class="headerlink" title="Solve:"></a>Solve:</h4><p><strong>前缀和 + map记录每个前缀和第一次出现的位置</strong>（要求子数组最长）</p><p>思路：</p><p>数字看成1，字母看成-1，再计算前缀和。目标：找前缀和相同，且相隔最远的2个元素。</p><p>可以先处理前缀和为0的情况（从头开始的子数组）</p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">findLongestSubarray</span><span class="hljs-params">(vector&lt;string&gt; &amp;array)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> sum[<span class="hljs-number">100005</span>];<br>    <span class="hljs-keyword">int</span> a[<span class="hljs-number">100005</span>];<br>    <span class="hljs-keyword">int</span> n = array.<span class="hljs-built_in">size</span>();<br>    map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; m; <span class="hljs-comment">//记录每个前缀和第一次出现的位置</span><br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (array[i][<span class="hljs-number">0</span>] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; array[i][<span class="hljs-number">0</span>] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>            a[i + <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            a[i + <span class="hljs-number">1</span>] = <span class="hljs-number">-1</span>;<br>    &#125;<br>    sum[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    sum[<span class="hljs-number">1</span>] = a[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>        sum[i] = sum[i - <span class="hljs-number">1</span>] + a[i];<br><br>    <span class="hljs-keyword">int</span> maxlen = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> l, r; <span class="hljs-comment">//结果区间</span><br><br>    <span class="hljs-comment">//先处理从头开始的子数组</span><br>    <span class="hljs-keyword">for</span> (i = n; i &gt; <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span> (sum[i] == <span class="hljs-number">0</span>)<br>        &#123;<br>            maxlen = i;<br>            l = <span class="hljs-number">1</span>;<br>            r = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> num = sum[i];<br>        <span class="hljs-keyword">if</span> (sum[i] != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (m[num] == <span class="hljs-number">0</span>) <span class="hljs-comment">//当前的前缀和第一次出现</span><br>                m[num] = i;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (maxlen &lt; (i - m[num]))<br>                &#123;<br>                    maxlen = i - m[num];<br>                    l = m[num]+<span class="hljs-number">1</span>;<br>                    r = i;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    vector&lt;string&gt; re;<br>    <span class="hljs-keyword">if</span> (maxlen == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> re;<br>    <span class="hljs-keyword">for</span> (i = l<span class="hljs-number">-1</span>; i &lt; r; i++)<br>        re.<span class="hljs-built_in">push_back</span>(array[i]);<br>    <span class="hljs-keyword">return</span> re;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string a[<span class="hljs-number">100</span>] = &#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;M&quot;</span>&#125;;<br>    vector&lt;string&gt; s, r;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++)<br>        s.<span class="hljs-built_in">push_back</span>(a[i]);<br>    r = <span class="hljs-built_in">findLongestSubarray</span>(s);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; r.<span class="hljs-built_in">size</span>(); i++)<br>        cout &lt;&lt; r[i] &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HTTP 请求：GET 对比 POST</title>
    <link href="/2021/10/18/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/HTTP%20%E6%96%B9%E6%B3%95%EF%BC%9AGET%20%E5%AF%B9%E6%AF%94%20POST/"/>
    <url>/2021/10/18/%E5%89%8D%E7%AB%AF%E6%9D%82%E8%AE%B0/HTTP%20%E6%96%B9%E6%B3%95%EF%BC%9AGET%20%E5%AF%B9%E6%AF%94%20POST/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>超文本传输协议（HTTP）=&gt; 保证客户端与服务器之间的通信。</p><p>web 浏览器可能是客户端，而计算机上的网络应用程序也可能作为服务器端。</p><p>eg：客户端（浏览器）向服务器提交 HTTP 请求；服务器向客户端返回响应。响应包含关于请求的状态信息以及可能被请求的内容。</p><h2 id="两种-HTTP-请求方法：GET-和-POST"><a href="#两种-HTTP-请求方法：GET-和-POST" class="headerlink" title="两种 HTTP 请求方法：GET 和 POST"></a>两种 HTTP 请求方法：GET 和 POST</h2><p>在客户机和服务器之间进行请求-响应时，两种最常被用到的方法是：GET 和 POST。</p><ul><li><strong>GET</strong> - 从指定的资源请求数据。</li><li><strong>POST</strong> - 向指定的资源提交要被处理的数据。</li></ul><h2 id="GET-方法"><a href="#GET-方法" class="headerlink" title="GET 方法"></a>GET 方法</h2><p><strong>请注意，查询字符串（键值对）是在 GET 请求的 URL 中发送的：</strong></p><p>/test/demo_form.php**?name1=value1&amp;name2=value2**</p><ul><li>GET 请求可被缓存</li><li>GET 请求保留在浏览器历史记录中</li><li>GET 请求可被收藏为书签</li><li>GET 请求不应在处理敏感数据时使用</li><li>GET 请求有长度限制</li><li>GET 请求只应当用于取回数据</li></ul><h2 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h2><p><strong>请注意，查询字符串（键值对）是在 POST 请求的 HTTP 消息主体中发送的：</strong></p><p>POST /test/demo_form.php HTTP/1.1<br>Host: runoob.com<br><strong>name1=value1&amp;name2=value2</strong></p><ul><li>POST 请求不会被缓存</li><li>POST 请求不会保留在浏览器历史记录中</li><li>POST 不能被收藏为书签</li><li>POST 请求对数据长度没有要求</li></ul><br><p>Form 中的 get 和 post 方法，在数据传输过程中分别对应了 HTTP 协议中的 GET 和 POST 方法。二者主要区别如下：</p><p>1、Get 是用来从服务器上获得数据，而 Post 是用来向服务器上传递数据。</p><h4 id="2、Get-将表单中数据的按照-variable-value-的形式，添加到-action-所指向的-URL-后面，并且两者使用“-”连接，而各个变量之间使用“-amp-”连接；Post-是将表单中的数据放在-form-的数据体中，按照变量和值相对应的方式，传递到-action-所指向-URL。"><a href="#2、Get-将表单中数据的按照-variable-value-的形式，添加到-action-所指向的-URL-后面，并且两者使用“-”连接，而各个变量之间使用“-amp-”连接；Post-是将表单中的数据放在-form-的数据体中，按照变量和值相对应的方式，传递到-action-所指向-URL。" class="headerlink" title="2、Get 将表单中数据的按照 variable=value 的形式，添加到 action 所指向的 URL 后面，并且两者使用“?”连接，而各个变量之间使用“&amp;”连接；Post 是将表单中的数据放在 form 的数据体中，按照变量和值相对应的方式，传递到 action 所指向 URL。"></a>2、Get 将表单中数据的按照 variable=value 的形式，添加到 action 所指向的 <strong>URL</strong> 后面，并且两者使用“?”连接，而各个变量之间使用“&amp;”连接；Post 是将表单中的数据放在 <strong>form</strong> 的数据体中，按照变量和值相对应的方式，传递到 action 所指向 URL。</h4><p>3、Get 是不安全的，因为在传输过程，数据被放在请求的 URL 中，而如今现有的很多服务器、代理服务器或者用户代理都会将请求URL记录到日志文件中，然后放在某个地方，这样就可能会有一些隐私的信息被第三方看到。另外，用户也可以在浏览器上直接看到提交的数据，一些系统内部消息将会一同显示在用户面前。Post 的所有操作对用户来说都是不可见的。</p><p>4、Get 传输的数据量小，这主要是因为受 URL 长度限制；而 Post 可以传输大量的数据，所以在上传文件只能使用 Post（当然还有一个原因，将在后面的提到）。</p><p>5、Get 是 Form 的默认方法。</p><br><table><thead><tr><th align="center"></th><th align="left">GET</th><th align="left">POST</th></tr></thead><tbody><tr><td align="center">后退按钮/刷新</td><td align="left">无害</td><td align="left">数据会被重新提交（浏览器应该告知用户数据会被重新提交）。</td></tr><tr><td align="center">书签</td><td align="left">可收藏为书签</td><td align="left">不可收藏为书签</td></tr><tr><td align="center">缓存</td><td align="left">能被缓存</td><td align="left">不能缓存</td></tr><tr><td align="center">历史</td><td align="left">参数保留在浏览器历史中。</td><td align="left">参数不会保存在浏览器历史中。</td></tr><tr><td align="center">对数据长度的限制</td><td align="left">是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。</td><td align="left">无限制。</td></tr><tr><td align="center">对数据类型的限制</td><td align="left">只允许 ASCII 字符。</td><td align="left">没有限制。也允许二进制数据。</td></tr><tr><td align="center">安全性</td><td align="left">与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。  在发送密码或其他敏感信息时绝不要使用 GET ！</td><td align="left">POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</td></tr><tr><td align="center">可见性</td><td align="left">数据在 URL 中对所有人都是可见的。</td><td align="left">数据不会显示在 URL 中。</td></tr></tbody></table><h2 id="其他-HTTP-请求方法"><a href="#其他-HTTP-请求方法" class="headerlink" title="其他 HTTP 请求方法"></a>其他 HTTP 请求方法</h2><p>下面的表格列出了其他一些 HTTP 请求方法：</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">HEAD</td><td align="left">与 GET 相同，但只返回 HTTP 报头，不返回文档主体。</td></tr><tr><td align="left">PUT</td><td align="left">上传指定的 URI 表示。</td></tr><tr><td align="left">DELETE</td><td align="left">删除指定资源。</td></tr><tr><td align="left">OPTIONS</td><td align="left">返回服务器支持的 HTTP 方法。</td></tr><tr><td align="left">CONNECT</td><td align="left">把请求连接转换到透明的 TCP/IP 通道。</td></tr></tbody></table><p>源自：<a href="https://www.runoob.com/tags/html-httpmethods.html">https://www.runoob.com/tags/html-httpmethods.html</a></p>]]></content>
    
    
    <categories>
      
      <category>前端杂记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>同源策略以及实现跨域-AJAX</title>
    <link href="/2021/10/12/AJAX/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F-AJAX/"/>
    <url>/2021/10/12/AJAX/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F-AJAX/</url>
    
    <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><ul><li>同源策略(Same-Origin Policy)最早由Netscape 公司提出，是浏览器的一种安全策略</li><li>同源： 协议、域名、端口号必须完全相同</li><li>跨域： 违背同源策略就是<strong>跨域</strong></li></ul><h2 id="如何解决跨域"><a href="#如何解决跨域" class="headerlink" title="如何解决跨域"></a>如何解决跨域</h2><h2 id="1、JSONP"><a href="#1、JSONP" class="headerlink" title="1、JSONP"></a>1、JSONP</h2><p>JSONP (JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明才智开发出来，<strong>只支持get 请求</strong>。</p><p>在网页有一些标签天生具有跨域能力，比如：img link iframe script。<br>JSONP 就是利用<u>script 标签的跨域能力</u>来发送请求的。</p><p><strong>JSONP 的使用</strong></p><p> <a href="https://blog.csdn.net/inite/article/details/80333130">https://blog.csdn.net/inite/article/details/80333130</a></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h4 id="前端（-jQuery-中的JSONP）："><a href="#前端（-jQuery-中的JSONP）：" class="headerlink" title="前端（ jQuery 中的JSONP）："></a>前端（ jQuery 中的JSONP）：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>jQuery-jsonp<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#result</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>:<span class="hljs-number">300px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">border</span>:solid <span class="hljs-number">1px</span> <span class="hljs-number">#089</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;https://cdn.bootcss.com/jquery/3.5.0/jquery.min.js&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击发送 jsonp 请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">0</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            $.getJSON(<span class="hljs-string">&#x27;http://127.0.0.1:8000/jquery-jsonp?callback=?&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;</span><br><span class="javascript">                $(<span class="hljs-string">&#x27;#result&#x27;</span>).html(<span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="javascript">                    名称: <span class="hljs-subst">$&#123;data.name&#125;</span>&lt;br&gt;</span></span><br><span class="hljs-string"><span class="javascript">                    校区: <span class="hljs-subst">$&#123;data.city&#125;</span></span></span><br><span class="hljs-string"><span class="javascript">                `</span>)</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h4 id="服务器后端："><a href="#服务器后端：" class="headerlink" title="服务器后端："></a>服务器后端：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1. 引入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-comment">//2. 创建应用对象</span><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">//3. 创建路由规则</span><br><span class="hljs-comment">// request 是对请求报文的封装</span><br><span class="hljs-comment">// response 是对响应报文的封装</span><br><span class="hljs-comment">//jsonp服务</span><br>app.all(<span class="hljs-string">&#x27;/jsonp-server&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;);</span><br>    <span class="hljs-keyword">const</span> data = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;anhui&#x27;</span><br>    &#125;;<br>    <span class="hljs-comment">//将数据转化为字符串</span><br>    <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">JSON</span>.stringify(data);<br>    <span class="hljs-comment">//返回结果</span><br>    response.end(<span class="hljs-string">`handle(<span class="hljs-subst">$&#123;str&#125;</span>)`</span>);<br>&#125;);<br><span class="hljs-comment">//用户名检测是否存在</span><br>app.all(<span class="hljs-string">&#x27;/check&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>&#125;);<br><br>app.all(<span class="hljs-string">&#x27;/jquery-jsonp&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;);</span><br>    <span class="hljs-keyword">const</span> data = &#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;anhui&#x27;</span>,<br>        <span class="hljs-attr">city</span>: [<span class="hljs-string">&#x27;北京&#x27;</span>,<span class="hljs-string">&#x27;上海&#x27;</span>,<span class="hljs-string">&#x27;深圳&#x27;</span>]<br>    &#125;;<br>    <span class="hljs-comment">//将数据转化为字符串</span><br>    <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">JSON</span>.stringify(data);<br>    <span class="hljs-comment">//接收 callback 参数</span><br>    <span class="hljs-keyword">let</span> cb = request.query.callback;<br><br>    <span class="hljs-comment">//返回结果</span><br>    response.end(<span class="hljs-string">`<span class="hljs-subst">$&#123;cb&#125;</span>(<span class="hljs-subst">$&#123;str&#125;</span>)`</span>);<br>&#125;);<br><br><br><span class="hljs-comment">//4. 监听端口启动服务</span><br>app.listen(<span class="hljs-number">8000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务已经启动, 8000 端口监听中....&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><br><h2 id="2、CORS"><a href="#2、CORS" class="headerlink" title="2、CORS"></a>2、CORS</h2><p>CORS，跨域资源共享。CORS是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，<strong>支持get和post请求</strong>。跨域资源共享标准新增了一组HTTP首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。</p><p>CORS是通过设置一个<strong>响应头</strong>来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应执行。</p><p><strong>CORS的使用：</strong></p><p><a href="https://blog.csdn.net/qq22692150/article/details/99011726?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">https://blog.csdn.net/qq22692150/article/details/99011726?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control</a></p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><h4 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CORS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.19.2/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#result</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>:<span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">border</span>:solid <span class="hljs-number">1px</span> <span class="hljs-number">#90b</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发送请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;result&#x27;</span>);</span><br><span class="javascript">        btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">           axios(&#123;</span><br><span class="javascript">               <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,</span><br><span class="javascript">               <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:8000/cors-server&#x27;</span>,</span><br><span class="javascript">           &#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span>&#123;</span><br><span class="javascript">                result.innerHTML = response.data;</span><br><span class="javascript">           &#125;)</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="服务器后端：-1"><a href="#服务器后端：-1" class="headerlink" title="服务器后端："></a>服务器后端：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1. 引入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-comment">//2. 创建应用对象</span><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">//3. 创建路由规则</span><br><span class="hljs-comment">// request 是对请求报文的封装</span><br><span class="hljs-comment">// response 是对响应报文的封装</span><br><br>app.all(<span class="hljs-string">&#x27;/cors-server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//设置响应头</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>); <span class="hljs-comment">// Origin 表示设置访问源</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);<span class="hljs-comment">// * 表示允许所有域名访问</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Method&quot;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);<br>    <span class="hljs-comment">// response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://127.0.0.1:5500&quot;);</span><br>    response.send(<span class="hljs-string">&#x27;hello CORS&#x27;</span>);<br>&#125;);<br><br><br><span class="hljs-comment">//4. 监听端口启动服务</span><br>app.listen(<span class="hljs-number">8000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务已经启动, 8000 端口监听中....&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AJAX</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Axios-AJAX</title>
    <link href="/2021/10/12/AJAX/Axios-AJAX/"/>
    <url>/2021/10/12/AJAX/Axios-AJAX/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是-axios？"><a href="#什么是-axios？" class="headerlink" title="什么是 axios？"></a>什么是 axios？</h3><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p><h4 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h4><ul><li>从浏览器中创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequests</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">XSRF</a></li></ul><h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><p>①npm安装</p><p>②使用CDN链接（注：使用国内的bootcdn）</p><br><h3 id="Axios发送-AJAX-请求"><a href="#Axios发送-AJAX-请求" class="headerlink" title="Axios发送 AJAX 请求"></a>Axios发送 AJAX 请求</h3><p><strong>三种方式：axios.get、axios.post、axios()</strong></p><p>(ps：axios通用方式axios()最好用)</p><h4 id="前端代码："><a href="#前端代码：" class="headerlink" title="前端代码："></a>前端代码：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Axios 发送 AJAX 请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.21.1/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.btn-btn-primary</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#4CAF50</span>;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">            <span class="hljs-attribute">color</span>: white;</span><br><span class="css">            <span class="hljs-attribute">border</span>: none;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.btn-btn-danger</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">            <span class="hljs-attribute">color</span>: white;</span><br><span class="css">            <span class="hljs-attribute">border</span>: none;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.btn-btn-info</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: blue;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">180px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">            <span class="hljs-attribute">color</span>: white;</span><br><span class="css">            <span class="hljs-attribute">border</span>: none;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-header&quot;</span>&gt;</span>Axios发送AJAX请求<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-btn-primary&quot;</span>&gt;</span>GET<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-btn-danger&quot;</span>&gt;</span>POST<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-btn-info&quot;</span>&gt;</span>AJAX通用方式发送请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//利用 Axios 发送 AJAX 请求</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//配置baseURL</span></span><br><span class="javascript">        axios.defaults.baseURL = <span class="hljs-string">&#x27;http://127.0.0.1:8000&#x27;</span>;</span><br><span class="javascript"></span><br><span class="javascript">        btns[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//GET请求</span></span><br><span class="javascript">            axios.get(<span class="hljs-string">&#x27;/axios-server&#x27;</span>, &#123;</span><br><span class="javascript">                <span class="hljs-comment">//url参数</span></span><br><span class="javascript">                <span class="hljs-attr">params</span>: &#123;</span><br><span class="javascript">                    <span class="hljs-attr">id</span>: <span class="hljs-number">100</span>,</span><br><span class="javascript">                    <span class="hljs-attr">vip</span>: <span class="hljs-number">7</span></span><br><span class="javascript">                &#125;,</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">//请求头信息</span></span><br><span class="javascript">                <span class="hljs-attr">headers</span>: &#123;</span><br><span class="javascript">                    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;wang321&#x27;</span>,</span><br><span class="javascript">                    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123; <span class="hljs-comment">//then 回调，查看处理后的响应结果</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(value);</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        btns[<span class="hljs-number">1</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//POST请求</span></span><br><span class="javascript">            <span class="hljs-comment">//第一个参数是url，第二个参数是请求体，第三个参数是其他配置</span></span><br><span class="javascript">            axios.post(<span class="hljs-string">&#x27;/axios-server&#x27;</span>, &#123;</span><br><span class="javascript">                <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;wangkkkk&#x27;</span>, <span class="hljs-comment">//请求体</span></span><br><span class="javascript">                <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;123456&#x27;</span></span><br><span class="javascript">            &#125;, &#123;</span><br><span class="javascript">                <span class="hljs-comment">//其他配置</span></span><br><span class="javascript">                <span class="hljs-comment">//url参数</span></span><br><span class="javascript">                <span class="hljs-attr">params</span>: &#123;</span><br><span class="javascript">                    <span class="hljs-attr">id</span>: <span class="hljs-number">100</span>,</span><br><span class="javascript">                    <span class="hljs-attr">vip</span>: <span class="hljs-number">9</span></span><br><span class="javascript">                &#125;,</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">//请求头参数</span></span><br><span class="javascript">                <span class="hljs-attr">headers</span>: &#123;</span><br><span class="javascript">                    <span class="hljs-attr">height</span>: <span class="hljs-number">185</span>,</span><br><span class="javascript">                    <span class="hljs-attr">weight</span>: <span class="hljs-number">140</span></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;)</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        btns[<span class="hljs-number">2</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//AJAX通用方式发送请求</span></span><br><span class="javascript">            axios(&#123;</span><br><span class="javascript">                <span class="hljs-comment">//请求方法</span></span><br><span class="javascript">                <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">//url</span></span><br><span class="javascript">                <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/axios-server&#x27;</span>,</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">//url参数</span></span><br><span class="javascript">                <span class="hljs-attr">params</span>: &#123;</span><br><span class="javascript">                    <span class="hljs-attr">id</span>: <span class="hljs-number">20</span>,</span><br><span class="javascript">                    <span class="hljs-attr">vip</span>: <span class="hljs-number">12</span></span><br><span class="javascript">                &#125;,</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">//头信息参数</span></span><br><span class="javascript">                <span class="hljs-attr">headers</span>: &#123;</span><br><span class="javascript">                    <span class="hljs-attr">a</span>: <span class="hljs-number">222</span>,</span><br><span class="javascript">                    <span class="hljs-attr">b</span>: <span class="hljs-number">111</span></span><br><span class="javascript">                &#125;,</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">//请求体参数</span></span><br><span class="javascript">                <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                    <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;wang777&#x27;</span>,</span><br><span class="javascript">                    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;91203&#x27;</span></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123; <span class="hljs-comment">//查看返回结果</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(response);</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(response.status);<span class="hljs-comment">//响应状态码</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(response.statusText);<span class="hljs-comment">//响应状态字符串</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(response.headers);<span class="hljs-comment">//响应头信息</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(response.data);<span class="hljs-comment">//响应体</span></span><br><span class="javascript">            &#125;)</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h4 id="服务器端代码（后端）："><a href="#服务器端代码（后端）：" class="headerlink" title="服务器端代码（后端）："></a>服务器端代码（后端）：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// express框架 服务端</span><br><span class="hljs-comment">//1.引入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-comment">//2.创建应用对象</span><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">//3.创建路由规则</span><br><span class="hljs-comment">// request 是对请求报文的封装</span><br><span class="hljs-comment">// response 是对响应报文的封装</span><br><br><span class="hljs-comment">//axios服务</span><br>app.all(<span class="hljs-string">&#x27;/axios-server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<span class="hljs-comment">//允许自定义响应头 /需为all方法</span><br><br>    <span class="hljs-comment">//设置响应体</span><br>    <span class="hljs-keyword">const</span> data = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;wang&#x27;</span>&#125;;<br>    <span class="hljs-comment">// response.send(&quot;Hello axios AJAX&quot;);</span><br>    response.send(<span class="hljs-built_in">JSON</span>.stringify(data));<br>&#125;)<br><br>app.get(<span class="hljs-string">&#x27;/server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello AJAX&quot;</span>);<br>&#125;)<br><br>app.get(<span class="hljs-string">&#x27;/ie&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello IE&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//延时响应</span><br>app.get(<span class="hljs-string">&#x27;/delay&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置三秒钟的延时响应</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">//设置响应体</span><br>        response.send(<span class="hljs-string">&quot;延时响应&quot;</span>);<br>    &#125;, <span class="hljs-number">3000</span>);<br><br>&#125;)<br><br>app.post(<span class="hljs-string">&#x27;/server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-built_in">console</span>.log(request.headers);<span class="hljs-comment">//在终端输出请求头信息</span><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello AJAX POST&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//app.all()可以接收任意类型的HTTP请求</span><br>app.all(<span class="hljs-string">&#x27;/json-server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-built_in">console</span>.log(request.headers);<span class="hljs-comment">//在终端输出请求头信息</span><br><br>    <span class="hljs-comment">//响应一个数据</span><br>    <span class="hljs-keyword">const</span> data = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;wang&#x27;</span><br>    &#125;<br>    <span class="hljs-comment">//对对象进行字符串转换</span><br>    <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">JSON</span>.stringify(data);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(str);<br>&#125;)<br><br><span class="hljs-comment">//4.监听端口</span><br>app.listen(<span class="hljs-number">8000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务器已经启动，8000 端口监听中....&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AJAX</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>jQuery-AJAX</title>
    <link href="/2021/10/11/AJAX/jQuery-AJAX/"/>
    <url>/2021/10/11/AJAX/jQuery-AJAX/</url>
    
    <content type="html"><![CDATA[<h3 id="jQuery-简介"><a href="#jQuery-简介" class="headerlink" title="jQuery 简介"></a>jQuery 简介</h3><p>jQuery 是一个 <strong>JavaScript 函数库</strong>。</p><p>jQuery 是一个轻量级的”写的少，做的多”的 JavaScript 库。</p><p>jQuery 库包含以下功能：</p><ul><li>HTML 元素选取</li><li>HTML 元素操作</li><li>CSS 操作</li><li>HTML 事件函数</li><li>JavaScript 特效和动画</li><li>HTML DOM 遍历和修改</li><li>AJAX</li><li>Utilities</li></ul><p>tips：除此之外，jQuery 还提供了大量的插件。</p><p>目前网络上有大量开源的 JS 代码库, 但是 jQuery 是目前最流行的 JS 代码库，而且提供了大量的扩展。</p><p>很多大公司都在使用 jQuery， 例如:</p><ul><li>Google</li><li>Microsoft</li><li>IBM</li><li>Netflix</li></ul><br><h4 id="添加jQuery"><a href="#添加jQuery" class="headerlink" title="添加jQuery"></a>添加jQuery</h4><p>进入<a href="https://www.bootcdn.cn/jquery/">https://www.bootcdn.cn/jquery/</a></p><p>复制链接粘贴进代码中即可。</p><br><h3 id="jQuery-发送-AJAX-请求"><a href="#jQuery-发送-AJAX-请求" class="headerlink" title="jQuery 发送 AJAX 请求"></a>jQuery 发送 AJAX 请求</h3><p>优点：使用封装好的函数，不需要使用XMLHttpRequest对象进行一系列的操作。</p><p><strong>三种方式：$.get、$.post、$.ajax</strong></p><p>区别：</p><p>①传递的参数不同，$.ajax可选择参数更多。</p><p>②$.ajax 是 jQuery 底层 AJAX 实现，是一种通用的底层封装，而$.get $.post是简单易用的高层实现，我们使用$.get $.post方法，jQuery会自动封装调用底层的$.ajax。</p><p>③$.ajax的自定义程度更强。</p><h4 id="前端代码："><a href="#前端代码：" class="headerlink" title="前端代码："></a>前端代码：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>jQuery 发送 AJAX 请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.btn-btn-primary</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#4CAF50</span>;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">            <span class="hljs-attribute">color</span>: white;</span><br><span class="css">            <span class="hljs-attribute">border</span>: none;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.btn-btn-danger</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">60px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">            <span class="hljs-attribute">color</span>: white;</span><br><span class="css">            <span class="hljs-attribute">border</span>: none;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.btn-btn-info</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: blue;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">            <span class="hljs-attribute">color</span>: white;</span><br><span class="css">            <span class="hljs-attribute">border</span>: none;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-header&quot;</span>&gt;</span>jQuery发送AJAX请求<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-btn-primary&quot;</span>&gt;</span>GET<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-btn-danger&quot;</span>&gt;</span>POST<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-btn-info&quot;</span>&gt;</span>通用型方法ajax<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//利用 jQuery 发送 AJAX 请求</span></span><br><span class="javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">0</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            $.get(<span class="hljs-string">&#x27;http://127.0.0.1:8000/jQuery-server&#x27;</span>, &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">200</span> &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(data); <span class="hljs-comment">//data 为回调数据</span></span><br><span class="javascript">            &#125;, <span class="hljs-string">&#x27;json&#x27;</span>); <span class="hljs-comment">// json 输出对象; 无 json 则输出字符串</span></span><br><span class="javascript">        &#125;);</span><br><span class="javascript"></span><br><span class="javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">1</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            $.post(<span class="hljs-string">&#x27;http://127.0.0.1:8000/jQuery-server&#x27;</span>, &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">200</span> &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(data); <span class="hljs-comment">//data 为回调数据</span></span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript"></span><br><span class="javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">2</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            $.ajax(&#123;</span><br><span class="javascript">                <span class="hljs-comment">//url</span></span><br><span class="javascript">                <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://127.0.0.1:8000/jQuery-server&#x27;</span>,</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">//参数</span></span><br><span class="javascript">                <span class="hljs-attr">data</span>: &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">200</span> &#125;,</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">//请求类型</span></span><br><span class="javascript">                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">//设置响应体结果</span></span><br><span class="javascript">                <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">//成功的回调</span></span><br><span class="javascript">                <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">                &#125;,</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">//超时时间</span></span><br><span class="javascript">                <span class="hljs-attr">timeout</span>: <span class="hljs-number">2000</span>,</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">//失败的回调</span></span><br><span class="javascript">                <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;出错啦！！&#x27;</span>);</span><br><span class="javascript">                &#125;,</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">//头信息设置</span></span><br><span class="javascript">                <span class="hljs-attr">headers</span>: &#123;  <span class="hljs-comment">//自定义响应头</span></span><br><span class="javascript">                    <span class="hljs-attr">c</span>: <span class="hljs-number">300</span>,</span><br><span class="javascript">                    <span class="hljs-attr">d</span>: <span class="hljs-number">400</span></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript"></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h4 id="服务器端代码（后端）："><a href="#服务器端代码（后端）：" class="headerlink" title="服务器端代码（后端）："></a>服务器端代码（后端）：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// express框架 服务端</span><br><span class="hljs-comment">//1.引入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-comment">//2.创建应用对象</span><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">//3.创建路由规则</span><br><span class="hljs-comment">// request 是对请求报文的封装</span><br><span class="hljs-comment">// response 是对响应报文的封装</span><br><br><span class="hljs-comment">//jQuery服务</span><br>app.all(<span class="hljs-string">&#x27;/jQuery-server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<span class="hljs-comment">//允许自定义响应头 /需为all方法</span><br><br>    <span class="hljs-comment">//设置响应体</span><br>    <span class="hljs-keyword">const</span> data = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;wang&#x27;</span>&#125;;<br>    <span class="hljs-comment">// response.send(&quot;Hello jQUery AJAX&quot;);</span><br>    response.send(<span class="hljs-built_in">JSON</span>.stringify(data));<br>&#125;)<br><br>app.get(<span class="hljs-string">&#x27;/server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello AJAX&quot;</span>);<br>&#125;)<br><br>app.get(<span class="hljs-string">&#x27;/ie&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello IE&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//延时响应</span><br>app.get(<span class="hljs-string">&#x27;/delay&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置三秒钟的延时响应</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">//设置响应体</span><br>        response.send(<span class="hljs-string">&quot;延时响应&quot;</span>);<br>    &#125;, <span class="hljs-number">3000</span>);<br><br>&#125;)<br><br>app.post(<span class="hljs-string">&#x27;/server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-built_in">console</span>.log(request.headers);<span class="hljs-comment">//在终端输出请求头信息</span><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello AJAX POST&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//app.all()可以接收任意类型的HTTP请求</span><br>app.all(<span class="hljs-string">&#x27;/json-server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-built_in">console</span>.log(request.headers);<span class="hljs-comment">//在终端输出请求头信息</span><br><br>    <span class="hljs-comment">//响应一个数据</span><br>    <span class="hljs-keyword">const</span> data = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;wang&#x27;</span><br>    &#125;<br>    <span class="hljs-comment">//对对象进行字符串转换</span><br>    <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">JSON</span>.stringify(data);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(str);<br>&#125;)<br><br><span class="hljs-comment">//4.监听端口</span><br>app.listen(<span class="hljs-number">8000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务器已经启动，8000 端口监听中....&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AJAX</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决重复发送AJAX请求问题</title>
    <link href="/2021/10/10/AJAX/%E8%A7%A3%E5%86%B3%E9%87%8D%E5%A4%8D%E5%8F%91%E9%80%81AJAX%E8%AF%B7%E6%B1%82%E9%97%AE%E9%A2%98/"/>
    <url>/2021/10/10/AJAX/%E8%A7%A3%E5%86%B3%E9%87%8D%E5%A4%8D%E5%8F%91%E9%80%81AJAX%E8%AF%B7%E6%B1%82%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>问题起因：</p><p>用户连续点击发送按钮，这个按钮用于发送多条<strong>相同</strong>的ajax请求，<u>导致服务器处理数据的负担太大</u>，所以需要解决这个问题。</p><p>思路：<strong>无论用户重复发送多少次请求，都把上一次未完成的请求取消，相同请求只发送一次</strong></p><p>Solve：通过一个变量 isSending 来标识是否正在发送请求。</p><h4 id="前端代码："><a href="#前端代码：" class="headerlink" title="前端代码："></a>前端代码：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>解决重复发送AJAX请求问题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//获取元素对象</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="javascript">                     <span class="hljs-comment">//const 声明一个只读的常量，一旦声明，常量的值就不能改变</span></span><br><span class="javascript">        <span class="hljs-keyword">let</span> x = <span class="hljs-literal">null</span>;<span class="hljs-comment">// let 声明的变量只在 let 命令所在的代码块内有效</span></span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//标识变量</span></span><br><span class="javascript">        <span class="hljs-keyword">let</span> isSending = <span class="hljs-literal">false</span>;<span class="hljs-comment">// 是否正在发送AJAX请求</span></span><br><span class="javascript"></span><br><span class="javascript">        btns[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">// 先进行标识变量的判断</span></span><br><span class="javascript">            <span class="hljs-keyword">if</span>(isSending === <span class="hljs-literal">true</span>)&#123;</span><br><span class="javascript">                x.abort();<span class="hljs-comment">// 正在发送则取消当前请求，并创建一个新的请求</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">            x = <span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">// 修改标识变量</span></span><br><span class="javascript">            isSending = <span class="hljs-literal">true</span>;</span><br><span class="javascript"></span><br><span class="javascript">            x.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://127.0.0.1:8000/delay&#x27;</span>);</span><br><span class="javascript">            x.send();</span><br><span class="javascript"></span><br><span class="javascript">            x.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">if</span>(x.readyState === <span class="hljs-number">4</span>)&#123;</span><br><span class="javascript">                    <span class="hljs-comment">// 修改标识变量</span></span><br><span class="javascript">                    <span class="hljs-comment">// 上次请求已成功结束</span></span><br><span class="javascript">                    isSending = <span class="hljs-literal">false</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h4 id="服务器端（后端）代码："><a href="#服务器端（后端）代码：" class="headerlink" title="服务器端（后端）代码："></a>服务器端（后端）代码：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// express框架 服务端</span><br><span class="hljs-comment">//1.引入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-comment">//2.创建应用对象</span><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">//3.创建路由规则</span><br><span class="hljs-comment">// request 是对请求报文的封装</span><br><span class="hljs-comment">// response 是对响应报文的封装</span><br>app.get(<span class="hljs-string">&#x27;/server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello AJAX&quot;</span>);<br>&#125;)<br><br>app.get(<span class="hljs-string">&#x27;/ie&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello IE&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//延时响应</span><br>app.get(<span class="hljs-string">&#x27;/delay&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置三秒钟的延时响应</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">//设置响应体</span><br>        response.send(<span class="hljs-string">&quot;延时响应&quot;</span>);<br>    &#125;, <span class="hljs-number">3000</span>);<br><br>&#125;)<br><br>app.post(<span class="hljs-string">&#x27;/server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-built_in">console</span>.log(request.headers);<span class="hljs-comment">//在终端输出请求头信息</span><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello AJAX POST&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//app.all()可以接收任意类型的HTTP请求</span><br>app.all(<span class="hljs-string">&#x27;/json-server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-built_in">console</span>.log(request.headers);<span class="hljs-comment">//在终端输出请求头信息</span><br><br>    <span class="hljs-comment">//响应一个数据</span><br>    <span class="hljs-keyword">const</span> data = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;wang&#x27;</span><br>    &#125;<br>    <span class="hljs-comment">//对对象进行字符串转换</span><br>    <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">JSON</span>.stringify(data);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(str);<br>&#125;)<br><br><span class="hljs-comment">//4.监听端口</span><br>app.listen(<span class="hljs-number">8000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务器已经启动，8000 端口监听中....&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AJAX</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>取消请求</title>
    <link href="/2021/10/10/AJAX/%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82/"/>
    <url>/2021/10/10/AJAX/%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<p>可以利用xhr.timeout设置请求的<u>超时自动取消</u>，也可以<strong>手动取消请求</strong>。</p><p>利用**abort()**方法取消请求</p><p>注：（1）const 声明一个只读的常量，一旦声明，常量的值就不能改变</p><p>​        （2）let 声明的变量只在 let 命令所在的代码块内有效</p><h4 id="前端代码："><a href="#前端代码：" class="headerlink" title="前端代码："></a>前端代码：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>取消请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击取消<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//获取元素对象</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="javascript">                     <span class="hljs-comment">//const 声明一个只读的常量，一旦声明，常量的值就不能改变</span></span><br><span class="javascript">        <span class="hljs-keyword">let</span> x = <span class="hljs-literal">null</span>;<span class="hljs-comment">// let 声明的变量只在 let 命令所在的代码块内有效</span></span><br><span class="javascript"></span><br><span class="javascript">        btns[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            x = <span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="javascript">            x.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://127.0.0.1:8000/delay&#x27;</span>);</span><br><span class="javascript">            x.send();</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 利用abort()方法取消请求</span></span><br><span class="javascript">        btns[<span class="hljs-number">1</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            x.abort();</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h4 id="服务器端代码（后端）："><a href="#服务器端代码（后端）：" class="headerlink" title="服务器端代码（后端）："></a>服务器端代码（后端）：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// express框架 服务端</span><br><span class="hljs-comment">//1.引入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-comment">//2.创建应用对象</span><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">//3.创建路由规则</span><br><span class="hljs-comment">// request 是对请求报文的封装</span><br><span class="hljs-comment">// response 是对响应报文的封装</span><br>app.get(<span class="hljs-string">&#x27;/server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello AJAX&quot;</span>);<br>&#125;)<br><br>app.get(<span class="hljs-string">&#x27;/ie&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello IE&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//延时响应</span><br>app.get(<span class="hljs-string">&#x27;/delay&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置三秒钟的延时响应</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">//设置响应体</span><br>        response.send(<span class="hljs-string">&quot;延时响应&quot;</span>);<br>    &#125;, <span class="hljs-number">3000</span>);<br><br>&#125;)<br><br>app.post(<span class="hljs-string">&#x27;/server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-built_in">console</span>.log(request.headers);<span class="hljs-comment">//在终端输出请求头信息</span><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello AJAX POST&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//app.all()可以接收任意类型的HTTP请求</span><br>app.all(<span class="hljs-string">&#x27;/json-server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-built_in">console</span>.log(request.headers);<span class="hljs-comment">//在终端输出请求头信息</span><br><br>    <span class="hljs-comment">//响应一个数据</span><br>    <span class="hljs-keyword">const</span> data = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;wang&#x27;</span><br>    &#125;<br>    <span class="hljs-comment">//对对象进行字符串转换</span><br>    <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">JSON</span>.stringify(data);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(str);<br>&#125;)<br><br><span class="hljs-comment">//4.监听端口</span><br>app.listen(<span class="hljs-number">8000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务器已经启动，8000 端口监听中....&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AJAX</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>请求超时与网络异常</title>
    <link href="/2021/10/10/AJAX/%E8%AF%B7%E6%B1%82%E8%B6%85%E6%97%B6%E4%B8%8E%E7%BD%91%E7%BB%9C%E5%BC%82%E5%B8%B8/"/>
    <url>/2021/10/10/AJAX/%E8%AF%B7%E6%B1%82%E8%B6%85%E6%97%B6%E4%B8%8E%E7%BD%91%E7%BB%9C%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h4 id="前端代码："><a href="#前端代码：" class="headerlink" title="前端代码："></a>前端代码：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>请求超时与网络异常<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#result</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span> <span class="hljs-number">#90B</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击发送请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;button&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">        <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#result&#x27;</span>);</span><br><span class="javascript"></span><br><span class="javascript">        btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;test&#x27;</span>);</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<span class="hljs-comment">//Ajax 的核心是 XMLHttpRequest 对象</span></span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//超时设置----超过2s未得到结果就取消请求</span></span><br><span class="javascript">            xhr.timeout = <span class="hljs-number">2000</span>;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//超时回调</span></span><br><span class="javascript">            xhr.ontimeout = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                alert(<span class="hljs-string">&quot;请求超时，请稍后重试！&quot;</span>)</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            </span><br><span class="javascript">            <span class="hljs-comment">//网络异常回调</span></span><br><span class="javascript">            xhr.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                alert(<span class="hljs-string">&quot;网络异常，请稍后重试！&quot;</span>)</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">            xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://127.0.0.1:8000/delay&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-comment">//Date.now() 获取当前的时间戳，向浏览器表明每次都是不同的请求(不同的url)</span></span><br><span class="javascript"></span><br><span class="javascript">            xhr.send();</span><br><span class="javascript">            xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) &#123;</span><br><span class="javascript">                        result.innerHTML = xhr.response;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h4 id="服务器端代码（后端）："><a href="#服务器端代码（后端）：" class="headerlink" title="服务器端代码（后端）："></a>服务器端代码（后端）：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// express框架 服务端</span><br><span class="hljs-comment">//1.引入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-comment">//2.创建应用对象</span><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">//3.创建路由规则</span><br><span class="hljs-comment">// request 是对请求报文的封装</span><br><span class="hljs-comment">// response 是对响应报文的封装</span><br>app.get(<span class="hljs-string">&#x27;/server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello AJAX&quot;</span>);<br>&#125;)<br><br>app.get(<span class="hljs-string">&#x27;/ie&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello IE&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//延时响应</span><br>app.get(<span class="hljs-string">&#x27;/delay&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置三秒钟的延时响应</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">//设置响应体</span><br>        response.send(<span class="hljs-string">&quot;延时响应&quot;</span>);<br>    &#125;, <span class="hljs-number">3000</span>);<br><br>&#125;)<br><br>app.post(<span class="hljs-string">&#x27;/server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-built_in">console</span>.log(request.headers);<span class="hljs-comment">//在终端输出请求头信息</span><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello AJAX POST&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//app.all()可以接收任意类型的HTTP请求</span><br>app.all(<span class="hljs-string">&#x27;/json-server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-built_in">console</span>.log(request.headers);<span class="hljs-comment">//在终端输出请求头信息</span><br><br>    <span class="hljs-comment">//响应一个数据</span><br>    <span class="hljs-keyword">const</span> data = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;wang&#x27;</span><br>    &#125;<br>    <span class="hljs-comment">//对对象进行字符串转换</span><br>    <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">JSON</span>.stringify(data);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(str);<br>&#125;)<br><br><span class="hljs-comment">//4.监听端口</span><br>app.listen(<span class="hljs-number">8000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务器已经启动，8000 端口监听中....&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AJAX</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决IE缓存问题</title>
    <link href="/2021/10/10/AJAX/IE%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
    <url>/2021/10/10/AJAX/IE%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h4 id="IE-ajax缓存问题："><a href="#IE-ajax缓存问题：" class="headerlink" title="IE ajax缓存问题："></a>IE ajax缓存问题：</h4><p>在默认情况下，IE会缓存相同地址ajax请求的结果。IE的第一次ajax请求会发送到服务器端处理，如果后续的请求的参数与第一次的一样，IE浏览器会<strong>直接返回缓存的结果而不是去服务器获取</strong>。</p><p>☞导致实时的数据不能及时呈现</p><p><strong>注：CHrome谷歌浏览器不存在此问题</strong></p><h4 id="前端代码："><a href="#前端代码：" class="headerlink" title="前端代码："></a>前端代码：</h4><p>Solve：利用Date.now() 获取当前的时间戳，向浏览器表明每次都是不同的请求(不同的url)，从而跳过IE的缓存，每次都向服务器端发送请求。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>IE缓存问题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#result</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span> <span class="hljs-number">#258</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击发送请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;button&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">        <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#result&#x27;</span>);<span class="hljs-comment">//Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问</span></span><br><span class="javascript"></span><br><span class="javascript">        btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;test&#x27;</span>);</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<span class="hljs-comment">//Ajax 的核心是 XMLHttpRequest 对象</span></span><br><span class="javascript"></span><br><span class="javascript">            xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://127.0.0.1:8000/ie?t=&#x27;</span>+<span class="hljs-built_in">Date</span>.now());</span><br><span class="javascript">            <span class="hljs-comment">//Date.now() 获取当前的时间戳，向浏览器表明每次都是不同的请求(不同的url)</span></span><br><span class="javascript"></span><br><span class="javascript">            xhr.send();</span><br><span class="javascript">            xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) &#123;</span><br><span class="javascript">                        result.innerHTML = xhr.response;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript"></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h4 id="服务器端代码（后端）："><a href="#服务器端代码（后端）：" class="headerlink" title="服务器端代码（后端）："></a>服务器端代码（后端）：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// express框架 服务端</span><br><span class="hljs-comment">//1.引入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-comment">//2.创建应用对象</span><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">//3.创建路由规则</span><br><span class="hljs-comment">// request 是对请求报文的封装</span><br><span class="hljs-comment">// response 是对响应报文的封装</span><br>app.get(<span class="hljs-string">&#x27;/server&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">request, response</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello AJAX&quot;</span>);<br>&#125;)<br><br>app.get(<span class="hljs-string">&#x27;/ie&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">request, response</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello IE&quot;</span>);<br>&#125;)<br><br>app.post(<span class="hljs-string">&#x27;/server&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">request, response</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-built_in">console</span>.log(request.headers);<span class="hljs-comment">//在终端输出请求头信息</span><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello AJAX POST&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//app.all()可以接收任意类型的HTTP请求</span><br>app.all(<span class="hljs-string">&#x27;/json-server&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">request, response</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-built_in">console</span>.log(request.headers);<span class="hljs-comment">//在终端输出请求头信息</span><br><br>    <span class="hljs-comment">//响应一个数据</span><br>    <span class="hljs-keyword">const</span> data = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;wang&#x27;</span><br>    &#125;<br>    <span class="hljs-comment">//对对象进行字符串转换</span><br>    <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">JSON</span>.stringify(data);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(str);<br>&#125;)<br><br><span class="hljs-comment">//4.监听端口</span><br>app.listen(<span class="hljs-number">8000</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务器已经启动，8000 端口监听中....&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AJAX</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>服务端响应JSON数据</title>
    <link href="/2021/10/10/AJAX/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%93%8D%E5%BA%94JSON%E6%95%B0%E6%8D%AE/"/>
    <url>/2021/10/10/AJAX/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%93%8D%E5%BA%94JSON%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>JSON简介：JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。JSON采用完全独立于语言的文本格式，这些特性使JSON成为理想的数据交换语言。易于人阅读和编写，同时也易于机器解析和生成。</p><p>JSON的两种基本结构：</p><ol><li><p>键值对的集合（A collection of name/value pairs）。不同的语言中，它被理解为对象（object），记录（record），结构（struct），字典（dictionary），哈希表（hash table），有键列表（keyed list），或者关联数组 （associative array）。</p></li><li><p>值的有序列表（An ordered list of values）。在大部分语言中，它被理解为数组（array）。</p></li></ol><p>简单地说，JSON 可以将 JavaScript 对象中表示的一组数据转换为字符串，然后就可以在函数之间轻松地传递这个字符串，或者在异步应用程序中将字符串从 Web 客户机传递给服务器端程序。这个字符串看起来有点儿古怪，但是 JavaScript 很容易解释它，而且 JSON 可以表示比”名称 / 值对”更复杂的结构。例如，可以表示数组和复杂的对象，而不仅仅是键和值的简单列表。</p><p>json示例数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"> &#123;<br>            <span class="hljs-attr">&quot;test1&quot;</span>: <span class="hljs-string">&quot;wx9fdb8ble7ce3c68f&quot;</span>,<br>            <span class="hljs-attr">&quot;test2&quot;</span>: <span class="hljs-string">&quot;123456789&quot;</span>,<br>            <span class="hljs-attr">&quot;testData1&quot;</span>: &#123;   <br>                <span class="hljs-attr">&quot;testdatason1&quot;</span>: <span class="hljs-string">&quot;97895455&quot;</span><br>                <span class="hljs-string">&quot;testdatason2&quot;</span>:<span class="hljs-number">3</span>,<br>                <span class="hljs-attr">&quot;testData2&quot;</span>: [<br>                    &#123;<br>                        <span class="hljs-attr">&quot;testshuzu1&quot;</span>:<span class="hljs-string">&quot;12&quot;</span><br>                        <span class="hljs-string">&quot;testshuzu1&quot;</span>:<span class="hljs-string">&quot;11&quot;</span><br>                    &#125;,<br>                     &#123;<br>                        <span class="hljs-attr">&quot;testshuzu2&quot;</span>:<span class="hljs-string">&quot;13&quot;</span><br>                        <span class="hljs-string">&quot;testshuzu2&quot;</span>:<span class="hljs-string">&quot;14&quot;</span><br>                    &#125;,<br>                    ,<br>                    &#123;<br>                         <span class="hljs-attr">&quot;testshuzu3&quot;</span>:<span class="hljs-string">&quot;15&quot;</span><br>                        <span class="hljs-string">&quot;testshuzu3&quot;</span>:<span class="hljs-string">&quot;16&quot;</span><br>                    &#125;<br>                ]<br>          &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="前端代码："><a href="#前端代码：" class="headerlink" title="前端代码："></a><strong>前端代码：</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JSON响应<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#result</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span> <span class="hljs-number">#89b</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;result&#x27;</span>);<span class="hljs-comment">//Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问</span></span><br><span class="javascript">        <span class="hljs-comment">//绑定键盘按下事件</span></span><br><span class="javascript">        <span class="hljs-built_in">window</span>.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//发送请求</span></span><br><span class="javascript">            <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//设置响应体数据的类型</span></span><br><span class="javascript">            xhr.responseType = <span class="hljs-string">&#x27;json&#x27;</span>;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//初始化</span></span><br><span class="javascript">            xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;http://127.0.0.1:8000/json-server&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-comment">//发送</span></span><br><span class="javascript">            xhr.send();</span><br><span class="javascript">            <span class="hljs-comment">//事件绑定</span></span><br><span class="javascript">            xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">if</span>(xhr.readyState === <span class="hljs-number">4</span>)&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>)&#123;</span><br><span class="javascript">                        <span class="hljs-comment">//处理服务端返回的结果</span></span><br><span class="javascript"></span><br><span class="javascript">                        <span class="hljs-comment">// //方式一：手动对数据进行转化</span></span><br><span class="javascript">                        <span class="hljs-comment">// let data = JSON.parse(xhr.response);</span></span><br><span class="javascript">                        <span class="hljs-comment">// console.log(data);</span></span><br><span class="javascript">                        <span class="hljs-comment">// result.innerHTML = data.name;</span></span><br><span class="javascript"></span><br><span class="javascript">                        <span class="hljs-comment">//方式二：自动对数据进行转化</span></span><br><span class="javascript">                        <span class="hljs-comment">//需提前设置 响应体数据的类型</span></span><br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(xhr.response);</span><br><span class="javascript">                        result.innerHTML = xhr.response.name;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h4 id="服务器端代码（后端）："><a href="#服务器端代码（后端）：" class="headerlink" title="服务器端代码（后端）："></a>服务器端代码（后端）：</h4><p><strong>利用express框架构建服务端</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// express框架 服务端</span><br><span class="hljs-comment">//1.引入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-comment">//2.创建应用对象</span><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">//3.创建路由规则</span><br><span class="hljs-comment">// request 是对请求报文的封装</span><br><span class="hljs-comment">// response 是对响应报文的封装</span><br>app.get(<span class="hljs-string">&#x27;/server&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">request, response</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello AJAX&quot;</span>);<br>&#125;)<br><br>app.post(<span class="hljs-string">&#x27;/server&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">request, response</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-built_in">console</span>.log(request.headers);<span class="hljs-comment">//在终端输出请求头信息</span><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello AJAX POST&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//app.all()可以接收任意类型的HTTP请求</span><br>app.all(<span class="hljs-string">&#x27;/json-server&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">request, response</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-built_in">console</span>.log(request.headers);<span class="hljs-comment">//在终端输出请求头信息</span><br><br>    <span class="hljs-comment">//响应一个数据</span><br>    <span class="hljs-keyword">const</span> data = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;wang&#x27;</span><br>    &#125;<br>    <span class="hljs-comment">//对对象进行字符串转换</span><br>    <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">JSON</span>.stringify(data);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(str);<br>&#125;)<br><br><span class="hljs-comment">//4.监听端口</span><br>app.listen(<span class="hljs-number">8000</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务器已经启动，8000 端口监听中....&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AJAX</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>AJAX POST 请求</title>
    <link href="/2021/10/10/AJAX/AJAX%20POST%20%E8%AF%B7%E6%B1%82/"/>
    <url>/2021/10/10/AJAX/AJAX%20POST%20%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<h4 id="前端代码："><a href="#前端代码：" class="headerlink" title="前端代码："></a><strong>前端代码：</strong></h4><p><strong>AJAX 的核心是 XMLHttpRequest 对象</strong></p><p><strong>AJAX发送POST请求并设置请求体信息</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>AJAX POST 请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#result</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span> <span class="hljs-number">#903</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//获取元素对象</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;result&quot;</span>);<span class="hljs-comment">//Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问</span></span><br><span class="javascript">        <span class="hljs-comment">//绑定事件</span></span><br><span class="javascript">        result.addEventListener(<span class="hljs-string">&quot;mouseover&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">// console.log(&#x27;调试&#x27;);</span></span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//AJAX 发送 POST 请求</span></span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//1.创建对象</span></span><br><span class="javascript">            <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<span class="hljs-comment">//Ajax 的核心是 XMLHttpRequest 对象</span></span><br><span class="javascript">            </span><br><span class="javascript">            <span class="hljs-comment">//2.初始化 设置请求方法和url</span></span><br><span class="javascript">            xhr.open(<span class="hljs-string">&#x27;POST&#x27;</span>,<span class="hljs-string">&#x27;http://127.0.0.1:8000/server&#x27;</span>); </span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//设置请求头----一般存放身份校验信息，由服务器进行身份校验</span></span><br><span class="javascript">            xhr.setRequestHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>,<span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>);<span class="hljs-comment">// Content-Type 设置请求体内容的类型</span></span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//3.发送</span></span><br><span class="javascript">            xhr.send(<span class="hljs-string">&#x27;a=200&amp;b=100&#x27;</span>);<span class="hljs-comment">// POST 设置请求体</span></span><br><span class="javascript">            <span class="hljs-comment">// xhr.send(&#x27;a:200&amp;b:100&#x27;);</span></span><br><span class="javascript">            <span class="hljs-comment">// xhr.send(&#x27;077&#x27;);</span></span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//4.事件绑定</span></span><br><span class="javascript">            xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-comment">//判断</span></span><br><span class="javascript">                <span class="hljs-keyword">if</span>(xhr.readyState === <span class="hljs-number">4</span>)&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>)&#123;</span><br><span class="javascript">                        <span class="hljs-comment">//处理服务端返回的结果</span></span><br><span class="javascript">                        result.innerHTML = xhr.response;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h4 id="服务器端代码（后端）："><a href="#服务器端代码（后端）：" class="headerlink" title="服务器端代码（后端）："></a>服务器端代码（后端）：</h4><p><strong>利用express框架构建服务端</strong></p><p><strong>添加app.post()方法接收POST请求</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// express框架 服务端</span><br><span class="hljs-comment">//1.引入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-comment">//2.创建应用对象</span><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">//3.创建路由规则</span><br><span class="hljs-comment">// request 是对请求报文的封装</span><br><span class="hljs-comment">// response 是对响应报文的封装</span><br>app.get(<span class="hljs-string">&#x27;/server&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">request, response</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello AJAX&quot;</span>);<br>&#125;)<br><br>app.post(<span class="hljs-string">&#x27;/server&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">request, response</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-built_in">console</span>.log(request.headers);<span class="hljs-comment">//在终端输出请求头信息</span><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello AJAX POST&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//4.监听端口</span><br>app.listen(<span class="hljs-number">8000</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务器已经启动，8000 端口监听中....&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><br><p>运行：</p><p>在集成终端中执行 node server.js，再在浏览器中打开html即可。</p>]]></content>
    
    
    <categories>
      
      <category>AJAX</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>AJAX简介</title>
    <link href="/2021/10/09/AJAX/AJAX%E7%AE%80%E4%BB%8B/"/>
    <url>/2021/10/09/AJAX/AJAX%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="1、什么是AJAX？"><a href="#1、什么是AJAX？" class="headerlink" title="1、什么是AJAX？"></a>1、什么是AJAX？</h4><p>AJAX全称为“Asynchronous JavaScript and XML”（异步JavaScript和XML），是一种创建交互式网页应用的网页开发技术，通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。 </p><h4 id="2、为什么要使用AJAX"><a href="#2、为什么要使用AJAX" class="headerlink" title="2、为什么要使用AJAX?"></a><strong>2、为什么要使用AJAX?</strong></h4><p><strong>这儿我们可以说到Ajax的优点之一：</strong>它可以在不刷新整个页面的情况下与服务器通信，保持原有页面状态。举个例子：在我们浏览网页的时候会有两种情况</p><p>1.点击链接，页面白屏，等待跳转到另一个页面。</p><p>2.页面不刷新，局部出现新内容获得更好的用户体验。——  AJAX</p><h4 id="3、AJAX的优缺点"><a href="#3、AJAX的优缺点" class="headerlink" title="3、AJAX的优缺点"></a>3、AJAX的优缺点</h4><p><strong>优点</strong>：</p><p>1.最大的优点就是页面无需刷新，在页面内与服务器通信，非常好的用户体验。<br>2.使用异步的方式与服务器通信，不需要中断操作。<br>3.可以把以前服务器负担的工作转嫁给客户端，减轻服务器和带宽，可以最大程度减少冗余请求。<br>4.基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。</p><p><strong>缺点</strong>：</p><p>1.AJAX干掉了Back和History功能，即对浏览器机制的破坏。<br>在动态更新页面的情况下，<strong>用户无法回到前一个页面状态</strong>（无历史记录），因为浏览器仅能记忆历史记录中的静态页面。一个被完整读入的页面与一个已经被动态修改过的页面之间的差别非常微妙；用户通常会希望单击后退按钮能够取消他们的前一次操作，但是在Ajax应用程序中，这将无法实现。<br>2.安全问题技术同时也对IT企业带来了新的安全威胁，ajax技术就如同对企业数据建立了一个直接通道。这使得开发者在不经意间会暴露比以前更多的数据和服务器逻辑。ajax的逻辑可以对客户端的安全扫描技术隐藏起来，允许黑客从远端服务器上建立新的攻击。还有ajax也难以避免一些已知的安全弱点，诸如跨站点脚步攻击、SQL注入攻击和基于credentials的安全漏洞等。<br>3.对搜索引擎的支持比较弱。如果使用不当，AJAX会增大网络数据的流量，从而降低整个系统的性能。</p>]]></content>
    
    
    <categories>
      
      <category>AJAX</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>AJAX GET 请求</title>
    <link href="/2021/10/09/AJAX/AJAX%20GET%20%E8%AF%B7%E6%B1%82/"/>
    <url>/2021/10/09/AJAX/AJAX%20GET%20%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<h4 id="前端代码："><a href="#前端代码：" class="headerlink" title="前端代码："></a><strong>前端代码：</strong></h4><p><strong>AJAX 的核心是 XMLHttpRequest 对象</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>AJAX GET 请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#result</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span> <span class="hljs-number">#90b</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击发送请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//获取button元素</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;button&#x27;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">        <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;result&quot;</span>)</span><br><span class="javascript">        <span class="hljs-comment">//绑定事件</span></span><br><span class="javascript">        btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">// 发送 AJAX 请求的步骤:</span></span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//1.创建对象</span></span><br><span class="javascript">            <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest(); <span class="hljs-comment">//Ajax 的核心是 XMLHttpRequest 对象</span></span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//2.初始化 设置请求方法和url</span></span><br><span class="javascript">            xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;http://127.0.0.1:8000/server?a=200&amp;b=100&#x27;</span>); <span class="hljs-comment">//添加请求参数</span></span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//3.发送</span></span><br><span class="javascript">            xhr.send();</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//4.事件绑定 处理服务端返回的结果</span></span><br><span class="javascript">            <span class="hljs-comment">//readystate 是 xhr 对象中的属性，有0,1,2,3,4</span></span><br><span class="javascript">            <span class="hljs-comment">//为4时是xhr的最终结果</span></span><br><span class="javascript">            xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">//判断（服务端返回了所有的结果）</span></span><br><span class="javascript">                <span class="hljs-keyword">if</span>(xhr.readyState === <span class="hljs-number">4</span>)&#123;</span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-comment">//判断响应状态码 200 404 403 401 500</span></span><br><span class="javascript">                    <span class="hljs-comment">// 2xx 都是成功</span></span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>)&#123;</span><br><span class="javascript">                        <span class="hljs-comment">//处理结果 行 头 空行 体</span></span><br><span class="javascript">                        <span class="hljs-comment">//响应</span></span><br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(xhr.status);<span class="hljs-comment">//状态码</span></span><br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(xhr.statusText);<span class="hljs-comment">//状态字符串</span></span><br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(xhr.getAllResponseHeaders);<span class="hljs-comment">//所有响应头</span></span><br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(xhr.response);<span class="hljs-comment">//响应体——HTML代码</span></span><br><span class="javascript"></span><br><span class="javascript">                        <span class="hljs-comment">//设置 result 的文本</span></span><br><span class="javascript">                        result.innerHTML = xhr.response;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    <span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;访问失败&quot;</span>);<span class="hljs-comment">//在浏览器控制台上输出</span></span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h4 id="服务器端JS代码（后端）："><a href="#服务器端JS代码（后端）：" class="headerlink" title="服务器端JS代码（后端）："></a>服务器端JS代码（后端）：</h4><p><strong>利用express框架构建服务端</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1.引入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-comment">//2.创建应用对象</span><br><span class="hljs-keyword">const</span> app = express();<br><br><span class="hljs-comment">//3.创建路由规则</span><br><span class="hljs-comment">// request 是对请求报文的封装</span><br><span class="hljs-comment">// response 是对响应报文的封装</span><br>app.get(<span class="hljs-string">&#x27;/server&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">request, response</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//设置响应头 设置允许跨域</span><br>    response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br><br>    <span class="hljs-comment">//设置响应体</span><br>    response.send(<span class="hljs-string">&quot;Hello AJAX&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//4.监听端口</span><br>app.listen(<span class="hljs-number">8000</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;服务器已经启动，8000 端口监听中....&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><br><p>运行：</p><p>在集成终端中执行 node server.js，再在浏览器中打开html即可。</p>]]></content>
    
    
    <categories>
      
      <category>AJAX</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最长递增子序列的个数</title>
    <link href="/2021/09/20/LeetCode/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <url>/2021/09/20/LeetCode/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/number-of-longest-increasing-subsequence/">673. 最长递增子序列的个数 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>题意：给定一个未排序的整数数组，找到最长递增子序列的个数。</p><p>样例：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: [1,3,5,4,7]</span><br><span class="hljs-section">输出: 2</span><br></code></pre></td></tr></table></figure><h3 id="solve："><a href="#solve：" class="headerlink" title="solve："></a>solve：</h3><p><strong>O(n^2)求LIS + cnt[]记录个数</strong></p><p>**dp[i]**：以nums[i]结尾的最长递增子序列的长度</p><p>**cnt[i]**：以nums[i]为结尾的字符串，最长递增子序列的个数</p><p>(原数组为nums)</p><p>code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findNumberOfLIS</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> dp[<span class="hljs-number">2010</span>];<br>    <span class="hljs-keyword">int</span> cnt[<span class="hljs-number">2010</span>];<br>    <span class="hljs-keyword">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">int</span> i,j;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        dp[i]=<span class="hljs-number">1</span>;<br>        cnt[i]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;i;j++)<br>            <span class="hljs-keyword">if</span>(nums[j]&lt;nums[i])<br>            &#123;<br>                <span class="hljs-keyword">if</span>(dp[i]&lt;dp[j]+<span class="hljs-number">1</span>)<br>                &#123;<br>                    dp[i]=dp[j]+<span class="hljs-number">1</span>;<br>                    cnt[i]=cnt[j];<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dp[i]==dp[j]+<span class="hljs-number">1</span>)<br>                    cnt[i]+=cnt[j];<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> maxlen=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        maxlen=<span class="hljs-built_in">max</span>(maxlen,dp[i]);<br>    <span class="hljs-keyword">int</span> r=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(dp[i]==maxlen)<br>            r+=cnt[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++ STL使用</title>
    <link href="/2021/09/17/ACM/C++STL%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/09/17/ACM/C++STL%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1、vector"><a href="#1、vector" class="headerlink" title="1、vector"></a>1、<strong>vector</strong></h1><h4 id="（1）初始化"><a href="#（1）初始化" class="headerlink" title="（1）初始化"></a>（1）初始化</h4><p>一维vector：vector<int> v;</int></p><p><strong>二维vector初始化方法</strong>：</p><p>①利用push_back()函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; vec;<br><br>vector&lt;<span class="hljs-keyword">int</span>&gt; a;<br>a.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>a.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br> <br>vector&lt;<span class="hljs-keyword">int</span>&gt; b;<br>b.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br>b.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br> <br>vec.<span class="hljs-built_in">push_back</span>(a);<br>vec.<span class="hljs-built_in">push_back</span>(b);<br></code></pre></td></tr></table></figure><p>②先定义好二维数组结构，再直接赋值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//得到一个5行3列的数组</span><br><span class="hljs-comment">//由vector实现的二维数组，可以通过resize()的形式改变行、列值</span><br><span class="hljs-keyword">int</span> i,j;<br>vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">array</span>(<span class="hljs-number">5</span>);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; array.<span class="hljs-built_in">size</span>(); i++)<br>    array[i].<span class="hljs-built_in">resize</span>(<span class="hljs-number">3</span>);<br> <br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; array.<span class="hljs-built_in">size</span>(); i++)<br>&#123;<br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; array[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();j++)<br>    &#123;<br>        array[i][j] = (i+<span class="hljs-number">1</span>)*(j+<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>③限定size</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt; vector&lt;<span class="hljs-keyword">int</span>&gt; &gt; <span class="hljs-built_in">points</span>(<span class="hljs-number">3</span>,vector&lt;<span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure><p>说明：声明一个名为points的容器，其元素为vector容器，类似int类型的二维数组。</p><p>初始化数值：points有3个子元素，每个子元素vector<int>的长度为2，初始化为0。</int></p><p>注意：两个’&lt;’符号之间要隔开。</p><br><h4 id="（2）取长度"><a href="#（2）取长度" class="headerlink" title="（2）取长度"></a>（2）取长度</h4><p>使用size()函数</p><p>eg：针对二维vector：vector&lt;vector<int> &gt; vec;</int></p><p>vec.size()和 vec[0].size()来分别获取行数和列数。</p><br><h4 id="（3）插入-amp-删除元素"><a href="#（3）插入-amp-删除元素" class="headerlink" title="（3）插入&amp;删除元素"></a>（3）插入&amp;删除元素</h4><p>push_back()函数在尾部添加元素；</p><p>clear()函数清空vector中的所有元素；</p><p>pop_back()函数删除末尾的元素。</p><h5 id="删除指定元素："><a href="#删除指定元素：" class="headerlink" title="删除指定元素："></a>删除指定元素：</h5><ul><li>iterator erase (iterator position);　　//删除指定位置的元素</li><li>iterator erase (iterator first, iterator last);　　//删除指定范围内的元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums;<br>vector&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = nums.<span class="hljs-built_in">begin</span>();<br><span class="hljs-keyword">int</span> n=nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(n--)<br>&#123;<br>    <span class="hljs-keyword">if</span>(nums[i]==nums[i+<span class="hljs-number">1</span>])<br>    &#123;<br>        it = nums.<span class="hljs-built_in">erase</span>(it);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        i++;<br>        it++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="（4）vector排序"><a href="#（4）vector排序" class="headerlink" title="（4）vector排序"></a>（4）vector排序</h4><p>一维vector：sort(v.begin(), v.end())；</p><p><strong>二维vector</strong>：sort()函数，默认的是对二维数组按照第一列进行排序。</p><p>如：vector&lt;vector<int>&gt; v(10);  [[3,2],[6,1],[2,4]]</int></p><p>sort(v.begin(), v.end())；后结果为：[[2,4],[3,2],[6,1]]</p><h5 id="自定义排序："><a href="#自定义排序：" class="headerlink" title="自定义排序："></a>自定义排序：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; a, vector&lt;<span class="hljs-keyword">int</span>&gt; b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>] == b[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>] &gt; b[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>] &gt; b[<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(),cmp);<br></code></pre></td></tr></table></figure><p>注：排序的传参用<strong>引用</strong>，这样更快，如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;a, <span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;b)</span></span><br></code></pre></td></tr></table></figure><br><h4 id="（5）vector元素去重"><a href="#（5）vector元素去重" class="headerlink" title="（5）vector元素去重"></a>（5）vector元素去重</h4><p>利用set进行去重</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; vector&lt;T&gt; <span class="hljs-title">vectorToset_distinct</span><span class="hljs-params">(vector&lt;T&gt; vec)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">set&lt;T&gt; <span class="hljs-title">st</span><span class="hljs-params">(vec.begin(), vec.end())</span></span>;<br>    vec.<span class="hljs-built_in">assign</span>(st.<span class="hljs-built_in">begin</span>(), st.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> vec;<br>&#125;<br></code></pre></td></tr></table></figure><br><br><h1 id="2、map"><a href="#2、map" class="headerlink" title="2、map"></a>2、map</h1><h4 id="（1）初始化-1"><a href="#（1）初始化-1" class="headerlink" title="（1）初始化"></a>（1）初始化</h4><p>（key—value）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">map&lt;string,<span class="hljs-keyword">int</span>&gt; myMap;<br></code></pre></td></tr></table></figure><h4 id="（2）默认值"><a href="#（2）默认值" class="headerlink" title="（2）默认值"></a>（2）默认值</h4><p>当map内元素值(value)为int类型或常量时，默认值为<strong>0</strong>。</p><p>当map内元素值(value)为string类型时，默认值为一个空串。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">map&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; table;<br><br>table[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><br>cout&lt;&lt;table[<span class="hljs-number">0</span>]&lt;&lt;endl;<br>cout&lt;&lt;table[<span class="hljs-number">1</span>]&lt;&lt;endl;<br><br></code></pre></td></tr></table></figure><p>输出结果：</p><p>0</p><p>1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">map&lt;<span class="hljs-keyword">int</span>,string&gt; m;<br>string a=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">if</span>(m[<span class="hljs-number">0</span>]==a)<br>    cout&lt;&lt;<span class="hljs-number">666</span>&lt;&lt;endl;<br></code></pre></td></tr></table></figure><p>输出结果：</p><p>666</p><h4 id="（3）map可以结合vector使用，vector负责记录map所有的key值"><a href="#（3）map可以结合vector使用，vector负责记录map所有的key值" class="headerlink" title="（3）map可以结合vector使用，vector负责记录map所有的key值"></a>（3）map可以结合vector使用，vector负责记录map所有的key值</h4>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Typora使用</title>
    <link href="/2021/09/06/Typora%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2021/09/06/Typora%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="Typora快捷键整合"><a href="#Typora快捷键整合" class="headerlink" title="Typora快捷键整合"></a>Typora快捷键整合</h2><p>Ctrl+1  一阶标题&ensp;&ensp;&ensp;&ensp; Ctrl+2  二阶标题&ensp;&ensp;&ensp;&ensp;Ctrl+3  三阶标题&ensp;&ensp;&ensp;&ensp; Ctrl+4  四阶标题</p><br><p>Ctrl+B  <strong>字体加粗</strong> &ensp;&ensp;&ensp;&ensp;Ctrl+I  字体倾斜 &ensp;&ensp;&ensp;&ensp;Ctrl+U  <u>下划线</u> </p><br><p>Ctrl+T  创建表格&ensp;&ensp;&ensp;&ensp;Ctrl+K  创建超链接&ensp;&ensp;&ensp;&ensp;Alt+Shift+5 删除线&ensp;&ensp;&ensp;&ensp;Ctrl+Shift+I    插入图片        </p><p>Ctrl+Shift+M    公式块&ensp;&ensp;&ensp;&ensp;Ctrl+Shift+Q    引用 </p><br><p>Ctrl+L  选中某句话&ensp;&ensp;&ensp;&ensp;Ctrl+D  选中某个单词&ensp;&ensp;&ensp;&ensp;Ctrl+E  选中相同格式的文字</p><p>Ctrl+F  搜索&ensp;&ensp;&ensp;&ensp;Ctrl+H  搜索并替换</p><br><p><strong>插入代码块</strong></p><p>输入3个反引号（`）(~ 键) + 回车，并在后面选择一个语言名称即可实现语法高亮。</p><br><h5 id="使用-1-2-3-创建有序列表"><a href="#使用-1-2-3-创建有序列表" class="headerlink" title="使用 1. 2. 3. 创建有序列表"></a>使用 1. 2. 3. 创建有序列表</h5><ol><li>AAA</li><li>BBB</li><li>CCC</li></ol><br><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><p><a href="https://www.simon96.online/2018/10/18/Typora%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%AD%E6%96%87%E7%89%88%EF%BC%89/">Typora入门（中文版）</a></p><p><a href="https://www.cnblogs.com/hider/p/11614688.html">Typora入门：全网最全教程</a></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo使用</title>
    <link href="/2021/09/03/hexo%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/09/03/hexo%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h2><h2 id="你好-王凯锐"><a href="#你好-王凯锐" class="headerlink" title="你好,王凯锐"></a>你好,王凯锐</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
